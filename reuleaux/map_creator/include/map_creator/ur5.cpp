/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-15 10:42:53.101220
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKsin(j[1]);
x1=IKcos(j[2]);
x2=IKcos(j[3]);
x3=IKsin(j[2]);
x4=IKsin(j[3]);
x5=IKsin(j[5]);
x6=IKcos(j[1]);
x7=IKcos(j[5]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[0]);
x11=IKcos(j[0]);
x12=((0.425)*x3);
x13=((1.0)*x3);
x14=((0.08916)*x2);
x15=((1.0)*x1);
x16=((1.0)*x7);
x17=((0.425)*x1);
x18=((0.08916)*x4);
x19=((0.39225)*x3);
x20=(x0*x4);
x21=(x0*x10);
x22=(x11*x6);
x23=(x10*x6);
x24=(x0*x2);
x25=(x0*x1);
x26=(x0*x11);
x27=(x11*x15);
x28=(x1*x22);
x29=(x13*x20);
x30=((((-1.0)*x27))+((x23*x3)));
x31=((((-1.0)*x15*x22))+((x10*x13)));
x32=((((-1.0)*x13*x23))+x27);
x33=(((x13*x22))+((x10*x15)));
x34=((-1.0)*x33);
x35=(((x11*x13))+((x15*x23)));
x36=(x2*x30);
x37=(x2*x31);
x38=(x31*x4);
x39=((((-1.0)*x15*x20))+(((-1.0)*x13*x24)));
x40=(x33*x4);
x41=(x35*x4);
x42=(x2*x34);
x43=(x37+x40);
x44=(((x32*x4))+((x2*x35)));
x45=((((-1.0)*x39*x9))+((x8*(((((-1.0)*x1*x24))+(((1.0)*x29)))))));
x46=(((x9*(((((-1.0)*x36))+(((-1.0)*x41))))))+((x44*x8)));
x47=(((x9*(((((-1.0)*x38))+(((-1.0)*x42))))))+((x43*x8)));
eerot[0]=(((x5*x6))+((x45*x7)));
eerot[1]=((((-1.0)*x16*x6))+((x45*x5)));
eerot[2]=(((x39*x8))+((x9*(((((-1.0)*x15*x24))+x29)))));
IkReal x48=(x0*x3);
eetrans[0]=((-0.0823)+(((-0.10915)*x6))+((x8*((((x18*x25))+((x14*x48))))))+((x9*(((((-1.0)*x18*x48))+((x14*x25))))))+(((-1.0)*x17*x24))+((x12*x20))+(((-0.39225)*x25)));
eerot[3]=(((x47*x7))+(((-1.0)*x26*x5)));
eerot[4]=(((x47*x5))+((x26*x7)));
eerot[5]=(((x43*x9))+((x8*((x38+x42)))));
eetrans[1]=((((-0.09465)*x10))+(((0.10915)*x26))+((x2*(((((-1.0)*x17*x22))+((x10*x12))))))+((x8*(((((-1.0)*x18*x31))+(((-1.0)*x14*x34))))))+((x9*(((((-0.08916)*x37))+(((-0.08916)*x40))))))+((x10*x19))+(((-0.39225)*x28))+((x4*((((x12*x22))+((x10*x17)))))));
eerot[6]=(((x21*x5))+((x46*x7)));
eerot[7]=((((-1.0)*x16*x21))+((x46*x5)));
eerot[8]=(((x8*((x36+x41))))+((x44*x9)));
IkReal x49=((1.0)*x14);
IkReal x50=((1.0)*x18);
eetrans[2]=((((0.39225)*x1*x23))+(((-0.09465)*x11))+((x2*((((x17*x23))+((x11*x12))))))+((x11*x19))+(((-0.10915)*x21))+((x9*(((((-1.0)*x32*x50))+(((-1.0)*x35*x49))))))+((x8*(((((-1.0)*x35*x50))+(((-1.0)*x30*x49))))))+((x4*(((((-1.0)*x12*x23))+((x11*x17)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j5,cj5,sj5,htj5,j5mul,j4,cj4,sj4,htj4,j4mul,j3,cj3,sj3,htj3,j3mul,j2,cj2,sj2,htj2,j2mul,j1,cj1,sj1,htj1,j1mul,j0,cj0,sj0,htj0,j0mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij5[2], _nj5,_ij4[2], _nj4,_ij3[2], _nj3,_ij2[2], _nj2,_ij1[2], _nj1,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r10;
new_r01=r11;
new_r02=((-1.0)*r12);
new_px=((((-0.08916)*r12))+(((-1.0)*py)));
new_r10=r20;
new_r11=r21;
new_r12=((-1.0)*r22);
new_py=((((-1.0)*pz))+(((-0.08916)*r22)));
new_r20=((-1.0)*r00);
new_r21=((-1.0)*r01);
new_r22=r02;
new_pz=((0.0823)+px+(((0.08916)*r02)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
{
IkReal j0eval[2];
j0eval[0]=((IKabs(npy))+(IKabs(npx)));
j0eval[1]=((npx*npx)+(npy*npy));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x56 = IKatan2WithCheck(IkReal(npy),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x56.valid){
continue;
}
IkReal x54=((1.0)*(x56.value));
if((((npx*npx)+(npy*npy))) < -0.00001)
continue;
CheckValue<IkReal> x57=IKPowWithIntegerCheck(IKabs(IKsqrt(((npx*npx)+(npy*npy)))),-1);
if(!x57.valid){
continue;
}
if( (((0.10915)*(x57.value))) < -1-IKFAST_SINCOS_THRESH || (((0.10915)*(x57.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x55=IKasin(((0.10915)*(x57.value)));
j0array[0]=((((-1.0)*x54))+(((-1.0)*x55)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x55+(((-1.0)*x54)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x58=cj0*cj0;
IkReal x59=r00*r00;
IkReal x60=r10*r10;
IkReal x61=(cj0*r01);
IkReal x62=(r00*sj0);
IkReal x63=(r10*sj0);
IkReal x64=(cj0*r11);
IkReal x65=((4.0)*x59);
IkReal x66=((4.0)*x60);
IkReal x67=((4.0)*x58);
CheckValue<IkReal> x72=IKPowWithIntegerCheck((x64+(((-1.0)*x63))),-1);
if(!x72.valid){
continue;
}
IkReal x68=x72.value;
IkReal x69=(x61*x68);
IkReal x70=((1.0)*x62*x68);
if((((((-8.0)*x63*x64))+x65+x66+(((-1.0)*x58*x66))+(((-1.0)*x58*x65))+((x67*(r01*r01)))+((x67*(r11*r11)))+(((-8.0)*x61*x62)))) < -0.00001)
continue;
IkReal x71=((0.5)*x68*(IKsqrt(((((-8.0)*x63*x64))+x65+x66+(((-1.0)*x58*x66))+(((-1.0)*x58*x65))+((x67*(r01*r01)))+((x67*(r11*r11)))+(((-8.0)*x61*x62))))));
j5array[0]=((2.0)*(atan(((((-1.0)*x70))+x71+x69))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((-2.0)*(atan((x71+x70+(((-1.0)*x69))))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

{
IkReal j4eval[1];
j4eval[0]=cj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x73=((1.0)*sj0);
if( IKabs(((((-1.0)*r00*x73))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r21))+(((-1.0)*r20*x73)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x73))+((cj0*r01))))+IKsqr((((cj0*r21))+(((-1.0)*r20*x73))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x73))+((cj0*r01))), (((cj0*r21))+(((-1.0)*r20*x73))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x74=((1.0)*cj0);
evalcond[0]=((IKcos(j4))+(((-1.0)*r21*x74))+((r20*sj0)));
evalcond[1]=(((r00*sj0))+(((-1.0)*r01*x74))+(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj5=0;
cj5=1.0;
j5=0;
IkReal x75=((0.049513706713125)*r22);
IkReal x76=((0.049513706713125)*r02);
IkReal x77=((0.0987151867400194)*cj4);
IkReal x78=((0.0987151867400194)*sj4);
IkReal x79=((2.09249685)*npz);
IkReal x80=(cj0*rxp1_0);
IkReal x81=((0.1980548268525)*sj0);
IkReal x82=(cj4*sj0);
IkReal x83=((0.5231242125)*npy);
IkReal x84=((0.501645347775)*npx);
IkReal x85=((0.61544025)*pp);
IkReal x86=((0.09902741342625)*sj0);
IkReal x87=(rxp0_0*sj0);
IkReal x88=((0.167215115925)*npx);
IkReal x89=(cj0*r00);
IkReal x90=((1.046248425)*npz);
IkReal x91=(sj0*sj4);
IkReal x92=(rxp0_2*sj0);
IkReal x93=(cj0*sj4);
IkReal x94=((0.167215115925)*npy);
IkReal x95=((1.84632075)*pp);
IkReal x96=(cj0*rxp1_2);
IkReal x97=((0.5231242125)*npx);
IkReal x98=(cj0*cj4);
IkReal x99=(cj0*r20);
IkReal x100=((0.349508517975)*x87);
IkReal x101=((0.349508517975)*x80);
IkReal x102=(cj4*x95);
IkReal x103=((0.349508517975)*x92);
IkReal x104=(sj4*x95);
IkReal x105=((0.349508517975)*x96);
IkReal x106=((0.501645347775)*cj0*npy);
IkReal x107=(x93*x97);
IkReal x108=(x83*x91);
IkReal x109=(x82*x83);
IkReal x110=(x97*x98);
IkReal x111=(x82*x84);
IkReal x112=((0.501645347775)*npy*x98);
IkReal x113=((0.501645347775)*npy*x93);
IkReal x114=(x84*x91);
IkReal x115=(x111+x100);
IkReal x116=(x114+x105);
IkReal x117=(x110+x109);
IkReal x118=(x108+x107+x75);
IkReal x119=(x113+x104+x103+x78);
IkReal x120=(x112+x101+x102+x77);
j1eval[0]=((((0.5)*(IKabs(((((-1.0)*x116))+x119+x118)))))+(((0.5)*(IKabs(((((-1.0)*x117))+(((-1.0)*x120))+x115+x76)))))+(((0.5)*(IKabs((((r21*x81))+(((0.1980548268525)*x99))+(((-1.0)*sj4*x79)))))))+(((0.5)*(IKabs(((((-1.0)*x76))+(((-1.0)*x120))+x117+x115)))))+(((0.5)*(IKabs(((((0.116502839325)*x92))+(((-1.0)*x118))+(((-0.116502839325)*x96))+((sj4*x85))+((x93*x94))+(((0.0329050622466731)*sj4))+(((-1.0)*x88*x91)))))))+(((0.5)*(IKabs(((((0.116502839325)*x87))+(((-1.0)*x94*x98))+(((-1.0)*x76))+((x82*x88))+(((-0.0329050622466731)*cj4))+x117+(((-0.116502839325)*x80))+(((-1.0)*cj4*x85)))))))+(IKabs((((r01*x86))+((cj4*x90))+(((0.09902741342625)*x89)))))+(IKabs((((r21*x86))+(((-1.0)*sj4*x90))+(((0.09902741342625)*x99)))))+(((0.5)*(IKabs(((((-1.0)*x116))+(((-1.0)*x118))+x119)))))+(((0.5)*(IKabs((((cj4*x79))+(((0.1980548268525)*x89))+((r01*x81))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j2, j1]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x121=((0.049513706713125)*r22);
IkReal x122=((0.0987151867400194)*sj4);
IkReal x123=((0.0329050622466731)*sj4);
IkReal x124=(cj0*rxp1_2);
IkReal x125=((0.5231242125)*sj4);
IkReal x126=(r21*sj0);
IkReal x127=(npz*sj4);
IkReal x128=(pp*sj4);
IkReal x129=(cj0*r20);
IkReal x130=(rxp0_2*sj0);
IkReal x131=((0.349508517975)*x130);
IkReal x132=((1.84632075)*x128);
IkReal x133=((0.349508517975)*x124);
IkReal x134=((0.116502839325)*x130);
IkReal x135=((0.61544025)*x128);
IkReal x136=((0.116502839325)*x124);
IkReal x137=(cj0*npy*sj4);
IkReal x138=(npx*sj0*sj4);
IkReal x139=(cj0*npx*x125);
IkReal x140=(npy*sj0*x125);
IkReal x141=((0.501645347775)*x137);
IkReal x142=((0.501645347775)*x138);
IkReal x143=((0.167215115925)*x137);
IkReal x144=((0.167215115925)*x138);
IkReal x145=(x142+x133);
IkReal x146=(x144+x136);
IkReal x147=((((-1.046248425)*x127))+(((0.09902741342625)*x129))+(((0.09902741342625)*x126)));
IkReal x148=(x140+x139+x121);
IkReal x149=(x141+x131+x132+x122);
IkReal x150=(x143+x135+x134+x123);
op[0]=((((-1.0)*x148))+(((-1.0)*x146))+x150);
op[1]=x147;
op[2]=((((-1.0)*x148))+(((-1.0)*x145))+x149);
op[3]=((((0.1980548268525)*x126))+(((0.1980548268525)*x129))+(((-2.09249685)*x127)));
op[4]=((((-1.0)*x145))+x148+x149);
op[5]=x147;
op[6]=((((-1.0)*x146))+x150+x148);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x151=((0.049513706713125)*r02);
IkReal x152=((0.0987151867400194)*cj4);
IkReal x153=((0.0329050622466731)*cj4);
IkReal x154=(cj4*npz);
IkReal x155=(cj0*rxp1_0);
IkReal x156=(cj4*pp);
IkReal x157=(rxp0_0*sj0);
IkReal x158=(cj4*npy);
IkReal x159=(r01*sj0);
IkReal x160=(cj0*r00);
IkReal x161=((0.349508517975)*x157);
IkReal x162=((0.349508517975)*x155);
IkReal x163=((1.84632075)*x156);
IkReal x164=((0.116502839325)*x157);
IkReal x165=((0.61544025)*x156);
IkReal x166=((0.116502839325)*x155);
IkReal x167=(cj4*npx*sj0);
IkReal x168=((0.5231242125)*sj0*x158);
IkReal x169=((0.5231242125)*cj0*cj4*npx);
IkReal x170=((0.501645347775)*x167);
IkReal x171=((0.501645347775)*cj0*x158);
IkReal x172=((0.167215115925)*x167);
IkReal x173=((0.167215115925)*cj0*x158);
IkReal x174=(x170+x161);
IkReal x175=(x172+x164);
IkReal x176=(x168+x169);
IkReal x177=((((1.046248425)*x154))+(((0.09902741342625)*x159))+(((0.09902741342625)*x160)));
IkReal x178=(x173+x166+x165+x153);
IkReal x179=(x171+x162+x163+x152);
j1evalpoly[0]=((((htj1*htj1*htj1)*(((((2.09249685)*x154))+(((0.1980548268525)*x160))+(((0.1980548268525)*x159))))))+(((-1.0)*x178))+(((-1.0)*x176))+((x177*(htj1*htj1*htj1*htj1*htj1)))+((htj1*x177))+x175+x151+(((htj1*htj1)*(((((-1.0)*x179))+(((-1.0)*x176))+x174+x151))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x151))+(((-1.0)*x178))+x175+x176))))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x151))+(((-1.0)*x179))+x174+x176)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x180=((11.447360491186)*cj1);
IkReal x181=((1.08349267049076)*sj1);
if( IKabs(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x180))+(((-1.0)*npy*sj0*x180))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.0)*cj0*r10*x181))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*r11*sj0*x181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x180))+(((-1.0)*npy*sj0*x180))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))))+IKsqr(((((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.0)*cj0*r10*x181))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*r11*sj0*x181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x180))+(((-1.0)*npy*sj0*x180))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))), ((((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.0)*cj0*r10*x181))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*r11*sj0*x181))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x182=IKsin(j3);
IkReal x183=IKcos(j3);
IkReal x184=r10*r10;
CheckValue<IkReal> x212=IKPowWithIntegerCheck(r11,-1);
if(!x212.valid){
continue;
}
IkReal x185=x212.value;
IkReal x186=((0.85)*cj0);
IkReal x187=((0.85)*cj1);
IkReal x188=((0.425)*sj1);
IkReal x189=((0.1621697775)*sj0);
IkReal x190=((0.1154725)*sj1);
IkReal x191=(r21*sj0);
IkReal x192=((0.425)*cj1);
IkReal x193=(sj0*x185);
IkReal x194=(r01*sj0);
IkReal x195=(r11*sj0);
IkReal x196=((1.0)*cj0);
IkReal x197=(cj0*npy);
IkReal x198=((0.1154725)*cj1);
IkReal x199=(cj0*r20);
IkReal x200=(cj0*r00);
IkReal x201=(r00*sj0);
IkReal x202=((0.13585)*cj0);
IkReal x203=((0.85)*sj1);
IkReal x204=(r20*sj0);
IkReal x205=((0.1621697775)*cj0);
IkReal x206=((2.0)*npx*sj0);
IkReal x207=(cj4*x183);
IkReal x208=((0.39225)*x182);
IkReal x209=((0.39225)*x183);
IkReal x210=(sj0*x203);
IkReal x211=((0.074252925)*x182);
evalcond[0]=(((rxp0_1*sj0))+((x188*x195))+x209+((r12*x192))+((cj0*r10*x188))+(((-1.0)*rxp1_1*x196)));
evalcond[1]=((0.09465)+(((-1.0)*x192*x195))+(((-1.0)*x184*x192*x193))+(((-1.0)*x208))+(((-1.0)*py))+((r12*x188)));
evalcond[2]=((((-1.0)*rxp1_2*x196))+(((0.09465)*sj4))+((x188*x199))+((x188*x191))+((rxp0_2*sj0))+((r22*x192))+(((-1.0)*sj4*x208)));
evalcond[3]=((((-1.0)*rxp1_0*x196))+((rxp0_0*sj0))+((x188*x194))+(((-0.09465)*cj4))+((x188*x200))+((cj4*x208))+((r02*x192)));
evalcond[4]=((-0.0355486475)+((npz*x203))+(((0.2717)*npx*sj0))+(((-1.0)*pp))+(((-1.0)*npy*sj0*x187))+(((-1.0)*x211))+(((-0.2717)*x197))+(((-1.0)*cj1*npx*x186)));
evalcond[5]=((((-1.0)*x192*x199))+(((-1.0)*x191*x192))+(((-1.0)*pz))+(((-1.0)*r21*x202))+(((0.0267)*cj4))+(((0.13585)*x204))+((r22*x188))+(((-1.0)*sj4*x209)));
evalcond[6]=((((0.0267)*sj4))+(((0.39225)*x207))+(((-1.0)*x192*x200))+(((-1.0)*x192*x194))+(((-1.0)*px))+(((0.13585)*x201))+((r02*x188))+(((-1.0)*r01*x202)));
evalcond[7]=((-0.00505431)+(((-1.0)*r12*x190))+(((0.0534)*py))+((x195*x198))+((x184*x193*x198))+(((-1.0)*rxp1_1*x210))+(((-1.0)*rxp2_1*x187))+(((-1.0)*r10*rxp0_1*x193*x203))+(((0.02094615)*x182)));
evalcond[8]=((((-1.0)*rxp1_2*x210))+((pp*x204))+((x198*x199))+(((-1.0)*pz*x206))+(((-1.0)*r22*x190))+(((0.02094615)*sj4*x183))+((r20*x189))+(((-1.0)*rxp0_2*sj1*x186))+(((2.0)*pz*x197))+(((-1.0)*pp*r21*x196))+(((-1.0)*r21*x205))+(((-1.0)*cj4*x211))+((x191*x198))+(((0.162105795)*cj4))+(((-1.0)*rxp2_2*x187))+(((0.2717)*pz)));
evalcond[9]=((((-1.0)*pp*r01*x196))+(((-1.0)*px*x206))+((x198*x200))+(((2.0)*px*x197))+((pp*x201))+((r00*x189))+(((-1.0)*sj4*x211))+(((-1.0)*r02*x190))+(((-0.02094615)*x207))+(((0.162105795)*sj4))+((x194*x198))+(((-1.0)*rxp0_0*sj1*x186))+(((-1.0)*r01*x205))+(((0.2717)*px))+(((-1.0)*rxp2_0*x187))+(((-1.0)*rxp1_0*x210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r21))+(((-1.0)*r20*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr((((cj0*r21))+(((-1.0)*r20*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), (((cj0*r21))+(((-1.0)*r20*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x213=((1.0)*cj0);
evalcond[0]=((IKcos(j4))+((r20*sj0))+(((-1.0)*r21*x213)));
evalcond[1]=(((r00*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*r01*x213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x214=((0.049513706713125)*r22);
IkReal x215=((0.0987151867400194)*sj4);
IkReal x216=(cj0*cj4);
IkReal x217=(npy*sj4);
IkReal x218=(rxp0_2*sj0);
IkReal x219=((0.349508517975)*rxp1_2);
IkReal x220=((0.1980548268525)*r20);
IkReal x221=(cj4*sj0);
IkReal x222=((0.1980548268525)*r21);
IkReal x223=((0.0329050622466731)*sj4);
IkReal x224=((0.09902741342625)*r21);
IkReal x225=(cj4*sj4);
IkReal x226=(npx*sj4);
IkReal x227=((0.116502839325)*rxp1_2);
IkReal x228=((0.09902741342625)*r20);
IkReal x229=((1.84632075)*pp);
IkReal x230=((2.09249685)*npz);
IkReal x231=(cj4*x214);
IkReal x232=(cj4*x215);
IkReal x233=(cj0*x219);
IkReal x234=((0.349508517975)*x218);
IkReal x235=(sj4*x229);
IkReal x236=((0.61544025)*pp*sj4);
IkReal x237=((1.046248425)*npz*sj4);
IkReal x238=((0.5231242125)*cj0*x226);
IkReal x239=((0.5231242125)*sj0*x217);
IkReal x240=(x216*x219);
IkReal x241=(x225*x229);
IkReal x242=(cj4*x234);
IkReal x243=((0.501645347775)*sj0*x226);
IkReal x244=((0.501645347775)*cj0*x217);
IkReal x245=((0.5231242125)*x216*x226);
IkReal x246=((0.5231242125)*x217*x221);
IkReal x247=((0.501645347775)*x221*x226);
IkReal x248=((0.501645347775)*x216*x217);
IkReal x249=(x233+x243);
IkReal x250=(x240+x247);
IkReal x251=(x214+x238+x239);
IkReal x252=(x215+x234+x235+x244);
IkReal x253=(x231+x246+x245);
IkReal x254=(x232+x242+x241+x248);
j1eval[0]=((IKabs(((((-1.0)*x216*x228))+(((1.046248425)*npz*x225))+(((-1.0)*x221*x224)))))+(((0.5)*(IKabs((x250+(((-1.0)*x254))+(((-1.0)*x253)))))))+(((0.5)*(IKabs(((((-1.0)*cj4*x223))+((x216*x227))+(((-0.61544025)*pp*x225))+x253+(((-0.167215115925)*x216*x217))+(((0.167215115925)*x221*x226))+(((-0.116502839325)*cj4*x218)))))))+(((0.5)*(IKabs((x251+x249+(((-1.0)*x252)))))))+(((0.5)*(IKabs((x250+x253+(((-1.0)*x254)))))))+(((0.5)*(IKabs(((((-1.0)*x216*x220))+((x225*x230))+(((-1.0)*x221*x222)))))))+(((0.5)*(IKabs(((((0.167215115925)*sj0*x226))+(((-1.0)*x236))+((cj0*x227))+x251+(((-0.116502839325)*x218))+(((-0.167215115925)*cj0*x217))+(((-1.0)*x223)))))))+(((0.5)*(IKabs((x249+(((-1.0)*x251))+(((-1.0)*x252)))))))+(IKabs(((((-1.0)*cj0*x228))+(((-1.0)*sj0*x224))+x237)))+(((0.5)*(IKabs(((((-1.0)*cj0*x220))+(((-1.0)*sj0*x222))+((sj4*x230))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j2, j1]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x255=((0.049513706713125)*r22);
IkReal x256=((0.0987151867400194)*sj4);
IkReal x257=((0.0329050622466731)*sj4);
IkReal x258=(cj0*rxp1_2);
IkReal x259=((0.5231242125)*sj4);
IkReal x260=(r21*sj0);
IkReal x261=(npz*sj4);
IkReal x262=(pp*sj4);
IkReal x263=(cj0*r20);
IkReal x264=(rxp0_2*sj0);
IkReal x265=((0.349508517975)*x258);
IkReal x266=((0.349508517975)*x264);
IkReal x267=((1.84632075)*x262);
IkReal x268=((0.116502839325)*x258);
IkReal x269=((0.116502839325)*x264);
IkReal x270=((0.61544025)*x262);
IkReal x271=(cj0*npy*sj4);
IkReal x272=(npx*sj0*sj4);
IkReal x273=(cj0*npx*x259);
IkReal x274=(npy*sj0*x259);
IkReal x275=((0.501645347775)*x272);
IkReal x276=((0.501645347775)*x271);
IkReal x277=((0.167215115925)*x272);
IkReal x278=((0.167215115925)*x271);
IkReal x279=(x265+x275);
IkReal x280=(x268+x277);
IkReal x281=((((1.046248425)*x261))+(((-0.09902741342625)*x260))+(((-0.09902741342625)*x263)));
IkReal x282=(x255+x274+x273);
IkReal x283=(x256+x267+x266+x276);
IkReal x284=(x257+x269+x270+x278);
op[0]=(x282+x280+(((-1.0)*x284)));
op[1]=x281;
op[2]=(x279+x282+(((-1.0)*x283)));
op[3]=((((2.09249685)*x261))+(((-0.1980548268525)*x263))+(((-0.1980548268525)*x260)));
op[4]=(x279+(((-1.0)*x282))+(((-1.0)*x283)));
op[5]=x281;
op[6]=(x280+(((-1.0)*x282))+(((-1.0)*x284)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x285=((0.349508517975)*cj4);
IkReal x286=(rxp0_2*sj0);
IkReal x287=(cj0*rxp1_2);
IkReal x288=(cj4*sj4);
IkReal x289=((0.116502839325)*cj4);
IkReal x290=(npx*sj0);
IkReal x291=((0.049513706713125)*cj4*r22);
IkReal x292=((0.0987151867400194)*x288);
IkReal x293=((0.0329050622466731)*x288);
IkReal x294=(cj0*cj4*r20);
IkReal x295=(npy*x288);
IkReal x296=(cj4*r21*sj0);
IkReal x297=(x285*x287);
IkReal x298=((1.84632075)*pp*x288);
IkReal x299=(x285*x286);
IkReal x300=(x287*x289);
IkReal x301=(x286*x289);
IkReal x302=((0.61544025)*pp*x288);
IkReal x303=((0.5231242125)*cj0*npx*x288);
IkReal x304=((0.501645347775)*x288*x290);
IkReal x305=((0.5231242125)*sj0*x295);
IkReal x306=((0.501645347775)*cj0*x295);
IkReal x307=((0.167215115925)*x288*x290);
IkReal x308=((0.167215115925)*cj0*x295);
IkReal x309=(x307+x300);
IkReal x310=(x304+x297);
IkReal x311=((((-0.09902741342625)*x294))+(((-0.09902741342625)*x296))+(((1.046248425)*npz*x288)));
IkReal x312=(x305+x303+x291);
IkReal x313=(x306+x298+x299+x292);
IkReal x314=(x308+x302+x301+x293);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*((x310+x312+(((-1.0)*x313))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x309+x312+(((-1.0)*x314))))))+x309+(((-1.0)*x312))+(((-1.0)*x314))+((x311*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*((x310+(((-1.0)*x312))+(((-1.0)*x313))))))+((htj1*x311))+(((htj1*htj1*htj1)*(((((2.09249685)*npz*x288))+(((-0.1980548268525)*x296))+(((-0.1980548268525)*x294)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x315=((11.447360491186)*cj1);
IkReal x316=((1.08349267049076)*sj1);
if( IKabs(((-0.478750803419529)+(((-1.0)*npy*sj0*x315))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x315))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*x316))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+((cj0*r10*x316))+(((1.08349267049076)*cj1*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-1.0)*npy*sj0*x315))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x315))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))))+IKsqr((((r11*sj0*x316))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+((cj0*r10*x316))+(((1.08349267049076)*cj1*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-1.0)*npy*sj0*x315))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x315))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))), (((r11*sj0*x316))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+((cj0*r10*x316))+(((1.08349267049076)*cj1*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x317=IKsin(j3);
IkReal x318=IKcos(j3);
IkReal x319=r10*r10;
CheckValue<IkReal> x347=IKPowWithIntegerCheck(r11,-1);
if(!x347.valid){
continue;
}
IkReal x320=x347.value;
IkReal x321=((0.85)*cj0);
IkReal x322=((0.85)*cj1);
IkReal x323=((0.425)*sj1);
IkReal x324=((0.1621697775)*sj0);
IkReal x325=((0.1154725)*sj1);
IkReal x326=(r21*sj0);
IkReal x327=((0.425)*cj1);
IkReal x328=(sj0*x320);
IkReal x329=(r01*sj0);
IkReal x330=(r11*sj0);
IkReal x331=((1.0)*cj0);
IkReal x332=(cj0*npy);
IkReal x333=((0.1154725)*cj1);
IkReal x334=(cj0*r20);
IkReal x335=(cj0*r00);
IkReal x336=(r00*sj0);
IkReal x337=((0.13585)*cj0);
IkReal x338=((0.85)*sj1);
IkReal x339=(r20*sj0);
IkReal x340=((0.1621697775)*cj0);
IkReal x341=((2.0)*npx*sj0);
IkReal x342=(cj4*x318);
IkReal x343=((0.39225)*x317);
IkReal x344=((0.39225)*x318);
IkReal x345=(sj0*x338);
IkReal x346=((0.074252925)*x317);
evalcond[0]=(((r12*x327))+((rxp0_1*sj0))+((x323*x330))+(((-1.0)*rxp1_1*x331))+(((-1.0)*x344))+((cj0*r10*x323)));
evalcond[1]=((-0.09465)+((r12*x323))+x343+(((-1.0)*py))+(((-1.0)*x319*x327*x328))+(((-1.0)*x327*x330)));
evalcond[2]=(((x323*x326))+(((0.09465)*sj4))+(((-1.0)*rxp1_2*x331))+((r22*x327))+((rxp0_2*sj0))+(((-1.0)*sj4*x343))+((x323*x334)));
evalcond[3]=(((r02*x327))+((x323*x329))+((rxp0_0*sj0))+(((-1.0)*cj4*x343))+(((0.09465)*cj4))+(((-1.0)*rxp1_0*x331))+((x323*x335)));
evalcond[4]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-1.0)*cj1*npx*x321))+(((-0.2717)*x332))+(((-1.0)*pp))+((npz*x338))+(((-1.0)*npy*sj0*x322))+(((-1.0)*x346)));
evalcond[5]=((((0.13585)*x339))+(((-1.0)*x326*x327))+(((-1.0)*r21*x337))+(((-1.0)*pz))+((r22*x323))+(((0.0267)*cj4))+(((-1.0)*sj4*x344))+(((-1.0)*x327*x334)));
evalcond[6]=(((r02*x323))+(((0.13585)*x336))+(((-1.0)*r01*x337))+(((-1.0)*x327*x329))+(((-0.0267)*sj4))+(((-1.0)*px))+(((-0.39225)*x342))+(((-1.0)*x327*x335)));
evalcond[7]=((0.00505431)+(((-1.0)*r12*x325))+((x330*x333))+(((-1.0)*rxp1_1*x345))+(((0.0534)*py))+((x319*x328*x333))+(((-1.0)*rxp2_1*x322))+(((-0.02094615)*x317))+(((-1.0)*r10*rxp0_1*x328*x338)));
evalcond[8]=((((-1.0)*rxp0_2*sj1*x321))+(((-1.0)*rxp2_2*x322))+(((-1.0)*pp*r21*x331))+((r20*x324))+(((-1.0)*r22*x325))+(((-1.0)*cj4*x346))+((pp*x339))+(((-1.0)*rxp1_2*x345))+((x333*x334))+(((0.162105795)*cj4))+(((0.02094615)*sj4*x318))+((x326*x333))+(((0.2717)*pz))+(((2.0)*pz*x332))+(((-1.0)*pz*x341))+(((-1.0)*r21*x340)));
evalcond[9]=((((-1.0)*px*x341))+(((-1.0)*rxp0_0*sj1*x321))+(((-1.0)*rxp2_0*x322))+((r00*x324))+((pp*x336))+(((-1.0)*pp*r01*x331))+(((2.0)*px*x332))+((x329*x333))+((x333*x335))+(((-1.0)*rxp1_0*x345))+(((-1.0)*r01*x340))+((sj4*x346))+(((-1.0)*r02*x325))+(((0.02094615)*x342))+(((0.2717)*px))+(((-0.162105795)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r10*sj0))+(((-1.0)*cj0*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r21))+(((-1.0)*r20*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj0))+(((-1.0)*cj0*r11))))+IKsqr((((cj0*r21))+(((-1.0)*r20*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*sj0))+(((-1.0)*cj0*r11))), (((cj0*r21))+(((-1.0)*r20*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x348=((1.0)*cj0);
evalcond[0]=((IKcos(j4))+((r20*sj0))+(((-1.0)*r21*x348)));
evalcond[1]=((((-1.0)*r11*x348))+((r10*sj0))+(((-1.0)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x349=((0.049513706713125)*r22);
IkReal x350=((0.049513706713125)*r12);
IkReal x351=((0.0987151867400194)*sj4);
IkReal x352=((0.0987151867400194)*cj4);
IkReal x353=((2.09249685)*npz);
IkReal x354=((0.349508517975)*cj0);
IkReal x355=((0.1980548268525)*sj0);
IkReal x356=(cj4*sj0);
IkReal x357=((0.5231242125)*npy);
IkReal x358=((0.501645347775)*npx);
IkReal x359=((0.116502839325)*cj0);
IkReal x360=((0.61544025)*pp);
IkReal x361=((0.167215115925)*npx);
IkReal x362=(cj0*r10);
IkReal x363=(cj0*r20);
IkReal x364=((1.046248425)*npz);
IkReal x365=(rxp0_1*sj0);
IkReal x366=(rxp0_2*sj0);
IkReal x367=(sj0*sj4);
IkReal x368=(cj0*sj4);
IkReal x369=((0.167215115925)*npy);
IkReal x370=((1.84632075)*pp);
IkReal x371=((0.5231242125)*npx);
IkReal x372=((0.09902741342625)*sj0);
IkReal x373=(cj0*cj4);
IkReal x374=((0.349508517975)*x366);
IkReal x375=(sj4*x370);
IkReal x376=(rxp1_2*x354);
IkReal x377=(cj4*x370);
IkReal x378=((0.349508517975)*x365);
IkReal x379=(rxp1_1*x354);
IkReal x380=((0.501645347775)*cj0*npy);
IkReal x381=(x368*x371);
IkReal x382=(x357*x367);
IkReal x383=(x356*x357);
IkReal x384=(x371*x373);
IkReal x385=((0.501645347775)*npy*x368);
IkReal x386=(x358*x367);
IkReal x387=((0.501645347775)*npy*x373);
IkReal x388=(x356*x358);
IkReal x389=(x388+x379);
IkReal x390=(x386+x376);
IkReal x391=(x350+x384+x383);
IkReal x392=(x382+x381+x349);
IkReal x393=(x352+x387+x378+x377);
IkReal x394=(x351+x385+x375+x374);
j1eval[0]=((((0.5)*(IKabs((((r11*x355))+(((0.1980548268525)*x362))+(((-1.0)*cj4*x353)))))))+(((0.5)*(IKabs((((r21*x355))+(((0.1980548268525)*x363))+(((-1.0)*sj4*x353)))))))+(((0.5)*(IKabs(((((-1.0)*x391))+((x369*x373))+(((0.0329050622466731)*cj4))+(((-1.0)*x356*x361))+((cj4*x360))+(((0.116502839325)*x365))+(((-1.0)*rxp1_1*x359)))))))+(IKabs(((((-1.0)*cj4*x364))+(((0.09902741342625)*x362))+((r11*x372)))))+(IKabs(((((-1.0)*sj4*x364))+(((0.09902741342625)*x363))+((r21*x372)))))+(((0.5)*(IKabs(((((-1.0)*x392))+(((-1.0)*x390))+x394)))))+(((0.5)*(IKabs(((((-1.0)*x390))+x394+x392)))))+(((0.5)*(IKabs((x391+x393+(((-1.0)*x389)))))))+(((0.5)*(IKabs(((((-1.0)*x392))+((sj4*x360))+(((-1.0)*x361*x367))+(((0.116502839325)*x366))+(((0.0329050622466731)*sj4))+(((-1.0)*rxp1_2*x359))+((x368*x369)))))))+(((0.5)*(IKabs(((((-1.0)*x391))+x393+(((-1.0)*x389))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j2, j1]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x395=((0.049513706713125)*r22);
IkReal x396=((0.0987151867400194)*sj4);
IkReal x397=((0.0329050622466731)*sj4);
IkReal x398=(cj0*rxp1_2);
IkReal x399=((0.5231242125)*sj4);
IkReal x400=(r21*sj0);
IkReal x401=(npz*sj4);
IkReal x402=(pp*sj4);
IkReal x403=(cj0*r20);
IkReal x404=(rxp0_2*sj0);
IkReal x405=((0.349508517975)*x404);
IkReal x406=((1.84632075)*x402);
IkReal x407=((0.349508517975)*x398);
IkReal x408=((0.116502839325)*x404);
IkReal x409=((0.61544025)*x402);
IkReal x410=((0.116502839325)*x398);
IkReal x411=(cj0*npy*sj4);
IkReal x412=(npx*sj0*sj4);
IkReal x413=(cj0*npx*x399);
IkReal x414=(npy*sj0*x399);
IkReal x415=((0.501645347775)*x411);
IkReal x416=((0.501645347775)*x412);
IkReal x417=((0.167215115925)*x411);
IkReal x418=((0.167215115925)*x412);
IkReal x419=(x407+x416);
IkReal x420=(x410+x418);
IkReal x421=((((-1.046248425)*x401))+(((0.09902741342625)*x403))+(((0.09902741342625)*x400)));
IkReal x422=(x395+x413+x414);
IkReal x423=(x396+x405+x406+x415);
IkReal x424=(x397+x409+x408+x417);
op[0]=((((-1.0)*x420))+(((-1.0)*x422))+x424);
op[1]=x421;
op[2]=((((-1.0)*x422))+x423+(((-1.0)*x419)));
op[3]=((((0.1980548268525)*x403))+(((0.1980548268525)*x400))+(((-2.09249685)*x401)));
op[4]=(x423+x422+(((-1.0)*x419)));
op[5]=x421;
op[6]=((((-1.0)*x420))+x424+x422);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x425=((0.0987151867400194)*cj4);
IkReal x426=((0.049513706713125)*r12);
IkReal x427=((0.0329050622466731)*cj4);
IkReal x428=(cj4*npz);
IkReal x429=(cj0*rxp1_1);
IkReal x430=(cj0*r10);
IkReal x431=(cj4*npy);
IkReal x432=(rxp0_1*sj0);
IkReal x433=(cj4*pp);
IkReal x434=(r11*sj0);
IkReal x435=((1.84632075)*x433);
IkReal x436=((0.349508517975)*x432);
IkReal x437=((0.349508517975)*x429);
IkReal x438=((0.61544025)*x433);
IkReal x439=((0.116502839325)*x432);
IkReal x440=((0.116502839325)*x429);
IkReal x441=(cj4*npx*sj0);
IkReal x442=((0.5231242125)*sj0*x431);
IkReal x443=((0.501645347775)*cj0*x431);
IkReal x444=((0.501645347775)*x441);
IkReal x445=((0.5231242125)*cj0*cj4*npx);
IkReal x446=((0.167215115925)*cj0*x431);
IkReal x447=((0.167215115925)*x441);
IkReal x448=(x447+x440);
IkReal x449=(x437+x444);
IkReal x450=((((-1.046248425)*x428))+(((0.09902741342625)*x434))+(((0.09902741342625)*x430)));
IkReal x451=(x426+x445+x442);
IkReal x452=(x427+x438+x439+x446);
IkReal x453=(x425+x435+x436+x443);
j1evalpoly[0]=((((-1.0)*x448))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x448))+(((-1.0)*x451))+x452))))+((x450*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1)*(((((0.1980548268525)*x430))+(((0.1980548268525)*x434))+(((-2.09249685)*x428))))))+(((htj1*htj1)*(((((-1.0)*x449))+x453+x451))))+((htj1*x450))+x452+x451+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x449))+(((-1.0)*x451))+x453)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x454=((1.08349267049076)*sj1);
IkReal x455=((11.447360491186)*cj1);
if( IKabs(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x455))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-1.0)*cj0*npx*x455))+(((-3.65911511230029)*cj0*npy)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.54939451880178)*rxp0_0*sj0))+(((2.54939451880178)*cj0*rxp1_0))+(((-1.08349267049076)*cj1*r02))+(((-1.0)*cj0*r00*x454))+(((-1.0)*r01*sj0*x454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x455))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-1.0)*cj0*npx*x455))+(((-3.65911511230029)*cj0*npy))))+IKsqr(((((-2.54939451880178)*rxp0_0*sj0))+(((2.54939451880178)*cj0*rxp1_0))+(((-1.08349267049076)*cj1*r02))+(((-1.0)*cj0*r00*x454))+(((-1.0)*r01*sj0*x454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x455))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-1.0)*cj0*npx*x455))+(((-3.65911511230029)*cj0*npy))), ((((-2.54939451880178)*rxp0_0*sj0))+(((2.54939451880178)*cj0*rxp1_0))+(((-1.08349267049076)*cj1*r02))+(((-1.0)*cj0*r00*x454))+(((-1.0)*r01*sj0*x454))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x456=IKsin(j3);
IkReal x457=IKcos(j3);
CheckValue<IkReal> x483=IKPowWithIntegerCheck(cj0,-1);
if(!x483.valid){
continue;
}
IkReal x458=x483.value;
IkReal x459=sj0*sj0;
IkReal x460=(r10*sj0);
IkReal x461=(cj0*cj1);
IkReal x462=(r20*sj0);
IkReal x463=((0.85)*cj1);
IkReal x464=((0.13585)*cj0);
IkReal x465=((0.425)*r00);
IkReal x466=((0.425)*sj1);
IkReal x467=(cj0*r11);
IkReal x468=((1.0)*cj0);
IkReal x469=((0.425)*cj1);
IkReal x470=(r21*sj0);
IkReal x471=((0.85)*sj1);
IkReal x472=(r11*sj0);
IkReal x473=((1.0)*pp);
IkReal x474=((0.1154725)*cj1);
IkReal x475=((0.1154725)*sj1);
IkReal x476=((0.1154725)*r00);
IkReal x477=(cj4*x457);
IkReal x478=((0.074252925)*x456);
IkReal x479=((0.39225)*x456);
IkReal x480=(cj0*x471);
IkReal x481=((0.39225)*x457);
IkReal x482=(cj1*x458*x459);
evalcond[0]=((((-1.0)*rxp1_0*x468))+((rxp0_0*sj0))+((cj0*sj1*x465))+x481+((r01*sj0*x466))+((r02*x469)));
evalcond[1]=((0.09465)+(((-1.0)*x465*x482))+(((-1.0)*x479))+(((-1.0)*px))+((r02*x466))+(((-1.0)*x461*x465)));
evalcond[2]=(((r22*x469))+(((-1.0)*sj4*x479))+(((0.09465)*sj4))+(((-1.0)*rxp1_2*x468))+((x466*x470))+((cj0*r20*x466))+((rxp0_2*sj0)));
evalcond[3]=(((cj0*r10*x466))+(((-1.0)*cj4*x479))+((rxp0_1*sj0))+(((0.09465)*cj4))+((x466*x472))+((r12*x469))+(((-1.0)*rxp1_1*x468)));
evalcond[4]=((-0.0355486475)+((npz*x471))+(((0.2717)*npx*sj0))+(((-0.2717)*cj0*npy))+(((-1.0)*npy*sj0*x463))+(((-1.0)*x473))+(((-1.0)*x478))+(((-0.85)*npx*x461)));
evalcond[5]=(((r22*x466))+(((0.13585)*x462))+(((-1.0)*x469*x470))+(((-0.425)*r20*x461))+(((-1.0)*pz))+(((0.0267)*cj4))+(((-1.0)*sj4*x481))+(((-1.0)*r21*x464)));
evalcond[6]=((((-0.425)*r10*x461))+(((0.13585)*x460))+(((-0.39225)*x477))+(((-1.0)*x469*x472))+(((-0.0267)*sj4))+(((-1.0)*py))+((r12*x466))+(((-1.0)*r11*x464)));
evalcond[7]=((-0.00505431)+(((0.02094615)*x456))+(((-1.0)*rxp0_0*x480))+(((0.0534)*px))+((r00*x458*x459*x474))+(((-1.0)*rxp2_0*x463))+((x461*x476))+(((-1.0)*r02*x475))+(((-1.0)*rxp1_0*sj0*x471)));
evalcond[8]=((((0.0534)*pz))+(((-1.0)*cj4*x478))+((x470*x474))+(((-1.0)*rxp0_2*x480))+(((0.1621697775)*x462))+(((0.02094615)*sj4*x457))+(((-1.0)*r22*x475))+(((-0.1621697775)*cj0*r21))+(((0.1154725)*r20*x461))+(((0.162105795)*cj4))+(((-1.0)*rxp1_2*sj0*x471))+(((-1.0)*pp*r21*x468))+(((-1.0)*rxp2_2*x463))+((pp*x462)));
evalcond[9]=((((-1.0)*rxp1_1*sj0*x471))+(((-1.0)*x467*x473))+((x472*x474))+(((0.0534)*py))+(((-0.1621697775)*x467))+(((0.02094615)*x477))+((sj4*x478))+(((0.1621697775)*x460))+(((-1.0)*r12*x475))+(((-1.0)*rxp2_1*x463))+(((-1.0)*rxp0_1*x480))+(((-0.162105795)*sj4))+(((0.1154725)*r10*x461))+((pp*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x484=((1.0)*sj0);
if( IKabs(((((-1.0)*r10*x484))+((cj0*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r21))+(((-1.0)*r20*x484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x484))+((cj0*r11))))+IKsqr((((cj0*r21))+(((-1.0)*r20*x484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x484))+((cj0*r11))), (((cj0*r21))+(((-1.0)*r20*x484))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x485=((1.0)*cj0);
evalcond[0]=((IKcos(j4))+(((-1.0)*r21*x485))+((r20*sj0)));
evalcond[1]=(((r10*sj0))+(IKsin(j4))+(((-1.0)*r11*x485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x486=((0.049513706713125)*r22);
IkReal x487=((0.0987151867400194)*sj4);
IkReal x488=(cj4*sj4);
IkReal x489=(cj0*npy);
IkReal x490=((0.61544025)*pp);
IkReal x491=((0.501645347775)*sj4);
IkReal x492=((1.046248425)*npz);
IkReal x493=(rxp0_2*sj0);
IkReal x494=(npx*sj0);
IkReal x495=((0.167215115925)*sj4);
IkReal x496=((1.84632075)*pp);
IkReal x497=(cj0*rxp1_2);
IkReal x498=(r21*sj0);
IkReal x499=((2.09249685)*npz);
IkReal x500=(cj0*r20);
IkReal x501=(cj4*x486);
IkReal x502=(cj4*x487);
IkReal x503=((0.349508517975)*x497);
IkReal x504=((0.349508517975)*x493);
IkReal x505=(sj4*x496);
IkReal x506=(cj4*x500);
IkReal x507=(cj4*x498);
IkReal x508=((0.5231242125)*npy*sj0);
IkReal x509=(cj4*x497);
IkReal x510=((0.5231242125)*cj0*npx);
IkReal x511=(sj4*x510);
IkReal x512=(sj4*x508);
IkReal x513=(x488*x496);
IkReal x514=(cj4*x504);
IkReal x515=(cj4*x503);
IkReal x516=(x491*x494);
IkReal x517=(x489*x491);
IkReal x518=(x488*x510);
IkReal x519=(x488*x508);
IkReal x520=((0.501645347775)*x488*x489);
IkReal x521=((0.501645347775)*x488*x494);
IkReal x522=(x503+x516);
IkReal x523=(x521+x515);
IkReal x524=(x486+x512+x511);
IkReal x525=(x487+x504+x505+x517);
IkReal x526=(x501+x519+x518);
IkReal x527=(x502+x520+x514+x513);
j1eval[0]=((((0.5)*(IKabs(((((-1.0)*x523))+x526+x527)))))+(((0.5)*(IKabs(((((-0.1980548268525)*x500))+((sj4*x499))+(((-0.1980548268525)*x498)))))))+(((0.5)*(IKabs(((((-1.0)*x526))+(((-1.0)*x523))+x527)))))+(((0.5)*(IKabs(((((-1.0)*x525))+x522+x524)))))+(((0.5)*(IKabs(((((-0.116502839325)*x493))+(((-1.0)*x489*x495))+((x494*x495))+(((0.116502839325)*x497))+(((-0.0329050622466731)*sj4))+(((-1.0)*sj4*x490))+x524)))))+(IKabs(((((-1.0)*x488*x492))+(((0.09902741342625)*x507))+(((0.09902741342625)*x506)))))+(((0.5)*(IKabs((((x488*x490))+(((-0.167215115925)*x488*x494))+(((0.0329050622466731)*x488))+(((0.167215115925)*x488*x489))+(((-1.0)*x526))+(((0.116502839325)*cj4*x493))+(((-0.116502839325)*x509)))))))+(((0.5)*(IKabs(((((-1.0)*x525))+(((-1.0)*x524))+x522)))))+(IKabs((((sj4*x492))+(((-0.09902741342625)*x498))+(((-0.09902741342625)*x500)))))+(((0.5)*(IKabs(((((-1.0)*x488*x499))+(((0.1980548268525)*x507))+(((0.1980548268525)*x506))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j2, j1]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x528=((0.049513706713125)*r22);
IkReal x529=((0.0987151867400194)*sj4);
IkReal x530=((0.0329050622466731)*sj4);
IkReal x531=(cj0*rxp1_2);
IkReal x532=((0.5231242125)*sj4);
IkReal x533=(r21*sj0);
IkReal x534=(npz*sj4);
IkReal x535=(pp*sj4);
IkReal x536=(cj0*r20);
IkReal x537=(rxp0_2*sj0);
IkReal x538=((0.349508517975)*x531);
IkReal x539=((0.349508517975)*x537);
IkReal x540=((1.84632075)*x535);
IkReal x541=((0.116502839325)*x531);
IkReal x542=((0.116502839325)*x537);
IkReal x543=((0.61544025)*x535);
IkReal x544=(cj0*npy*sj4);
IkReal x545=(npx*sj0*sj4);
IkReal x546=(cj0*npx*x532);
IkReal x547=(npy*sj0*x532);
IkReal x548=((0.501645347775)*x545);
IkReal x549=((0.501645347775)*x544);
IkReal x550=((0.167215115925)*x545);
IkReal x551=((0.167215115925)*x544);
IkReal x552=(x548+x538);
IkReal x553=(x550+x541);
IkReal x554=((((1.046248425)*x534))+(((-0.09902741342625)*x533))+(((-0.09902741342625)*x536)));
IkReal x555=(x546+x547+x528);
IkReal x556=(x540+x549+x539+x529);
IkReal x557=(x551+x542+x543+x530);
op[0]=((((-1.0)*x557))+x553+x555);
op[1]=x554;
op[2]=((((-1.0)*x556))+x552+x555);
op[3]=((((-0.1980548268525)*x533))+(((-0.1980548268525)*x536))+(((2.09249685)*x534)));
op[4]=((((-1.0)*x555))+(((-1.0)*x556))+x552);
op[5]=x554;
op[6]=((((-1.0)*x557))+(((-1.0)*x555))+x553);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x558=(cj4*sj0);
IkReal x559=(cj4*sj4);
IkReal x560=(cj0*cj4);
IkReal x561=(cj0*npy);
IkReal x562=(npx*sj4);
IkReal x563=((0.049513706713125)*cj4*r22);
IkReal x564=((0.0987151867400194)*x559);
IkReal x565=((0.0329050622466731)*x559);
IkReal x566=((0.116502839325)*rxp0_2*x558);
IkReal x567=((1.84632075)*pp*x559);
IkReal x568=((0.349508517975)*rxp0_2*x558);
IkReal x569=((0.349508517975)*rxp1_2*x560);
IkReal x570=((0.61544025)*pp*x559);
IkReal x571=((0.116502839325)*rxp1_2*x560);
IkReal x572=((0.5231242125)*cj0*npx*x559);
IkReal x573=((0.5231242125)*npy*sj4*x558);
IkReal x574=((0.167215115925)*x559*x561);
IkReal x575=((0.501645347775)*x559*x561);
IkReal x576=((0.501645347775)*x558*x562);
IkReal x577=((0.167215115925)*x558*x562);
IkReal x578=(x576+x569);
IkReal x579=(x577+x571);
IkReal x580=((((0.09902741342625)*r20*x560))+(((-1.046248425)*npz*x559))+(((0.09902741342625)*r21*x558)));
IkReal x581=(x573+x572+x563);
IkReal x582=(x575+x568+x567+x564);
IkReal x583=(x574+x570+x566+x565);
j1evalpoly[0]=(((x580*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x578))+x582+(((-1.0)*x581))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x579))+x583+(((-1.0)*x581))))))+(((htj1*htj1)*(((((-1.0)*x578))+x581+x582))))+(((-1.0)*x579))+x581+x583+((htj1*x580))+(((htj1*htj1*htj1)*(((((0.1980548268525)*r20*x560))+(((0.1980548268525)*r21*x558))+(((-2.09249685)*npz*x559)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x584=((1.08349267049076)*sj1);
IkReal x585=((11.447360491186)*cj1);
if( IKabs(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x585))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-1.0)*cj0*npx*x585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r00*x584))+((r01*sj0*x584))+(((2.54939451880178)*rxp0_0*sj0))+(((-2.54939451880178)*cj0*rxp1_0))+(((1.08349267049076)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x585))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-1.0)*cj0*npx*x585))))+IKsqr((((cj0*r00*x584))+((r01*sj0*x584))+(((2.54939451880178)*rxp0_0*sj0))+(((-2.54939451880178)*cj0*rxp1_0))+(((1.08349267049076)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x585))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-1.0)*cj0*npx*x585))), (((cj0*r00*x584))+((r01*sj0*x584))+(((2.54939451880178)*rxp0_0*sj0))+(((-2.54939451880178)*cj0*rxp1_0))+(((1.08349267049076)*cj1*r02))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x586=IKsin(j3);
IkReal x587=IKcos(j3);
CheckValue<IkReal> x613=IKPowWithIntegerCheck(cj0,-1);
if(!x613.valid){
continue;
}
IkReal x588=x613.value;
IkReal x589=sj0*sj0;
IkReal x590=(r10*sj0);
IkReal x591=(cj0*cj1);
IkReal x592=(r20*sj0);
IkReal x593=((0.85)*cj1);
IkReal x594=((0.13585)*cj0);
IkReal x595=((0.425)*r00);
IkReal x596=((0.425)*sj1);
IkReal x597=(cj0*r11);
IkReal x598=((1.0)*cj0);
IkReal x599=((0.425)*cj1);
IkReal x600=(r21*sj0);
IkReal x601=((0.85)*sj1);
IkReal x602=(r11*sj0);
IkReal x603=((1.0)*pp);
IkReal x604=((0.1154725)*cj1);
IkReal x605=((0.1154725)*sj1);
IkReal x606=((0.1154725)*r00);
IkReal x607=(cj4*x587);
IkReal x608=((0.074252925)*x586);
IkReal x609=((0.39225)*x586);
IkReal x610=(cj0*x601);
IkReal x611=((0.39225)*x587);
IkReal x612=(cj1*x588*x589);
evalcond[0]=(((cj0*sj1*x595))+((rxp0_0*sj0))+(((-1.0)*rxp1_0*x598))+((r01*sj0*x596))+((r02*x599))+(((-1.0)*x611)));
evalcond[1]=((-0.09465)+(((-1.0)*x595*x612))+(((-1.0)*px))+((r02*x596))+x609+(((-1.0)*x591*x595)));
evalcond[2]=(((r22*x599))+(((-1.0)*rxp1_2*x598))+(((0.09465)*sj4))+(((-1.0)*sj4*x609))+((x596*x600))+((rxp0_2*sj0))+((cj0*r20*x596)));
evalcond[3]=(((rxp0_1*sj0))+(((-0.09465)*cj4))+((cj0*r10*x596))+(((-1.0)*rxp1_1*x598))+((x596*x602))+((r12*x599))+((cj4*x609)));
evalcond[4]=((-0.0355486475)+(((0.2717)*npx*sj0))+((npz*x601))+(((-0.2717)*cj0*npy))+(((-1.0)*npy*sj0*x593))+(((-1.0)*x603))+(((-1.0)*x608))+(((-0.85)*npx*x591)));
evalcond[5]=((((-1.0)*r21*x594))+((r22*x596))+(((0.13585)*x592))+(((-1.0)*sj4*x611))+(((-1.0)*x599*x600))+(((-1.0)*pz))+(((0.0267)*cj4))+(((-0.425)*r20*x591)));
evalcond[6]=((((0.0267)*sj4))+(((0.39225)*x607))+(((-1.0)*r11*x594))+(((0.13585)*x590))+(((-0.425)*r10*x591))+(((-1.0)*x599*x602))+(((-1.0)*py))+((r12*x596)));
evalcond[7]=((0.00505431)+(((-1.0)*rxp0_0*x610))+(((0.0534)*px))+(((-0.02094615)*x586))+((x591*x606))+(((-1.0)*rxp2_0*x593))+(((-1.0)*rxp1_0*sj0*x601))+(((-1.0)*r02*x605))+((r00*x588*x589*x604)));
evalcond[8]=((((0.1621697775)*x592))+(((-1.0)*rxp0_2*x610))+(((-1.0)*rxp1_2*sj0*x601))+(((0.0534)*pz))+(((0.1154725)*r20*x591))+((x600*x604))+(((-1.0)*r22*x605))+((pp*x592))+(((0.02094615)*sj4*x587))+(((-0.1621697775)*cj0*r21))+(((-1.0)*cj4*x608))+(((0.162105795)*cj4))+(((-1.0)*rxp2_2*x593))+(((-1.0)*pp*r21*x598)));
evalcond[9]=((((0.1621697775)*x590))+(((0.0534)*py))+(((-1.0)*x597*x603))+(((-1.0)*rxp0_1*x610))+(((-1.0)*sj4*x608))+((pp*x590))+(((0.162105795)*sj4))+(((-0.02094615)*x607))+(((-1.0)*r12*x605))+(((0.1154725)*r10*x591))+(((-1.0)*rxp2_1*x593))+((x602*x604))+(((-1.0)*rxp1_1*sj0*x601))+(((-0.1621697775)*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j3, j2, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x614=IKPowWithIntegerCheck(sj5,-1);
if(!x614.valid){
continue;
}
if( IKabs(((x614.value)*((((r10*sj0))+(((-1.0)*cj0*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r21))+(((-1.0)*r20*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x614.value)*((((r10*sj0))+(((-1.0)*cj0*r11))))))+IKsqr((((cj0*r21))+(((-1.0)*r20*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x614.value)*((((r10*sj0))+(((-1.0)*cj0*r11))))), (((cj0*r21))+(((-1.0)*r20*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x615=IKsin(j4);
IkReal x616=((1.0)*cj0);
evalcond[0]=((((-1.0)*r21*x616))+(IKcos(j4))+((r20*sj0)));
evalcond[1]=(((r00*sj0))+(((-1.0)*r01*x616))+((cj5*x615)));
evalcond[2]=(((r10*sj0))+(((-1.0)*r11*x616))+(((-1.0)*sj5*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x617=(sj4*sj5);
IkReal x618=(cj0*rxp1_2);
IkReal x619=((0.349508517975)*cj5);
IkReal x620=(npx*sj0);
IkReal x621=(cj5*sj4);
IkReal x622=((0.61544025)*pp);
IkReal x623=((0.116502839325)*sj5);
IkReal x624=(rxp0_2*sj0);
IkReal x625=((1.046248425)*npz);
IkReal x626=((0.349508517975)*sj5);
IkReal x627=((0.116502839325)*cj5);
IkReal x628=((2.09249685)*npz);
IkReal x629=((0.049513706713125)*r22);
IkReal x630=((0.09902741342625)*cj5);
IkReal x631=(r21*sj0);
IkReal x632=(cj0*r20);
IkReal x633=((1.84632075)*pp);
IkReal x634=((0.1980548268525)*cj5);
IkReal x635=(sj5*x629);
IkReal x636=((0.0987151867400194)*x617);
IkReal x637=(cj5*x629);
IkReal x638=((0.0987151867400194)*x621);
IkReal x639=(sj5*x632);
IkReal x640=((0.167215115925)*cj0*npy);
IkReal x641=((0.5231242125)*npy*sj0);
IkReal x642=((0.5231242125)*cj0*npx);
IkReal x643=((0.501645347775)*cj0*npy);
IkReal x644=(x624*x626);
IkReal x645=(x617*x633);
IkReal x646=(x618*x626);
IkReal x647=(x619*x624);
IkReal x648=(x621*x633);
IkReal x649=(x618*x619);
IkReal x650=(x617*x642);
IkReal x651=(x617*x641);
IkReal x652=(x617*x643);
IkReal x653=((0.501645347775)*x617*x620);
IkReal x654=(x621*x641);
IkReal x655=(x621*x642);
IkReal x656=(x621*x643);
IkReal x657=((0.501645347775)*x620*x621);
IkReal x658=(x646+x653);
IkReal x659=(x649+x657);
IkReal x660=(x650+x651+x635);
IkReal x661=(x654+x655+x637);
IkReal x662=(x647+x648+x656+x638);
IkReal x663=(x645+x644+x652+x636);
j1eval[0]=((((0.5)*(IKabs(((((-1.0)*x658))+x660+x663)))))+(((0.5)*(IKabs(((((-1.0)*x617*x628))+(((0.1980548268525)*x639))+(((0.1980548268525)*sj5*x631)))))))+(IKabs(((((-1.0)*x621*x625))+((x630*x632))+((x630*x631)))))+(((0.5)*(IKabs((((x617*x622))+((x617*x640))+(((0.0329050622466731)*x617))+(((-1.0)*x660))+(((-0.167215115925)*x617*x620))+(((-1.0)*x618*x623))+((x623*x624)))))))+(IKabs(((((0.09902741342625)*sj5*x631))+(((0.09902741342625)*x639))+(((-1.0)*x617*x625)))))+(((0.5)*(IKabs(((((0.0329050622466731)*x621))+((x621*x640))+(((-0.167215115925)*x620*x621))+(((-1.0)*x661))+((x624*x627))+((x621*x622))+(((-1.0)*x618*x627)))))))+(((0.5)*(IKabs(((((-1.0)*x659))+x661+x662)))))+(((0.5)*(IKabs(((((-1.0)*x659))+(((-1.0)*x661))+x662)))))+(((0.5)*(IKabs(((((-1.0)*x621*x628))+((x632*x634))+((x631*x634)))))))+(((0.5)*(IKabs(((((-1.0)*x658))+(((-1.0)*x660))+x663))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j2, j1]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x664=(sj4*sj5);
IkReal x665=(cj0*npy);
IkReal x666=(npx*sj0);
IkReal x667=((0.1980548268525)*sj5);
IkReal x668=(cj0*r20);
IkReal x669=(r21*sj0);
IkReal x670=((0.349508517975)*sj5);
IkReal x671=(cj0*rxp1_2);
IkReal x672=(rxp0_2*sj0);
IkReal x673=((0.116502839325)*sj5);
IkReal x674=((0.09902741342625)*sj5);
IkReal x675=((0.049513706713125)*r22*sj5);
IkReal x676=((0.0987151867400194)*x664);
IkReal x677=((0.0329050622466731)*x664);
IkReal x678=(x670*x672);
IkReal x679=((1.84632075)*pp*x664);
IkReal x680=(x670*x671);
IkReal x681=((0.61544025)*pp*x664);
IkReal x682=(x672*x673);
IkReal x683=(x671*x673);
IkReal x684=((0.5231242125)*cj0*npx*x664);
IkReal x685=((0.5231242125)*npy*sj0*x664);
IkReal x686=((0.501645347775)*x664*x665);
IkReal x687=((0.501645347775)*x664*x666);
IkReal x688=((0.167215115925)*x664*x665);
IkReal x689=((0.167215115925)*x664*x666);
IkReal x690=(x680+x687);
IkReal x691=(x689+x683);
IkReal x692=((((-1.046248425)*npz*x664))+((x669*x674))+((x668*x674)));
IkReal x693=(x675+x685+x684);
IkReal x694=(x678+x679+x676+x686);
IkReal x695=(x677+x688+x682+x681);
op[0]=(x695+(((-1.0)*x691))+(((-1.0)*x693)));
op[1]=x692;
op[2]=(x694+(((-1.0)*x690))+(((-1.0)*x693)));
op[3]=(((x667*x668))+((x667*x669))+(((-2.09249685)*npz*x664)));
op[4]=(x694+x693+(((-1.0)*x690)));
op[5]=x692;
op[6]=(x695+x693+(((-1.0)*x691)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x696=(cj5*sj4);
IkReal x697=((0.116502839325)*cj5);
IkReal x698=(cj0*rxp1_2);
IkReal x699=(rxp0_2*sj0);
IkReal x700=((0.349508517975)*cj5);
IkReal x701=((0.09902741342625)*cj5);
IkReal x702=(r21*sj0);
IkReal x703=(cj0*r20);
IkReal x704=((0.1980548268525)*cj5);
IkReal x705=(npx*sj0);
IkReal x706=(cj0*npy);
IkReal x707=((0.049513706713125)*cj5*r22);
IkReal x708=((0.0987151867400194)*x696);
IkReal x709=((0.0329050622466731)*x696);
IkReal x710=((0.61544025)*pp*x696);
IkReal x711=(x697*x699);
IkReal x712=(x699*x700);
IkReal x713=((1.84632075)*pp*x696);
IkReal x714=(x698*x700);
IkReal x715=(x697*x698);
IkReal x716=((0.5231242125)*npy*sj0*x696);
IkReal x717=((0.5231242125)*cj0*npx*x696);
IkReal x718=((0.501645347775)*x696*x706);
IkReal x719=((0.501645347775)*x696*x705);
IkReal x720=((0.167215115925)*x696*x706);
IkReal x721=((0.167215115925)*x696*x705);
IkReal x722=(x719+x714);
IkReal x723=(x715+x721);
IkReal x724=(((x701*x703))+((x701*x702))+(((-1.046248425)*npz*x696)));
IkReal x725=(x717+x716+x707);
IkReal x726=(x711+x710+x709+x720);
IkReal x727=(x718+x713+x712+x708);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x725))+(((-1.0)*x723))+x726))))+(((htj1*htj1)*(((((-1.0)*x722))+x725+x727))))+((x724*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x725))+(((-1.0)*x722))+x727))))+(((-1.0)*x723))+(((htj1*htj1*htj1)*((((x702*x704))+((x703*x704))+(((-2.09249685)*npz*x696))))))+x725+x726+((htj1*x724)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3eval[3];
IkReal x728=((1700.0)*sj1);
IkReal x729=(cj0*r20);
IkReal x730=((1700.0)*cj1);
IkReal x731=(r21*sj0);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((x728*x729))+((x728*x731))+(((-4000.0)*cj0*rxp1_2))+(((378.6)*sj4))+(((4000.0)*rxp0_2*sj0))+((r22*x730)))))+(IKabs(((((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((-1.0)*x730*x731))+(((106.8)*cj4))+((r22*x728))+(((543.4)*r20*sj0))+(((-1.0)*x729*x730))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj4;
j3eval[1]=sj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x732=(cj0*r00);
IkReal x733=(r01*sj0);
IkReal x734=(r11*sj0);
IkReal x735=(cj0*sj5);
IkReal x736=((1.08349267049076)*sj1);
IkReal x737=((2.54939451880178)*rxp1_1);
IkReal x738=((2.54939451880178)*rxp0_1*sj0);
IkReal x739=(cj5*x736);
IkReal x740=((2.54939451880178)*cj0*rxp1_0);
IkReal x741=((2.54939451880178)*rxp0_0*sj0);
IkReal x742=((1.08349267049076)*cj1*cj5);
IkReal x743=((1.08349267049076)*cj1*sj5);
if( IKabs(((0.241300191204589)+(((-1.0)*x732*x739))+((sj5*x734*x736))+(((-1.0)*x735*x737))+(((-1.0)*cj5*x741))+(((-1.0)*x733*x739))+((r10*x735*x736))+((sj5*x738))+(((-1.0)*r02*x742))+((r12*x743))+((cj5*x740)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x741))+(((-1.0)*r12*x742))+(((-1.0)*cj0*r10*x739))+(((-1.0)*x734*x739))+(((-1.0)*sj5*x732*x736))+(((-1.0)*sj5*x733*x736))+(((2.54939451880178)*rxp1_0*x735))+(((-1.0)*r02*x743))+(((-1.0)*cj5*x738))+((cj0*cj5*x737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.241300191204589)+(((-1.0)*x732*x739))+((sj5*x734*x736))+(((-1.0)*x735*x737))+(((-1.0)*cj5*x741))+(((-1.0)*x733*x739))+((r10*x735*x736))+((sj5*x738))+(((-1.0)*r02*x742))+((r12*x743))+((cj5*x740))))+IKsqr(((((-1.0)*sj5*x741))+(((-1.0)*r12*x742))+(((-1.0)*cj0*r10*x739))+(((-1.0)*x734*x739))+(((-1.0)*sj5*x732*x736))+(((-1.0)*sj5*x733*x736))+(((2.54939451880178)*rxp1_0*x735))+(((-1.0)*r02*x743))+(((-1.0)*cj5*x738))+((cj0*cj5*x737))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.241300191204589)+(((-1.0)*x732*x739))+((sj5*x734*x736))+(((-1.0)*x735*x737))+(((-1.0)*cj5*x741))+(((-1.0)*x733*x739))+((r10*x735*x736))+((sj5*x738))+(((-1.0)*r02*x742))+((r12*x743))+((cj5*x740))), ((((-1.0)*sj5*x741))+(((-1.0)*r12*x742))+(((-1.0)*cj0*r10*x739))+(((-1.0)*x734*x739))+(((-1.0)*sj5*x732*x736))+(((-1.0)*sj5*x733*x736))+(((2.54939451880178)*rxp1_0*x735))+(((-1.0)*r02*x743))+(((-1.0)*cj5*x738))+((cj0*cj5*x737))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x744=IKsin(j3);
IkReal x745=IKcos(j3);
IkReal x746=((0.09465)*sj5);
IkReal x747=((0.09465)*cj5);
IkReal x748=((0.02094615)*cj5);
IkReal x749=(cj1*sj0);
IkReal x750=((0.85)*cj0);
IkReal x751=(cj0*r01);
IkReal x752=((1.0)*pp);
IkReal x753=((0.425)*cj1);
IkReal x754=(r00*sj0);
IkReal x755=((0.02094615)*sj5);
IkReal x756=((0.425)*r01);
IkReal x757=(cj0*r00);
IkReal x758=(r12*sj1);
IkReal x759=(r10*sj0);
IkReal x760=(sj0*sj1);
IkReal x761=((0.425)*r11);
IkReal x762=((0.1621697775)*cj0);
IkReal x763=((1.0)*cj0);
IkReal x764=(cj0*r11);
IkReal x765=((0.85)*cj1);
IkReal x766=(cj0*r10);
IkReal x767=((0.425)*sj1);
IkReal x768=((0.1154725)*cj1);
IkReal x769=(cj0*npy);
IkReal x770=(r20*sj0);
IkReal x771=((0.1154725)*sj1);
IkReal x772=((0.074252925)*x744);
IkReal x773=((0.39225)*x744);
IkReal x774=((2.0)*npx*sj0);
IkReal x775=((0.39225)*x745);
IkReal x776=(cj5*x775);
IkReal x777=(sj5*x773);
IkReal x778=(cj5*x773);
IkReal x779=(sj5*x775);
IkReal x780=(x746+x776);
IkReal x781=(x779+x778);
evalcond[0]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.85)*npy*x749))+(((-1.0)*cj1*npx*x750))+(((0.85)*npz*sj1))+(((-1.0)*x772))+(((-0.2717)*x769))+(((-1.0)*x752)));
evalcond[1]=(((x757*x767))+((r02*x753))+((rxp0_0*sj0))+(((-1.0)*rxp1_0*x763))+((x756*x760))+x781+(((-1.0)*x747)));
evalcond[2]=(((rxp0_1*sj0))+(((-1.0)*rxp1_1*x763))+((x760*x761))+((r12*x753))+((x766*x767))+x780+(((-1.0)*x777)));
evalcond[3]=((((-1.0)*x753*x757))+(((-1.0)*px))+((r02*x767))+x780+(((-1.0)*x777))+(((-1.0)*x749*x756))+(((0.13585)*x754))+(((-0.13585)*x751)));
evalcond[4]=((((-1.0)*x781))+(((-0.13585)*x764))+(((-1.0)*x753*x766))+(((-1.0)*py))+x747+(((0.13585)*x759))+(((0.425)*x758))+(((-1.0)*x749*x761)));
evalcond[5]=((0.162105795)+(((-1.0)*rxp2_2*x765))+(((-1.0)*r21*x762))+((pp*x770))+(((-1.0)*r22*x771))+(((-1.0)*pz*x774))+(((0.1621697775)*x770))+((cj0*r20*x768))+(((-0.85)*rxp1_2*x760))+(((-1.0)*x772))+(((2.0)*pz*x769))+(((-1.0)*rxp0_2*sj1*x750))+(((0.2717)*pz))+(((0.1154725)*r21*x749))+(((-1.0)*cj0*r21*x752)));
evalcond[6]=(((x757*x768))+(((-1.0)*px*x774))+(((2.0)*px*x769))+(((-1.0)*x745*x748))+(((0.1154725)*r01*x749))+((pp*x754))+((x744*x755))+(((-1.0)*rxp0_0*sj1*x750))+(((-0.1621697775)*x751))+(((-1.0)*r02*x771))+(((-1.0)*rxp2_0*x765))+(((-1.0)*x751*x752))+(((-0.00505431)*sj5))+(((0.2717)*px))+(((0.1621697775)*x754))+(((-0.85)*rxp1_0*x760)));
evalcond[7]=(((x745*x755))+(((-1.0)*x752*x764))+((x744*x748))+((pp*x759))+(((-1.0)*rxp0_1*sj1*x750))+(((-1.0)*py*x774))+(((-0.1154725)*x758))+(((-1.0)*rxp2_1*x765))+(((0.1154725)*r11*x749))+((x766*x768))+(((-1.0)*r11*x762))+(((2.0)*py*x769))+(((0.2717)*py))+(((0.1621697775)*x759))+(((-0.00505431)*cj5))+(((-0.85)*rxp1_1*x760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x782=(cj0*r00);
IkReal x783=(r01*sj0);
IkReal x784=(r11*sj0);
IkReal x785=(cj0*sj5);
IkReal x786=((1.08349267049076)*sj1);
IkReal x787=((2.54939451880178)*rxp1_1);
IkReal x788=((2.54939451880178)*rxp0_1*sj0);
IkReal x789=(cj5*x786);
IkReal x790=((2.54939451880178)*cj0*rxp1_0);
IkReal x791=((2.54939451880178)*rxp0_0*sj0);
IkReal x792=((1.08349267049076)*cj1*cj5);
IkReal x793=((1.08349267049076)*cj1*sj5);
if( IKabs(((0.241300191204589)+(((-1.0)*r10*x785*x786))+(((-1.0)*sj5*x788))+((x785*x787))+((x782*x789))+(((-1.0)*sj5*x784*x786))+((x783*x789))+((cj5*x791))+(((-1.0)*r12*x793))+((r02*x792))+(((-1.0)*cj5*x790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x791))+((cj0*cj5*x787))+(((2.54939451880178)*rxp1_0*x785))+(((-1.0)*sj5*x783*x786))+(((-1.0)*cj0*r10*x789))+(((-1.0)*sj5*x782*x786))+(((-1.0)*r12*x792))+(((-1.0)*x784*x789))+(((-1.0)*cj5*x788))+(((-1.0)*r02*x793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.241300191204589)+(((-1.0)*r10*x785*x786))+(((-1.0)*sj5*x788))+((x785*x787))+((x782*x789))+(((-1.0)*sj5*x784*x786))+((x783*x789))+((cj5*x791))+(((-1.0)*r12*x793))+((r02*x792))+(((-1.0)*cj5*x790))))+IKsqr(((((-1.0)*sj5*x791))+((cj0*cj5*x787))+(((2.54939451880178)*rxp1_0*x785))+(((-1.0)*sj5*x783*x786))+(((-1.0)*cj0*r10*x789))+(((-1.0)*sj5*x782*x786))+(((-1.0)*r12*x792))+(((-1.0)*x784*x789))+(((-1.0)*cj5*x788))+(((-1.0)*r02*x793))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.241300191204589)+(((-1.0)*r10*x785*x786))+(((-1.0)*sj5*x788))+((x785*x787))+((x782*x789))+(((-1.0)*sj5*x784*x786))+((x783*x789))+((cj5*x791))+(((-1.0)*r12*x793))+((r02*x792))+(((-1.0)*cj5*x790))), ((((-1.0)*sj5*x791))+((cj0*cj5*x787))+(((2.54939451880178)*rxp1_0*x785))+(((-1.0)*sj5*x783*x786))+(((-1.0)*cj0*r10*x789))+(((-1.0)*sj5*x782*x786))+(((-1.0)*r12*x792))+(((-1.0)*x784*x789))+(((-1.0)*cj5*x788))+(((-1.0)*r02*x793))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x794=IKsin(j3);
IkReal x795=IKcos(j3);
IkReal x796=((0.09465)*sj5);
IkReal x797=((0.09465)*cj5);
IkReal x798=((0.02094615)*cj5);
IkReal x799=(cj1*sj0);
IkReal x800=((0.85)*cj0);
IkReal x801=(cj0*r01);
IkReal x802=((1.0)*pp);
IkReal x803=((0.425)*cj1);
IkReal x804=(r00*sj0);
IkReal x805=((0.02094615)*sj5);
IkReal x806=((0.425)*r01);
IkReal x807=(cj0*r00);
IkReal x808=(r12*sj1);
IkReal x809=(r10*sj0);
IkReal x810=(sj0*sj1);
IkReal x811=((0.425)*r11);
IkReal x812=((0.1621697775)*cj0);
IkReal x813=((1.0)*cj0);
IkReal x814=(cj0*r11);
IkReal x815=((0.85)*cj1);
IkReal x816=(cj0*r10);
IkReal x817=((0.425)*sj1);
IkReal x818=((0.1154725)*cj1);
IkReal x819=(cj0*npy);
IkReal x820=(r20*sj0);
IkReal x821=((0.1154725)*sj1);
IkReal x822=((0.074252925)*x794);
IkReal x823=((0.39225)*x794);
IkReal x824=((2.0)*npx*sj0);
IkReal x825=((0.39225)*x795);
IkReal x826=(cj5*x825);
IkReal x827=(sj5*x823);
IkReal x828=(sj5*x825);
IkReal x829=(cj5*x823);
IkReal x830=(x797+x828);
IkReal x831=(x827+x826);
evalcond[0]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.2717)*x819))+(((-1.0)*x822))+(((-0.85)*npy*x799))+(((0.85)*npz*sj1))+(((-1.0)*x802))+(((-1.0)*cj1*npx*x800)));
evalcond[1]=(((rxp0_0*sj0))+(((-1.0)*x829))+((r02*x803))+((x807*x817))+(((-1.0)*rxp1_0*x813))+((x806*x810))+x830);
evalcond[2]=((((-1.0)*rxp1_1*x813))+(((-1.0)*x796))+((rxp0_1*sj0))+((x816*x817))+((x810*x811))+((r12*x803))+x831);
evalcond[3]=((((-0.13585)*x801))+(((0.13585)*x804))+(((-1.0)*x799*x806))+(((-1.0)*px))+(((-1.0)*x831))+(((-1.0)*x803*x807))+x796+((r02*x817)));
evalcond[4]=((((-1.0)*x803*x816))+(((0.13585)*x809))+(((-1.0)*x829))+(((-0.13585)*x814))+(((-1.0)*py))+(((0.425)*x808))+(((-1.0)*x799*x811))+x830);
evalcond[5]=((-0.162105795)+(((-1.0)*cj0*r21*x802))+(((0.1154725)*r21*x799))+(((-1.0)*pz*x824))+(((-0.85)*rxp1_2*x810))+(((-1.0)*rxp0_2*sj1*x800))+(((0.1621697775)*x820))+((cj0*r20*x818))+(((-1.0)*r22*x821))+(((-1.0)*rxp2_2*x815))+(((2.0)*pz*x819))+((pp*x820))+x822+(((0.2717)*pz))+(((-1.0)*r21*x812)));
evalcond[6]=((((-1.0)*r02*x821))+(((0.1621697775)*x804))+(((-0.1621697775)*x801))+((pp*x804))+(((0.1154725)*r01*x799))+(((2.0)*px*x819))+((x794*x805))+((x807*x818))+(((-1.0)*px*x824))+(((-1.0)*rxp0_0*sj1*x800))+(((-0.00505431)*sj5))+(((-1.0)*rxp2_0*x815))+(((0.2717)*px))+(((-1.0)*x801*x802))+(((-0.85)*rxp1_0*x810))+((x795*x798)));
evalcond[7]=((((0.1621697775)*x809))+(((-1.0)*py*x824))+((pp*x809))+((x816*x818))+(((-1.0)*x802*x814))+(((-1.0)*r11*x812))+(((-1.0)*rxp0_1*sj1*x800))+(((0.1154725)*r11*x799))+(((-1.0)*rxp2_1*x815))+(((-1.0)*x795*x805))+(((2.0)*py*x819))+((x794*x798))+(((-0.1154725)*x808))+(((0.2717)*py))+(((-0.85)*rxp1_1*x810))+(((-0.00505431)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x832=((11.447360491186)*cj1);
IkReal x833=((1.08349267049076)*sj1);
if( IKabs(((-0.478750803419529)+(((-1.0)*npy*sj0*x832))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x832))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*cj0*r10*x833))+(((-1.0)*r11*sj0*x833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-1.0)*npy*sj0*x832))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x832))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))))+IKsqr(((((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*cj0*r10*x833))+(((-1.0)*r11*sj0*x833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-1.0)*npy*sj0*x832))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x832))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))), ((((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*cj0*r10*x833))+(((-1.0)*r11*sj0*x833))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x834=IKsin(j3);
IkReal x835=IKcos(j3);
CheckValue<IkReal> x859=IKPowWithIntegerCheck(cj0,-1);
if(!x859.valid){
continue;
}
IkReal x836=x859.value;
IkReal x837=sj0*sj0;
IkReal x838=((0.13585)*sj0);
IkReal x839=(cj0*cj1);
IkReal x840=((0.425)*cj1);
IkReal x841=((0.1154725)*r10);
IkReal x842=((0.13585)*cj0);
IkReal x843=(r01*sj0);
IkReal x844=((0.425)*sj1);
IkReal x845=((1.0)*cj0);
IkReal x846=(r21*sj0);
IkReal x847=((0.85)*sj1);
IkReal x848=((1.0)*pp);
IkReal x849=((0.1154725)*r20);
IkReal x850=((0.1154725)*cj1);
IkReal x851=(sj0*x836);
IkReal x852=((0.1154725)*sj1);
IkReal x853=((0.85)*cj1);
IkReal x854=(cj4*x835);
IkReal x855=((0.074252925)*x834);
IkReal x856=((0.39225)*x834);
IkReal x857=((0.39225)*x835);
IkReal x858=(x836*x837);
evalcond[0]=((((-1.0)*rxp1_1*x845))+((rxp0_1*sj0))+((cj0*r10*x844))+((r12*x840))+x857+((r11*sj0*x844)));
evalcond[1]=((0.09465)+(((-1.0)*r10*x840*x858))+(((-1.0)*x856))+(((-0.425)*r10*x839))+(((-1.0)*py))+((r12*x844)));
evalcond[2]=(((r22*x840))+(((-1.0)*sj4*x856))+(((0.09465)*sj4))+((cj0*r20*x844))+(((-1.0)*rxp1_2*x845))+((rxp0_2*sj0))+((x844*x846)));
evalcond[3]=(((rxp0_0*sj0))+((r02*x840))+(((-1.0)*rxp1_0*x845))+((cj0*r00*x844))+((x843*x844))+(((-0.09465)*cj4))+((cj4*x856)));
evalcond[4]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.2717)*cj0*npy))+(((-1.0)*x855))+((npz*x847))+(((-1.0)*x848))+(((-1.0)*npy*sj0*x853))+(((-0.85)*npx*x839)));
evalcond[5]=(((r22*x844))+(((-1.0)*sj4*x857))+(((-1.0)*r21*x842))+(((-0.425)*r20*x839))+(((-1.0)*x840*x846))+((r20*x838))+(((-1.0)*pz))+(((0.0267)*cj4)));
evalcond[6]=((((0.0267)*sj4))+((r02*x844))+(((-1.0)*x840*x843))+((r00*x838))+(((-0.425)*r00*x839))+(((-1.0)*px))+(((0.39225)*x854))+(((-1.0)*r01*x842)));
evalcond[7]=((-0.00505431)+(((0.02094615)*x834))+(((-1.0)*r12*x852))+(((0.0534)*py))+(((-1.0)*rxp2_1*x853))+((x839*x841))+((cj1*x841*x858))+(((-1.0)*cj0*rxp0_1*x847))+(((-1.0)*rxp1_1*sj0*x847)));
evalcond[8]=((((-1.0)*r22*x852))+(((0.0534)*pz))+((x839*x849))+(((-1.0)*cj4*x848))+(((-6.39825e-5)*cj4))+(((0.02094615)*sj4*x835))+(((-1.0)*cj0*rxp0_2*x847))+((cj4*x850*x851))+(((-1.0)*rxp1_2*sj0*x847))+((cj1*x849*x858))+(((-1.0)*cj4*x855))+(((-1.0)*rxp2_2*x853)));
evalcond[9]=((((-1.0)*rxp2_0*x853))+(((-1.0)*rxp1_0*sj0*x847))+(((-1.0)*sj4*x855))+(((0.0534)*px))+(((-1.0)*r02*x852))+(((-0.02094615)*x854))+((sj4*x850*x851))+(((-1.0)*sj4*x848))+(((-6.39825e-5)*sj4))+((r00*x850*x858))+(((0.1154725)*r00*x839))+(((-1.0)*cj0*rxp0_0*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x860=((11.447360491186)*cj1);
IkReal x861=((1.08349267049076)*sj1);
if( IKabs(((-0.478750803419529)+(((-1.0)*cj0*npx*x860))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*npy*sj0*x860))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r10*x861))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+((r11*sj0*x861))+(((1.08349267049076)*cj1*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-1.0)*cj0*npx*x860))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*npy*sj0*x860))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))))+IKsqr((((cj0*r10*x861))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+((r11*sj0*x861))+(((1.08349267049076)*cj1*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-1.0)*cj0*npx*x860))+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*npy*sj0*x860))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))), (((cj0*r10*x861))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+((r11*sj0*x861))+(((1.08349267049076)*cj1*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x862=IKsin(j3);
IkReal x863=IKcos(j3);
CheckValue<IkReal> x887=IKPowWithIntegerCheck(cj0,-1);
if(!x887.valid){
continue;
}
IkReal x864=x887.value;
IkReal x865=sj0*sj0;
IkReal x866=((0.13585)*sj0);
IkReal x867=(cj0*cj1);
IkReal x868=((0.425)*cj1);
IkReal x869=((0.1154725)*r10);
IkReal x870=((0.13585)*cj0);
IkReal x871=(r01*sj0);
IkReal x872=((0.425)*sj1);
IkReal x873=((1.0)*cj0);
IkReal x874=(r21*sj0);
IkReal x875=((0.85)*sj1);
IkReal x876=((1.0)*pp);
IkReal x877=((0.1154725)*r20);
IkReal x878=((0.85)*cj1);
IkReal x879=((0.1154725)*sj1);
IkReal x880=((0.1154725)*r00);
IkReal x881=(cj4*x863);
IkReal x882=((0.074252925)*x862);
IkReal x883=((0.39225)*x862);
IkReal x884=((0.39225)*x863);
IkReal x885=(x864*x865);
IkReal x886=((0.1154725)*cj1*sj0*x864);
evalcond[0]=(((cj0*r10*x872))+((rxp0_1*sj0))+((r12*x868))+(((-1.0)*x884))+((r11*sj0*x872))+(((-1.0)*rxp1_1*x873)));
evalcond[1]=((-0.09465)+((r12*x872))+(((-1.0)*py))+(((-1.0)*r10*x868*x885))+x883+(((-0.425)*r10*x867)));
evalcond[2]=(((x872*x874))+(((0.09465)*sj4))+((r22*x868))+(((-1.0)*sj4*x883))+((rxp0_2*sj0))+((cj0*r20*x872))+(((-1.0)*rxp1_2*x873)));
evalcond[3]=((((-1.0)*rxp1_0*x873))+((x871*x872))+((rxp0_0*sj0))+(((0.09465)*cj4))+((cj0*r00*x872))+((r02*x868))+(((-1.0)*cj4*x883)));
evalcond[4]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.2717)*cj0*npy))+(((-1.0)*x882))+(((-0.85)*npx*x867))+(((-1.0)*npy*sj0*x878))+((npz*x875))+(((-1.0)*x876)));
evalcond[5]=((((-1.0)*x868*x874))+((r22*x872))+(((-1.0)*sj4*x884))+(((-1.0)*pz))+(((0.0267)*cj4))+(((-0.425)*r20*x867))+(((-1.0)*r21*x870))+((r20*x866)));
evalcond[6]=((((-0.425)*r00*x867))+((r00*x866))+(((-1.0)*r01*x870))+(((-0.39225)*x881))+(((-1.0)*x868*x871))+(((-0.0267)*sj4))+(((-1.0)*px))+((r02*x872)));
evalcond[7]=((0.00505431)+(((-1.0)*r12*x879))+((cj1*x869*x885))+((x867*x869))+(((0.0534)*py))+(((-1.0)*rxp2_1*x878))+(((-1.0)*rxp1_1*sj0*x875))+(((-1.0)*cj0*rxp0_1*x875))+(((-0.02094615)*x862)));
evalcond[8]=(((sj4*x882))+(((0.0534)*px))+((x867*x880))+(((-1.0)*cj0*rxp0_0*x875))+((pp*sj4))+(((-1.0)*sj4*x886))+((cj1*x880*x885))+(((6.39825e-5)*sj4))+(((-1.0)*rxp1_0*sj0*x875))+(((-1.0)*r02*x879))+(((0.02094615)*x881))+(((-1.0)*rxp2_0*x878)));
evalcond[9]=((((0.02094615)*sj4*x863))+((x867*x877))+(((-1.0)*rxp2_2*x878))+(((-1.0)*cj0*rxp0_2*x875))+(((0.0534)*pz))+(((-1.0)*rxp1_2*sj0*x875))+(((-6.39825e-5)*cj4))+((cj1*x877*x885))+((cj4*x886))+(((-1.0)*cj4*x882))+(((-1.0)*cj4*x876))+(((-1.0)*r22*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x897=IKPowWithIntegerCheck(sj4,-1);
if(!x897.valid){
continue;
}
IkReal x888=x897.value;
IkReal x889=((4000.0)*sj4);
IkReal x890=((1700.0)*cj1);
IkReal x891=(cj4*cj5);
IkReal x892=((0.000637348629700446)*x888);
IkReal x893=((1700.0)*cj0*sj1);
IkReal x894=((4000.0)*cj0*rxp1_2);
IkReal x895=((4000.0)*rxp0_2*sj0);
IkReal x896=((1700.0)*r21*sj0*sj1);
CheckValue<IkReal> x898=IKPowWithIntegerCheck(sj5,-1);
if(!x898.valid){
continue;
}
if( IKabs((x892*((((r20*x893))+(((378.6)*sj4))+(((-1.0)*x894))+x896+x895+((r22*x890)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x892*(x898.value)*(((((-1.0)*r00*sj4*x893))+(((-1.0)*r02*sj4*x890))+(((-1.0)*rxp0_0*sj0*x889))+(((-1.0)*r22*x890*x891))+((x891*x894))+(((-1700.0)*r01*sj0*sj1*sj4))+((cj0*rxp1_0*x889))+(((-1.0)*x891*x895))+(((-1.0)*x891*x896))+(((-1.0)*r20*x891*x893)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x892*((((r20*x893))+(((378.6)*sj4))+(((-1.0)*x894))+x896+x895+((r22*x890))))))+IKsqr((x892*(x898.value)*(((((-1.0)*r00*sj4*x893))+(((-1.0)*r02*sj4*x890))+(((-1.0)*rxp0_0*sj0*x889))+(((-1.0)*r22*x890*x891))+((x891*x894))+(((-1700.0)*r01*sj0*sj1*sj4))+((cj0*rxp1_0*x889))+(((-1.0)*x891*x895))+(((-1.0)*x891*x896))+(((-1.0)*r20*x891*x893))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x892*((((r20*x893))+(((378.6)*sj4))+(((-1.0)*x894))+x896+x895+((r22*x890))))), (x892*(x898.value)*(((((-1.0)*r00*sj4*x893))+(((-1.0)*r02*sj4*x890))+(((-1.0)*rxp0_0*sj0*x889))+(((-1.0)*r22*x890*x891))+((x891*x894))+(((-1700.0)*r01*sj0*sj1*sj4))+((cj0*rxp1_0*x889))+(((-1.0)*x891*x895))+(((-1.0)*x891*x896))+(((-1.0)*r20*x891*x893))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x899=IKsin(j3);
IkReal x900=IKcos(j3);
IkReal x901=((0.09465)*sj5);
IkReal x902=(cj0*cj1);
IkReal x903=((0.39225)*sj5);
IkReal x904=((0.02094615)*cj5);
IkReal x905=((0.85)*cj1);
IkReal x906=((0.425)*sj1);
IkReal x907=(cj0*npy);
IkReal x908=((0.1621697775)*sj0);
IkReal x909=((0.1154725)*sj1);
IkReal x910=(r21*sj0);
IkReal x911=((0.39225)*sj4);
IkReal x912=((0.39225)*cj5);
IkReal x913=(r01*sj0);
IkReal x914=((0.425)*cj1);
IkReal x915=(r11*sj0);
IkReal x916=((0.1621697775)*cj0);
IkReal x917=((1.0)*cj0);
IkReal x918=((0.1154725)*cj1);
IkReal x919=(sj4*sj5);
IkReal x920=((0.13585)*sj0);
IkReal x921=((0.02094615)*sj5);
IkReal x922=((0.13585)*cj0);
IkReal x923=(pp*sj0);
IkReal x924=(cj5*sj4);
IkReal x925=((0.09465)*cj5);
IkReal x926=((2.0)*npx*sj0);
IkReal x927=((0.85)*cj0*sj1);
IkReal x928=(cj4*x899);
IkReal x929=(cj4*x900);
IkReal x930=((0.85)*sj0*sj1);
IkReal x931=((0.074252925)*x899);
evalcond[0]=(((cj0*r20*x906))+(((0.09465)*sj4))+(((-1.0)*rxp1_2*x917))+((x906*x910))+((r22*x914))+((rxp0_2*sj0))+(((-1.0)*x899*x911)));
evalcond[1]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-1.0)*npy*sj0*x905))+(((-1.0)*pp))+(((0.85)*npz*sj1))+(((-0.2717)*x907))+(((-0.85)*npx*x902))+(((-1.0)*x931)));
evalcond[2]=((((-1.0)*r21*x922))+((r22*x906))+(((-1.0)*pz))+(((-1.0)*x910*x914))+(((-0.425)*r20*x902))+(((0.0267)*cj4))+(((-1.0)*x900*x911))+((r20*x920)));
evalcond[3]=(((rxp0_0*sj0))+(((-1.0)*rxp1_0*x917))+((r02*x914))+((x900*x903))+((x906*x913))+(((-1.0)*cj4*x925))+((x912*x928))+((cj0*r00*x906)));
evalcond[4]=(((rxp0_1*sj0))+((r12*x914))+(((-1.0)*x903*x928))+((x900*x912))+((x906*x915))+((cj4*x901))+(((-1.0)*rxp1_1*x917))+((cj0*r10*x906)));
evalcond[5]=((((-1.0)*x913*x914))+(((-0.425)*r00*x902))+((r02*x906))+(((0.0267)*x924))+(((-1.0)*px))+(((-1.0)*r01*x922))+((r00*x920))+x901+(((-1.0)*x899*x903))+((x912*x929)));
evalcond[6]=((((-0.425)*r10*x902))+(((-1.0)*r11*x922))+((r10*x920))+(((-1.0)*x903*x929))+((r12*x906))+(((-1.0)*py))+(((-1.0)*x914*x915))+(((-0.0267)*x919))+(((-1.0)*x899*x912))+x925);
evalcond[7]=((((-1.0)*r22*x909))+((x910*x918))+(((2.0)*pz*x907))+((r20*x908))+(((0.02094615)*sj4*x900))+(((-1.0)*r21*x916))+(((-1.0)*pp*r21*x917))+(((0.1154725)*r20*x902))+(((-1.0)*rxp2_2*x905))+(((-1.0)*rxp1_2*x930))+(((-0.074252925)*x928))+(((-1.0)*rxp0_2*x927))+(((0.162105795)*cj4))+(((-1.0)*pz*x926))+((r20*x923))+(((0.2717)*pz)));
evalcond[8]=(((r00*x908))+(((0.1154725)*r00*x902))+(((-1.0)*x904*x929))+((x899*x921))+(((-1.0)*rxp2_0*x905))+(((-1.0)*x924*x931))+(((-1.0)*px*x926))+(((-1.0)*r01*x916))+(((-1.0)*pp*r01*x917))+(((-1.0)*r02*x909))+(((-1.0)*rxp1_0*x930))+(((-0.00505431)*sj5))+(((-1.0)*rxp0_0*x927))+(((0.162105795)*x924))+(((2.0)*px*x907))+((x913*x918))+((r00*x923))+(((0.2717)*px)));
evalcond[9]=((((2.0)*py*x907))+((x919*x931))+(((-1.0)*rxp1_1*x930))+(((-1.0)*rxp2_1*x905))+(((-1.0)*rxp0_1*x927))+(((0.1154725)*r10*x902))+(((-1.0)*r12*x909))+((r10*x923))+(((-1.0)*pp*r11*x917))+((x921*x929))+((x899*x904))+((r10*x908))+(((-1.0)*r11*x916))+(((-1.0)*py*x926))+((x915*x918))+(((0.2717)*py))+(((-0.00505431)*cj5))+(((-0.162105795)*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x932=(cj1*sj0);
IkReal x933=(cj0*cj1);
CheckValue<IkReal> x934=IKPowWithIntegerCheck(sj4,-1);
if(!x934.valid){
continue;
}
if( IKabs(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-11.447360491186)*npx*x933))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-11.447360491186)*npy*x932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000637348629700446)*(x934.value)*(((((-1700.0)*r20*x933))+(((-1700.0)*r21*x932))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((1700.0)*r22*sj1))+(((543.4)*r20*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-11.447360491186)*npx*x933))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-11.447360491186)*npy*x932))))+IKsqr(((0.000637348629700446)*(x934.value)*(((((-1700.0)*r20*x933))+(((-1700.0)*r21*x932))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((1700.0)*r22*sj1))+(((543.4)*r20*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-11.447360491186)*npx*x933))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-11.447360491186)*npy*x932))), ((0.000637348629700446)*(x934.value)*(((((-1700.0)*r20*x933))+(((-1700.0)*r21*x932))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((1700.0)*r22*sj1))+(((543.4)*r20*sj0))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x935=IKsin(j3);
IkReal x936=IKcos(j3);
IkReal x937=((0.09465)*sj5);
IkReal x938=(cj0*cj1);
IkReal x939=((0.39225)*sj5);
IkReal x940=((0.02094615)*cj5);
IkReal x941=((0.85)*cj1);
IkReal x942=((0.425)*sj1);
IkReal x943=(cj0*npy);
IkReal x944=((0.1621697775)*sj0);
IkReal x945=((0.1154725)*sj1);
IkReal x946=(r21*sj0);
IkReal x947=((0.39225)*sj4);
IkReal x948=((0.39225)*cj5);
IkReal x949=(r01*sj0);
IkReal x950=((0.425)*cj1);
IkReal x951=(r11*sj0);
IkReal x952=((0.1621697775)*cj0);
IkReal x953=((1.0)*cj0);
IkReal x954=((0.1154725)*cj1);
IkReal x955=(sj4*sj5);
IkReal x956=((0.13585)*sj0);
IkReal x957=((0.02094615)*sj5);
IkReal x958=((0.13585)*cj0);
IkReal x959=(pp*sj0);
IkReal x960=(cj5*sj4);
IkReal x961=((0.09465)*cj5);
IkReal x962=((2.0)*npx*sj0);
IkReal x963=((0.85)*cj0*sj1);
IkReal x964=(cj4*x935);
IkReal x965=(cj4*x936);
IkReal x966=((0.85)*sj0*sj1);
IkReal x967=((0.074252925)*x935);
evalcond[0]=(((r22*x950))+(((0.09465)*sj4))+(((-1.0)*rxp1_2*x953))+((x942*x946))+((rxp0_2*sj0))+((cj0*r20*x942))+(((-1.0)*x935*x947)));
evalcond[1]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.85)*npx*x938))+(((-1.0)*pp))+(((-0.2717)*x943))+(((0.85)*npz*sj1))+(((-1.0)*npy*sj0*x941))+(((-1.0)*x967)));
evalcond[2]=((((-1.0)*r21*x958))+(((-0.425)*r20*x938))+((r22*x942))+(((-1.0)*pz))+(((0.0267)*cj4))+(((-1.0)*x946*x950))+((r20*x956))+(((-1.0)*x936*x947)));
evalcond[3]=(((x936*x939))+((cj0*r00*x942))+((rxp0_0*sj0))+((x942*x949))+((x948*x964))+(((-1.0)*rxp1_0*x953))+((r02*x950))+(((-1.0)*cj4*x961)));
evalcond[4]=(((rxp0_1*sj0))+((x936*x948))+((cj0*r10*x942))+((x942*x951))+(((-1.0)*x939*x964))+((r12*x950))+(((-1.0)*rxp1_1*x953))+((cj4*x937)));
evalcond[5]=((((-1.0)*x935*x939))+((r02*x942))+(((-1.0)*r01*x958))+(((-0.425)*r00*x938))+(((0.0267)*x960))+(((-1.0)*px))+((x948*x965))+((r00*x956))+(((-1.0)*x949*x950))+x937);
evalcond[6]=(((r12*x942))+(((-0.0267)*x955))+(((-1.0)*py))+(((-1.0)*x939*x965))+(((-1.0)*r11*x958))+(((-1.0)*x950*x951))+(((-0.425)*r10*x938))+x961+(((-1.0)*x935*x948))+((r10*x956)));
evalcond[7]=((((-1.0)*pz*x962))+(((-1.0)*rxp0_2*x963))+(((0.1154725)*r20*x938))+(((-1.0)*r21*x952))+(((-1.0)*rxp1_2*x966))+(((-0.074252925)*x964))+(((0.02094615)*sj4*x936))+((r20*x959))+(((0.162105795)*cj4))+(((2.0)*pz*x943))+(((-1.0)*pp*r21*x953))+((x946*x954))+(((-1.0)*r22*x945))+(((0.2717)*pz))+(((-1.0)*rxp2_2*x941))+((r20*x944)));
evalcond[8]=((((-1.0)*r02*x945))+(((-1.0)*x960*x967))+(((-1.0)*r01*x952))+(((-1.0)*pp*r01*x953))+((x949*x954))+(((0.1154725)*r00*x938))+(((-1.0)*x940*x965))+(((-1.0)*rxp1_0*x966))+((r00*x944))+((r00*x959))+(((2.0)*px*x943))+((x935*x957))+(((-0.00505431)*sj5))+(((0.162105795)*x960))+(((0.2717)*px))+(((-1.0)*rxp0_0*x963))+(((-1.0)*px*x962))+(((-1.0)*rxp2_0*x941)));
evalcond[9]=((((-1.0)*rxp2_1*x941))+((x951*x954))+(((-1.0)*py*x962))+(((-1.0)*r12*x945))+(((0.1154725)*r10*x938))+(((-1.0)*pp*r11*x953))+((x957*x965))+(((-1.0)*r11*x952))+(((-1.0)*rxp0_1*x963))+(((-0.162105795)*x955))+(((-1.0)*rxp1_1*x966))+((x935*x940))+(((2.0)*py*x943))+(((0.2717)*py))+(((-0.00505431)*cj5))+((r10*x959))+((r10*x944))+((x955*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x968=((1700.0)*sj1);
IkReal x969=(cj0*r20);
IkReal x970=((1700.0)*cj1);
IkReal x971=(r21*sj0);
CheckValue<IkReal> x972=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x972.valid){
continue;
}
CheckValue<IkReal> x973 = IKatan2WithCheck(IkReal(((((-4000.0)*cj0*rxp1_2))+((r22*x970))+(((378.6)*sj4))+((x968*x971))+((x968*x969))+(((4000.0)*rxp0_2*sj0)))),IkReal(((((-1.0)*x969*x970))+(((-1.0)*x970*x971))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((543.4)*r20*sj0))+((r22*x968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x973.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x972.value)))+(x973.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x974=IKsin(j3);
IkReal x975=IKcos(j3);
IkReal x976=((0.09465)*sj5);
IkReal x977=(cj0*cj1);
IkReal x978=((0.39225)*sj5);
IkReal x979=((0.02094615)*cj5);
IkReal x980=((0.85)*cj1);
IkReal x981=((0.425)*sj1);
IkReal x982=(cj0*npy);
IkReal x983=((0.1621697775)*sj0);
IkReal x984=((0.1154725)*sj1);
IkReal x985=(r21*sj0);
IkReal x986=((0.39225)*sj4);
IkReal x987=((0.39225)*cj5);
IkReal x988=(r01*sj0);
IkReal x989=((0.425)*cj1);
IkReal x990=(r11*sj0);
IkReal x991=((0.1621697775)*cj0);
IkReal x992=((1.0)*cj0);
IkReal x993=((0.1154725)*cj1);
IkReal x994=(sj4*sj5);
IkReal x995=((0.13585)*sj0);
IkReal x996=((0.02094615)*sj5);
IkReal x997=((0.13585)*cj0);
IkReal x998=(pp*sj0);
IkReal x999=(cj5*sj4);
IkReal x1000=((0.09465)*cj5);
IkReal x1001=((2.0)*npx*sj0);
IkReal x1002=((0.85)*cj0*sj1);
IkReal x1003=(cj4*x974);
IkReal x1004=(cj4*x975);
IkReal x1005=((0.85)*sj0*sj1);
IkReal x1006=((0.074252925)*x974);
evalcond[0]=(((x981*x985))+((cj0*r20*x981))+((r22*x989))+(((0.09465)*sj4))+(((-1.0)*x974*x986))+((rxp0_2*sj0))+(((-1.0)*rxp1_2*x992)));
evalcond[1]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-1.0)*x1006))+(((-1.0)*pp))+(((-1.0)*npy*sj0*x980))+(((-0.2717)*x982))+(((0.85)*npz*sj1))+(((-0.85)*npx*x977)));
evalcond[2]=(((r22*x981))+((r20*x995))+(((-1.0)*pz))+(((0.0267)*cj4))+(((-0.425)*r20*x977))+(((-1.0)*x975*x986))+(((-1.0)*r21*x997))+(((-1.0)*x985*x989)));
evalcond[3]=(((x981*x988))+((x975*x978))+((rxp0_0*sj0))+(((-1.0)*cj4*x1000))+((x1003*x987))+((cj0*r00*x981))+(((-1.0)*rxp1_0*x992))+((r02*x989)));
evalcond[4]=(((cj4*x976))+((x975*x987))+((rxp0_1*sj0))+(((-1.0)*rxp1_1*x992))+((x981*x990))+((r12*x989))+((cj0*r10*x981))+(((-1.0)*x1003*x978)));
evalcond[5]=((((0.0267)*x999))+((x1004*x987))+(((-0.425)*r00*x977))+((r00*x995))+(((-1.0)*x988*x989))+(((-1.0)*x974*x978))+(((-1.0)*px))+(((-1.0)*r01*x997))+x976+((r02*x981)));
evalcond[6]=(x1000+(((-1.0)*x1004*x978))+(((-1.0)*r11*x997))+(((-0.425)*r10*x977))+(((-1.0)*x974*x987))+(((-1.0)*py))+((r12*x981))+((r10*x995))+(((-0.0267)*x994))+(((-1.0)*x989*x990)));
evalcond[7]=((((2.0)*pz*x982))+(((-0.074252925)*x1003))+(((-1.0)*rxp1_2*x1005))+(((-1.0)*pz*x1001))+(((0.02094615)*sj4*x975))+(((-1.0)*rxp0_2*x1002))+((r20*x998))+(((0.162105795)*cj4))+(((0.1154725)*r20*x977))+(((-1.0)*r21*x991))+(((0.2717)*pz))+((r20*x983))+((x985*x993))+(((-1.0)*r22*x984))+(((-1.0)*rxp2_2*x980))+(((-1.0)*pp*r21*x992)));
evalcond[8]=((((-1.0)*rxp0_0*x1002))+(((0.162105795)*x999))+(((-1.0)*rxp2_0*x980))+((x988*x993))+(((0.1154725)*r00*x977))+((r00*x998))+(((-1.0)*rxp1_0*x1005))+(((-1.0)*x1004*x979))+(((2.0)*px*x982))+((r00*x983))+(((-1.0)*r01*x991))+((x974*x996))+(((-0.00505431)*sj5))+(((-1.0)*pp*r01*x992))+(((-1.0)*r02*x984))+(((0.2717)*px))+(((-1.0)*x1006*x999))+(((-1.0)*px*x1001)));
evalcond[9]=((((-1.0)*py*x1001))+((x990*x993))+(((-0.162105795)*x994))+(((-1.0)*r11*x991))+(((-1.0)*rxp1_1*x1005))+(((-1.0)*pp*r11*x992))+((r10*x998))+((x974*x979))+(((-1.0)*rxp2_1*x980))+((r10*x983))+((x1004*x996))+(((-1.0)*r12*x984))+(((0.2717)*py))+(((-1.0)*rxp0_1*x1002))+(((2.0)*py*x982))+(((-0.00505431)*cj5))+((x1006*x994))+(((0.1154725)*r10*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1007=((1.0)*sj0);
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(cj5,-1);
if(!x1008.valid){
continue;
}
if( IKabs(((x1008.value)*(((((-1.0)*r00*x1007))+((cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r21))+(((-1.0)*r20*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1008.value)*(((((-1.0)*r00*x1007))+((cj0*r01))))))+IKsqr((((cj0*r21))+(((-1.0)*r20*x1007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1008.value)*(((((-1.0)*r00*x1007))+((cj0*r01))))), (((cj0*r21))+(((-1.0)*r20*x1007))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1009=IKsin(j4);
IkReal x1010=((1.0)*cj0);
evalcond[0]=((((-1.0)*r21*x1010))+(IKcos(j4))+((r20*sj0)));
evalcond[1]=(((r00*sj0))+((cj5*x1009))+(((-1.0)*r01*x1010)));
evalcond[2]=(((r10*sj0))+(((-1.0)*r11*x1010))+(((-1.0)*sj5*x1009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1011=(sj4*sj5);
IkReal x1012=(cj0*rxp1_2);
IkReal x1013=((0.349508517975)*cj5);
IkReal x1014=(npx*sj0);
IkReal x1015=(cj5*sj4);
IkReal x1016=((0.61544025)*pp);
IkReal x1017=((0.116502839325)*sj5);
IkReal x1018=(rxp0_2*sj0);
IkReal x1019=((1.046248425)*npz);
IkReal x1020=((0.349508517975)*sj5);
IkReal x1021=((0.116502839325)*cj5);
IkReal x1022=((2.09249685)*npz);
IkReal x1023=((0.049513706713125)*r22);
IkReal x1024=((0.09902741342625)*cj5);
IkReal x1025=(r21*sj0);
IkReal x1026=(cj0*r20);
IkReal x1027=((1.84632075)*pp);
IkReal x1028=((0.1980548268525)*cj5);
IkReal x1029=(sj5*x1023);
IkReal x1030=((0.0987151867400194)*x1011);
IkReal x1031=(cj5*x1023);
IkReal x1032=((0.0987151867400194)*x1015);
IkReal x1033=(sj5*x1026);
IkReal x1034=((0.167215115925)*cj0*npy);
IkReal x1035=((0.5231242125)*npy*sj0);
IkReal x1036=((0.5231242125)*cj0*npx);
IkReal x1037=((0.501645347775)*cj0*npy);
IkReal x1038=(x1018*x1020);
IkReal x1039=(x1011*x1027);
IkReal x1040=(x1012*x1020);
IkReal x1041=(x1013*x1018);
IkReal x1042=(x1015*x1027);
IkReal x1043=(x1012*x1013);
IkReal x1044=(x1011*x1036);
IkReal x1045=(x1011*x1035);
IkReal x1046=(x1011*x1037);
IkReal x1047=((0.501645347775)*x1011*x1014);
IkReal x1048=(x1015*x1035);
IkReal x1049=(x1015*x1036);
IkReal x1050=(x1015*x1037);
IkReal x1051=((0.501645347775)*x1014*x1015);
IkReal x1052=(x1040+x1047);
IkReal x1053=(x1051+x1043);
IkReal x1054=(x1045+x1044+x1029);
IkReal x1055=(x1049+x1048+x1031);
IkReal x1056=(x1050+x1042+x1041+x1032);
IkReal x1057=(x1046+x1038+x1039+x1030);
j1eval[0]=((IKabs(((((-1.0)*x1011*x1019))+(((0.09902741342625)*x1033))+(((0.09902741342625)*sj5*x1025)))))+(IKabs(((((-1.0)*x1015*x1019))+((x1024*x1025))+((x1024*x1026)))))+(((0.5)*(IKabs(((((-1.0)*x1055))+(((-1.0)*x1053))+x1056)))))+(((0.5)*(IKabs(((((-1.0)*x1012*x1017))+(((-1.0)*x1054))+((x1011*x1034))+((x1017*x1018))+(((0.0329050622466731)*x1011))+(((-0.167215115925)*x1011*x1014))+((x1011*x1016)))))))+(((0.5)*(IKabs(((((-1.0)*x1055))+(((-0.167215115925)*x1014*x1015))+((x1018*x1021))+((x1015*x1016))+(((0.0329050622466731)*x1015))+((x1015*x1034))+(((-1.0)*x1012*x1021)))))))+(((0.5)*(IKabs(((((-1.0)*x1053))+x1055+x1056)))))+(((0.5)*(IKabs(((((-1.0)*x1052))+x1054+x1057)))))+(((0.5)*(IKabs((((x1026*x1028))+(((-1.0)*x1015*x1022))+((x1025*x1028)))))))+(((0.5)*(IKabs(((((0.1980548268525)*x1033))+(((-1.0)*x1011*x1022))+(((0.1980548268525)*sj5*x1025)))))))+(((0.5)*(IKabs(((((-1.0)*x1054))+(((-1.0)*x1052))+x1057))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j2, j1]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1058=(sj4*sj5);
IkReal x1059=(cj0*npy);
IkReal x1060=(npx*sj0);
IkReal x1061=((0.1980548268525)*sj5);
IkReal x1062=(cj0*r20);
IkReal x1063=(r21*sj0);
IkReal x1064=((0.349508517975)*sj5);
IkReal x1065=(cj0*rxp1_2);
IkReal x1066=(rxp0_2*sj0);
IkReal x1067=((0.116502839325)*sj5);
IkReal x1068=((0.09902741342625)*sj5);
IkReal x1069=((0.049513706713125)*r22*sj5);
IkReal x1070=((0.0987151867400194)*x1058);
IkReal x1071=((0.0329050622466731)*x1058);
IkReal x1072=(x1064*x1066);
IkReal x1073=((1.84632075)*pp*x1058);
IkReal x1074=(x1064*x1065);
IkReal x1075=((0.61544025)*pp*x1058);
IkReal x1076=(x1066*x1067);
IkReal x1077=(x1065*x1067);
IkReal x1078=((0.5231242125)*cj0*npx*x1058);
IkReal x1079=((0.5231242125)*npy*sj0*x1058);
IkReal x1080=((0.501645347775)*x1058*x1059);
IkReal x1081=((0.501645347775)*x1058*x1060);
IkReal x1082=((0.167215115925)*x1058*x1059);
IkReal x1083=((0.167215115925)*x1058*x1060);
IkReal x1084=(x1074+x1081);
IkReal x1085=(x1077+x1083);
IkReal x1086=(((x1062*x1068))+((x1063*x1068))+(((-1.046248425)*npz*x1058)));
IkReal x1087=(x1078+x1079+x1069);
IkReal x1088=(x1072+x1073+x1070+x1080);
IkReal x1089=(x1076+x1075+x1071+x1082);
op[0]=(x1089+(((-1.0)*x1085))+(((-1.0)*x1087)));
op[1]=x1086;
op[2]=(x1088+(((-1.0)*x1084))+(((-1.0)*x1087)));
op[3]=(((x1061*x1062))+((x1061*x1063))+(((-2.09249685)*npz*x1058)));
op[4]=(x1087+x1088+(((-1.0)*x1084)));
op[5]=x1086;
op[6]=(x1087+x1089+(((-1.0)*x1085)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1090=(cj5*sj4);
IkReal x1091=((0.116502839325)*cj5);
IkReal x1092=(cj0*rxp1_2);
IkReal x1093=(rxp0_2*sj0);
IkReal x1094=((0.349508517975)*cj5);
IkReal x1095=((0.09902741342625)*cj5);
IkReal x1096=(r21*sj0);
IkReal x1097=(cj0*r20);
IkReal x1098=((0.1980548268525)*cj5);
IkReal x1099=(npx*sj0);
IkReal x1100=(cj0*npy);
IkReal x1101=((0.049513706713125)*cj5*r22);
IkReal x1102=((0.0987151867400194)*x1090);
IkReal x1103=((0.0329050622466731)*x1090);
IkReal x1104=((0.61544025)*pp*x1090);
IkReal x1105=(x1091*x1093);
IkReal x1106=(x1093*x1094);
IkReal x1107=((1.84632075)*pp*x1090);
IkReal x1108=(x1092*x1094);
IkReal x1109=(x1091*x1092);
IkReal x1110=((0.5231242125)*npy*sj0*x1090);
IkReal x1111=((0.5231242125)*cj0*npx*x1090);
IkReal x1112=((0.501645347775)*x1090*x1100);
IkReal x1113=((0.501645347775)*x1090*x1099);
IkReal x1114=((0.167215115925)*x1090*x1100);
IkReal x1115=((0.167215115925)*x1090*x1099);
IkReal x1116=(x1108+x1113);
IkReal x1117=(x1109+x1115);
IkReal x1118=(((x1095*x1096))+((x1095*x1097))+(((-1.046248425)*npz*x1090)));
IkReal x1119=(x1101+x1111+x1110);
IkReal x1120=(x1104+x1105+x1103+x1114);
IkReal x1121=(x1106+x1107+x1102+x1112);
j1evalpoly[0]=((((htj1*htj1*htj1)*((((x1096*x1098))+((x1097*x1098))+(((-2.09249685)*npz*x1090))))))+x1119+x1120+(((htj1*htj1)*((x1119+x1121+(((-1.0)*x1116))))))+(((htj1*htj1*htj1*htj1)*((x1121+(((-1.0)*x1119))+(((-1.0)*x1116))))))+((x1118*(htj1*htj1*htj1*htj1*htj1)))+((htj1*x1118))+(((-1.0)*x1117))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1120+(((-1.0)*x1119))+(((-1.0)*x1117)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3eval[3];
IkReal x1122=((1700.0)*sj1);
IkReal x1123=(cj0*r20);
IkReal x1124=((1700.0)*cj1);
IkReal x1125=(r21*sj0);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(((((-4000.0)*cj0*rxp1_2))+(((378.6)*sj4))+((r22*x1124))+(((4000.0)*rxp0_2*sj0))+((x1122*x1123))+((x1122*x1125)))))+(IKabs(((((-1.0)*x1123*x1124))+((r22*x1122))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((-1.0)*x1124*x1125))+(((543.4)*r20*sj0))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj4;
j3eval[1]=sj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1126=(cj0*r00);
IkReal x1127=(r01*sj0);
IkReal x1128=(r11*sj0);
IkReal x1129=(cj0*sj5);
IkReal x1130=((1.08349267049076)*sj1);
IkReal x1131=((2.54939451880178)*rxp1_1);
IkReal x1132=((2.54939451880178)*rxp0_1*sj0);
IkReal x1133=(cj5*x1130);
IkReal x1134=((2.54939451880178)*cj0*rxp1_0);
IkReal x1135=((2.54939451880178)*rxp0_0*sj0);
IkReal x1136=((1.08349267049076)*cj1*cj5);
IkReal x1137=((1.08349267049076)*cj1*sj5);
if( IKabs(((0.241300191204589)+(((-1.0)*cj5*x1135))+(((-1.0)*x1127*x1133))+((r10*x1129*x1130))+(((-1.0)*x1126*x1133))+((sj5*x1128*x1130))+((sj5*x1132))+((cj5*x1134))+((r12*x1137))+(((-1.0)*r02*x1136))+(((-1.0)*x1129*x1131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1136))+(((-1.0)*cj5*x1132))+(((2.54939451880178)*rxp1_0*x1129))+(((-1.0)*cj0*r10*x1133))+((cj0*cj5*x1131))+(((-1.0)*r02*x1137))+(((-1.0)*x1128*x1133))+(((-1.0)*sj5*x1127*x1130))+(((-1.0)*sj5*x1126*x1130))+(((-1.0)*sj5*x1135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.241300191204589)+(((-1.0)*cj5*x1135))+(((-1.0)*x1127*x1133))+((r10*x1129*x1130))+(((-1.0)*x1126*x1133))+((sj5*x1128*x1130))+((sj5*x1132))+((cj5*x1134))+((r12*x1137))+(((-1.0)*r02*x1136))+(((-1.0)*x1129*x1131))))+IKsqr(((((-1.0)*r12*x1136))+(((-1.0)*cj5*x1132))+(((2.54939451880178)*rxp1_0*x1129))+(((-1.0)*cj0*r10*x1133))+((cj0*cj5*x1131))+(((-1.0)*r02*x1137))+(((-1.0)*x1128*x1133))+(((-1.0)*sj5*x1127*x1130))+(((-1.0)*sj5*x1126*x1130))+(((-1.0)*sj5*x1135))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.241300191204589)+(((-1.0)*cj5*x1135))+(((-1.0)*x1127*x1133))+((r10*x1129*x1130))+(((-1.0)*x1126*x1133))+((sj5*x1128*x1130))+((sj5*x1132))+((cj5*x1134))+((r12*x1137))+(((-1.0)*r02*x1136))+(((-1.0)*x1129*x1131))), ((((-1.0)*r12*x1136))+(((-1.0)*cj5*x1132))+(((2.54939451880178)*rxp1_0*x1129))+(((-1.0)*cj0*r10*x1133))+((cj0*cj5*x1131))+(((-1.0)*r02*x1137))+(((-1.0)*x1128*x1133))+(((-1.0)*sj5*x1127*x1130))+(((-1.0)*sj5*x1126*x1130))+(((-1.0)*sj5*x1135))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1138=IKsin(j3);
IkReal x1139=IKcos(j3);
IkReal x1140=((0.09465)*sj5);
IkReal x1141=((0.09465)*cj5);
IkReal x1142=((0.02094615)*cj5);
IkReal x1143=(cj1*sj0);
IkReal x1144=((0.85)*cj0);
IkReal x1145=(cj0*r01);
IkReal x1146=((1.0)*pp);
IkReal x1147=((0.425)*cj1);
IkReal x1148=(r00*sj0);
IkReal x1149=((0.02094615)*sj5);
IkReal x1150=((0.425)*r01);
IkReal x1151=(cj0*r00);
IkReal x1152=(r12*sj1);
IkReal x1153=(r10*sj0);
IkReal x1154=(sj0*sj1);
IkReal x1155=((0.425)*r11);
IkReal x1156=((0.1621697775)*cj0);
IkReal x1157=((1.0)*cj0);
IkReal x1158=(cj0*r11);
IkReal x1159=((0.85)*cj1);
IkReal x1160=(cj0*r10);
IkReal x1161=((0.425)*sj1);
IkReal x1162=((0.1154725)*cj1);
IkReal x1163=(cj0*npy);
IkReal x1164=(r20*sj0);
IkReal x1165=((0.1154725)*sj1);
IkReal x1166=((0.074252925)*x1138);
IkReal x1167=((0.39225)*x1138);
IkReal x1168=((2.0)*npx*sj0);
IkReal x1169=((0.39225)*x1139);
IkReal x1170=(cj5*x1169);
IkReal x1171=(sj5*x1167);
IkReal x1172=(cj5*x1167);
IkReal x1173=(sj5*x1169);
IkReal x1174=(x1140+x1170);
IkReal x1175=(x1173+x1172);
evalcond[0]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-1.0)*x1146))+(((-0.85)*npy*x1143))+(((0.85)*npz*sj1))+(((-1.0)*cj1*npx*x1144))+(((-1.0)*x1166))+(((-0.2717)*x1163)));
evalcond[1]=(x1175+((rxp0_0*sj0))+(((-1.0)*rxp1_0*x1157))+(((-1.0)*x1141))+((r02*x1147))+((x1150*x1154))+((x1151*x1161)));
evalcond[2]=(x1174+((rxp0_1*sj0))+(((-1.0)*x1171))+((x1160*x1161))+(((-1.0)*rxp1_1*x1157))+((x1154*x1155))+((r12*x1147)));
evalcond[3]=(x1174+((r02*x1161))+(((-1.0)*x1143*x1150))+(((-1.0)*x1147*x1151))+(((-1.0)*px))+(((-1.0)*x1171))+(((0.13585)*x1148))+(((-0.13585)*x1145)));
evalcond[4]=(x1141+(((-1.0)*x1147*x1160))+(((0.425)*x1152))+(((-1.0)*x1143*x1155))+(((-1.0)*py))+(((-0.13585)*x1158))+(((-1.0)*x1175))+(((0.13585)*x1153)));
evalcond[5]=((0.162105795)+(((-1.0)*rxp2_2*x1159))+(((2.0)*pz*x1163))+(((-1.0)*rxp0_2*sj1*x1144))+(((-1.0)*pz*x1168))+(((-0.85)*rxp1_2*x1154))+((cj0*r20*x1162))+(((-1.0)*r22*x1165))+(((-1.0)*r21*x1156))+(((-1.0)*cj0*r21*x1146))+((pp*x1164))+(((0.1154725)*r21*x1143))+(((-1.0)*x1166))+(((0.2717)*pz))+(((0.1621697775)*x1164)));
evalcond[6]=((((-1.0)*rxp0_0*sj1*x1144))+(((-1.0)*x1145*x1146))+(((0.1154725)*r01*x1143))+(((-1.0)*r02*x1165))+((pp*x1148))+(((-0.1621697775)*x1145))+(((2.0)*px*x1163))+(((0.1621697775)*x1148))+(((-0.00505431)*sj5))+(((-1.0)*px*x1168))+(((-1.0)*x1139*x1142))+(((0.2717)*px))+((x1151*x1162))+(((-0.85)*rxp1_0*x1154))+((x1138*x1149))+(((-1.0)*rxp2_0*x1159)));
evalcond[7]=((((2.0)*py*x1163))+((pp*x1153))+(((-1.0)*py*x1168))+(((0.1621697775)*x1153))+(((0.1154725)*r11*x1143))+(((-1.0)*rxp2_1*x1159))+(((-1.0)*x1146*x1158))+(((-1.0)*r11*x1156))+((x1139*x1149))+(((-0.1154725)*x1152))+(((-0.85)*rxp1_1*x1154))+(((0.2717)*py))+(((-1.0)*rxp0_1*sj1*x1144))+((x1160*x1162))+(((-0.00505431)*cj5))+((x1138*x1142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1176=(cj0*r00);
IkReal x1177=(r01*sj0);
IkReal x1178=(r11*sj0);
IkReal x1179=(cj0*sj5);
IkReal x1180=((1.08349267049076)*sj1);
IkReal x1181=((2.54939451880178)*rxp1_1);
IkReal x1182=((2.54939451880178)*rxp0_1*sj0);
IkReal x1183=(cj5*x1180);
IkReal x1184=((2.54939451880178)*cj0*rxp1_0);
IkReal x1185=((2.54939451880178)*rxp0_0*sj0);
IkReal x1186=((1.08349267049076)*cj1*cj5);
IkReal x1187=((1.08349267049076)*cj1*sj5);
if( IKabs(((0.241300191204589)+(((-1.0)*cj5*x1184))+(((-1.0)*sj5*x1182))+((x1179*x1181))+((x1176*x1183))+(((-1.0)*sj5*x1178*x1180))+((cj5*x1185))+((x1177*x1183))+((r02*x1186))+(((-1.0)*r10*x1179*x1180))+(((-1.0)*r12*x1187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x1176*x1180))+(((-1.0)*cj5*x1182))+(((-1.0)*sj5*x1185))+((cj0*cj5*x1181))+(((-1.0)*x1178*x1183))+(((-1.0)*cj0*r10*x1183))+(((2.54939451880178)*rxp1_0*x1179))+(((-1.0)*r12*x1186))+(((-1.0)*sj5*x1177*x1180))+(((-1.0)*r02*x1187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.241300191204589)+(((-1.0)*cj5*x1184))+(((-1.0)*sj5*x1182))+((x1179*x1181))+((x1176*x1183))+(((-1.0)*sj5*x1178*x1180))+((cj5*x1185))+((x1177*x1183))+((r02*x1186))+(((-1.0)*r10*x1179*x1180))+(((-1.0)*r12*x1187))))+IKsqr(((((-1.0)*sj5*x1176*x1180))+(((-1.0)*cj5*x1182))+(((-1.0)*sj5*x1185))+((cj0*cj5*x1181))+(((-1.0)*x1178*x1183))+(((-1.0)*cj0*r10*x1183))+(((2.54939451880178)*rxp1_0*x1179))+(((-1.0)*r12*x1186))+(((-1.0)*sj5*x1177*x1180))+(((-1.0)*r02*x1187))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.241300191204589)+(((-1.0)*cj5*x1184))+(((-1.0)*sj5*x1182))+((x1179*x1181))+((x1176*x1183))+(((-1.0)*sj5*x1178*x1180))+((cj5*x1185))+((x1177*x1183))+((r02*x1186))+(((-1.0)*r10*x1179*x1180))+(((-1.0)*r12*x1187))), ((((-1.0)*sj5*x1176*x1180))+(((-1.0)*cj5*x1182))+(((-1.0)*sj5*x1185))+((cj0*cj5*x1181))+(((-1.0)*x1178*x1183))+(((-1.0)*cj0*r10*x1183))+(((2.54939451880178)*rxp1_0*x1179))+(((-1.0)*r12*x1186))+(((-1.0)*sj5*x1177*x1180))+(((-1.0)*r02*x1187))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1188=IKsin(j3);
IkReal x1189=IKcos(j3);
IkReal x1190=((0.09465)*sj5);
IkReal x1191=((0.09465)*cj5);
IkReal x1192=((0.02094615)*cj5);
IkReal x1193=(cj1*sj0);
IkReal x1194=((0.85)*cj0);
IkReal x1195=(cj0*r01);
IkReal x1196=((1.0)*pp);
IkReal x1197=((0.425)*cj1);
IkReal x1198=(r00*sj0);
IkReal x1199=((0.02094615)*sj5);
IkReal x1200=((0.425)*r01);
IkReal x1201=(cj0*r00);
IkReal x1202=(r12*sj1);
IkReal x1203=(r10*sj0);
IkReal x1204=(sj0*sj1);
IkReal x1205=((0.425)*r11);
IkReal x1206=((0.1621697775)*cj0);
IkReal x1207=((1.0)*cj0);
IkReal x1208=(cj0*r11);
IkReal x1209=((0.85)*cj1);
IkReal x1210=(cj0*r10);
IkReal x1211=((0.425)*sj1);
IkReal x1212=((0.1154725)*cj1);
IkReal x1213=(cj0*npy);
IkReal x1214=(r20*sj0);
IkReal x1215=((0.1154725)*sj1);
IkReal x1216=((0.074252925)*x1188);
IkReal x1217=((0.39225)*x1188);
IkReal x1218=((2.0)*npx*sj0);
IkReal x1219=((0.39225)*x1189);
IkReal x1220=(cj5*x1219);
IkReal x1221=(sj5*x1217);
IkReal x1222=(sj5*x1219);
IkReal x1223=(cj5*x1217);
IkReal x1224=(x1191+x1222);
IkReal x1225=(x1221+x1220);
evalcond[0]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.2717)*x1213))+(((-1.0)*x1196))+(((-1.0)*cj1*npx*x1194))+(((-0.85)*npy*x1193))+(((0.85)*npz*sj1))+(((-1.0)*x1216)));
evalcond[1]=(x1224+((rxp0_0*sj0))+(((-1.0)*x1223))+(((-1.0)*rxp1_0*x1207))+((x1200*x1204))+((x1201*x1211))+((r02*x1197)));
evalcond[2]=(((x1204*x1205))+x1225+((x1210*x1211))+((rxp0_1*sj0))+(((-1.0)*x1190))+(((-1.0)*rxp1_1*x1207))+((r12*x1197)));
evalcond[3]=((((0.13585)*x1198))+x1190+((r02*x1211))+(((-1.0)*x1225))+(((-1.0)*px))+(((-1.0)*x1197*x1201))+(((-1.0)*x1193*x1200))+(((-0.13585)*x1195)));
evalcond[4]=((((0.425)*x1202))+x1224+(((-1.0)*x1197*x1210))+(((-1.0)*x1223))+(((0.13585)*x1203))+(((-1.0)*py))+(((-1.0)*x1193*x1205))+(((-0.13585)*x1208)));
evalcond[5]=((-0.162105795)+x1216+((pp*x1214))+(((0.1621697775)*x1214))+(((-0.85)*rxp1_2*x1204))+(((2.0)*pz*x1213))+(((-1.0)*cj0*r21*x1196))+(((-1.0)*rxp2_2*x1209))+(((-1.0)*r22*x1215))+((cj0*r20*x1212))+(((-1.0)*r21*x1206))+(((-1.0)*rxp0_2*sj1*x1194))+(((0.2717)*pz))+(((0.1154725)*r21*x1193))+(((-1.0)*pz*x1218)));
evalcond[6]=((((-1.0)*rxp2_0*x1209))+((pp*x1198))+(((-1.0)*r02*x1215))+(((-1.0)*x1195*x1196))+((x1188*x1199))+((x1189*x1192))+(((-1.0)*px*x1218))+((x1201*x1212))+(((2.0)*px*x1213))+(((-0.00505431)*sj5))+(((0.1621697775)*x1198))+(((0.2717)*px))+(((-1.0)*rxp0_0*sj1*x1194))+(((0.1154725)*r01*x1193))+(((-0.1621697775)*x1195))+(((-0.85)*rxp1_0*x1204)));
evalcond[7]=((((2.0)*py*x1213))+((pp*x1203))+(((-1.0)*x1189*x1199))+((x1210*x1212))+(((-1.0)*rxp2_1*x1209))+(((-1.0)*x1196*x1208))+(((0.1621697775)*x1203))+(((-1.0)*rxp0_1*sj1*x1194))+((x1188*x1192))+(((-1.0)*r11*x1206))+(((0.2717)*py))+(((-0.1154725)*x1202))+(((-0.85)*rxp1_1*x1204))+(((-0.00505431)*cj5))+(((0.1154725)*r11*x1193))+(((-1.0)*py*x1218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1226=((11.447360491186)*cj1);
IkReal x1227=((1.08349267049076)*sj1);
if( IKabs(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*npy*sj0*x1226))+(((-1.0)*cj0*npx*x1226))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r10*x1227))+(((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*r11*sj0*x1227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*npy*sj0*x1226))+(((-1.0)*cj0*npx*x1226))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))))+IKsqr(((((-1.0)*cj0*r10*x1227))+(((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*r11*sj0*x1227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((11.447360491186)*npz*sj1))+(((-1.0)*npy*sj0*x1226))+(((-1.0)*cj0*npx*x1226))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))), ((((-1.0)*cj0*r10*x1227))+(((-2.54939451880178)*rxp0_1*sj0))+(((2.54939451880178)*cj0*rxp1_1))+(((-1.08349267049076)*cj1*r12))+(((-1.0)*r11*sj0*x1227))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x1228=IKsin(j3);
IkReal x1229=IKcos(j3);
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(cj0,-1);
if(!x1253.valid){
continue;
}
IkReal x1230=x1253.value;
IkReal x1231=sj0*sj0;
IkReal x1232=((0.13585)*sj0);
IkReal x1233=(cj0*cj1);
IkReal x1234=((0.425)*cj1);
IkReal x1235=((0.1154725)*r10);
IkReal x1236=((0.13585)*cj0);
IkReal x1237=(r01*sj0);
IkReal x1238=((0.425)*sj1);
IkReal x1239=((1.0)*cj0);
IkReal x1240=(r21*sj0);
IkReal x1241=((0.85)*sj1);
IkReal x1242=((1.0)*pp);
IkReal x1243=((0.1154725)*r20);
IkReal x1244=((0.1154725)*cj1);
IkReal x1245=(sj0*x1230);
IkReal x1246=((0.1154725)*sj1);
IkReal x1247=((0.85)*cj1);
IkReal x1248=(cj4*x1229);
IkReal x1249=((0.074252925)*x1228);
IkReal x1250=((0.39225)*x1228);
IkReal x1251=((0.39225)*x1229);
IkReal x1252=(x1230*x1231);
evalcond[0]=(x1251+((rxp0_1*sj0))+((r11*sj0*x1238))+(((-1.0)*rxp1_1*x1239))+((cj0*r10*x1238))+((r12*x1234)));
evalcond[1]=((0.09465)+(((-1.0)*x1250))+(((-1.0)*r10*x1234*x1252))+(((-0.425)*r10*x1233))+(((-1.0)*py))+((r12*x1238)));
evalcond[2]=(((cj0*r20*x1238))+(((0.09465)*sj4))+((r22*x1234))+(((-1.0)*rxp1_2*x1239))+(((-1.0)*sj4*x1250))+((rxp0_2*sj0))+((x1238*x1240)));
evalcond[3]=(((rxp0_0*sj0))+(((-0.09465)*cj4))+((r02*x1234))+(((-1.0)*rxp1_0*x1239))+((x1237*x1238))+((cj4*x1250))+((cj0*r00*x1238)));
evalcond[4]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.2717)*cj0*npy))+(((-0.85)*npx*x1233))+(((-1.0)*x1242))+(((-1.0)*x1249))+((npz*x1241))+(((-1.0)*npy*sj0*x1247)));
evalcond[5]=(((r20*x1232))+(((-1.0)*r21*x1236))+(((-0.425)*r20*x1233))+(((-1.0)*pz))+((r22*x1238))+(((0.0267)*cj4))+(((-1.0)*sj4*x1251))+(((-1.0)*x1234*x1240)));
evalcond[6]=((((0.0267)*sj4))+((r00*x1232))+(((-1.0)*r01*x1236))+(((-0.425)*r00*x1233))+(((0.39225)*x1248))+(((-1.0)*px))+((r02*x1238))+(((-1.0)*x1234*x1237)));
evalcond[7]=((-0.00505431)+(((0.0534)*py))+((cj1*x1235*x1252))+(((-1.0)*r12*x1246))+(((0.02094615)*x1228))+((x1233*x1235))+(((-1.0)*rxp1_1*sj0*x1241))+(((-1.0)*cj0*rxp0_1*x1241))+(((-1.0)*rxp2_1*x1247)));
evalcond[8]=((((0.0534)*pz))+(((-1.0)*cj4*x1242))+(((-1.0)*cj4*x1249))+(((-6.39825e-5)*cj4))+((x1233*x1243))+(((0.02094615)*sj4*x1229))+((cj4*x1244*x1245))+(((-1.0)*rxp1_2*sj0*x1241))+(((-1.0)*rxp2_2*x1247))+(((-1.0)*r22*x1246))+((cj1*x1243*x1252))+(((-1.0)*cj0*rxp0_2*x1241)));
evalcond[9]=((((-1.0)*r02*x1246))+((r00*x1244*x1252))+(((-1.0)*rxp1_0*sj0*x1241))+(((0.1154725)*r00*x1233))+(((0.0534)*px))+(((-0.02094615)*x1248))+(((-1.0)*rxp2_0*x1247))+((sj4*x1244*x1245))+(((-1.0)*cj0*rxp0_0*x1241))+(((-6.39825e-5)*sj4))+(((-1.0)*sj4*x1242))+(((-1.0)*sj4*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1254=((11.447360491186)*cj1);
IkReal x1255=((1.08349267049076)*sj1);
if( IKabs(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x1254))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x1254))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*x1255))+((cj0*r10*x1255))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+(((1.08349267049076)*cj1*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x1254))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x1254))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))))+IKsqr((((r11*sj0*x1255))+((cj0*r10*x1255))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+(((1.08349267049076)*cj1*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-1.0)*npy*sj0*x1254))+(((11.447360491186)*npz*sj1))+(((-1.0)*cj0*npx*x1254))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))), (((r11*sj0*x1255))+((cj0*r10*x1255))+(((2.54939451880178)*rxp0_1*sj0))+(((-2.54939451880178)*cj0*rxp1_1))+(((1.08349267049076)*cj1*r12))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x1256=IKsin(j3);
IkReal x1257=IKcos(j3);
CheckValue<IkReal> x1281=IKPowWithIntegerCheck(cj0,-1);
if(!x1281.valid){
continue;
}
IkReal x1258=x1281.value;
IkReal x1259=sj0*sj0;
IkReal x1260=((0.13585)*sj0);
IkReal x1261=(cj0*cj1);
IkReal x1262=((0.425)*cj1);
IkReal x1263=((0.1154725)*r10);
IkReal x1264=((0.13585)*cj0);
IkReal x1265=(r01*sj0);
IkReal x1266=((0.425)*sj1);
IkReal x1267=((1.0)*cj0);
IkReal x1268=(r21*sj0);
IkReal x1269=((0.85)*sj1);
IkReal x1270=((1.0)*pp);
IkReal x1271=((0.1154725)*r20);
IkReal x1272=((0.85)*cj1);
IkReal x1273=((0.1154725)*sj1);
IkReal x1274=((0.1154725)*r00);
IkReal x1275=(cj4*x1257);
IkReal x1276=((0.074252925)*x1256);
IkReal x1277=((0.39225)*x1256);
IkReal x1278=((0.39225)*x1257);
IkReal x1279=(x1258*x1259);
IkReal x1280=((0.1154725)*cj1*sj0*x1258);
evalcond[0]=(((r11*sj0*x1266))+(((-1.0)*x1278))+((cj0*r10*x1266))+((rxp0_1*sj0))+((r12*x1262))+(((-1.0)*rxp1_1*x1267)));
evalcond[1]=((-0.09465)+x1277+(((-0.425)*r10*x1261))+((r12*x1266))+(((-1.0)*py))+(((-1.0)*r10*x1262*x1279)));
evalcond[2]=(((r22*x1262))+(((0.09465)*sj4))+((cj0*r20*x1266))+((x1266*x1268))+((rxp0_2*sj0))+(((-1.0)*sj4*x1277))+(((-1.0)*rxp1_2*x1267)));
evalcond[3]=((((-1.0)*rxp1_0*x1267))+((rxp0_0*sj0))+((r02*x1262))+(((0.09465)*cj4))+((cj0*r00*x1266))+(((-1.0)*cj4*x1277))+((x1265*x1266)));
evalcond[4]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-0.2717)*cj0*npy))+(((-1.0)*x1270))+(((-1.0)*x1276))+((npz*x1269))+(((-1.0)*npy*sj0*x1272))+(((-0.85)*npx*x1261)));
evalcond[5]=((((-1.0)*r21*x1264))+(((-0.425)*r20*x1261))+((r22*x1266))+(((-1.0)*x1262*x1268))+(((-1.0)*pz))+(((0.0267)*cj4))+(((-1.0)*sj4*x1278))+((r20*x1260)));
evalcond[6]=(((r02*x1266))+(((-0.0267)*sj4))+(((-0.39225)*x1275))+(((-1.0)*r01*x1264))+(((-1.0)*x1262*x1265))+(((-0.425)*r00*x1261))+(((-1.0)*px))+((r00*x1260)));
evalcond[7]=((0.00505431)+(((-1.0)*rxp2_1*x1272))+(((-1.0)*rxp1_1*sj0*x1269))+(((-1.0)*cj0*rxp0_1*x1269))+((x1261*x1263))+(((0.0534)*py))+(((-1.0)*r12*x1273))+(((-0.02094615)*x1256))+((cj1*x1263*x1279)));
evalcond[8]=(((cj1*x1274*x1279))+(((-1.0)*cj0*rxp0_0*x1269))+(((0.02094615)*x1275))+(((-1.0)*rxp2_0*x1272))+(((0.0534)*px))+(((-1.0)*rxp1_0*sj0*x1269))+((x1261*x1274))+((pp*sj4))+((sj4*x1276))+(((-1.0)*sj4*x1280))+(((-1.0)*r02*x1273))+(((6.39825e-5)*sj4)));
evalcond[9]=((((-1.0)*rxp1_2*sj0*x1269))+(((0.0534)*pz))+((cj4*x1280))+((x1261*x1271))+(((-6.39825e-5)*cj4))+(((-1.0)*r22*x1273))+(((-1.0)*cj0*rxp0_2*x1269))+(((0.02094615)*sj4*x1257))+((cj1*x1271*x1279))+(((-1.0)*cj4*x1276))+(((-1.0)*cj4*x1270))+(((-1.0)*rxp2_2*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(sj4,-1);
if(!x1291.valid){
continue;
}
IkReal x1282=x1291.value;
IkReal x1283=((4000.0)*sj4);
IkReal x1284=((1700.0)*cj1);
IkReal x1285=(cj4*cj5);
IkReal x1286=((0.000637348629700446)*x1282);
IkReal x1287=((1700.0)*cj0*sj1);
IkReal x1288=((4000.0)*cj0*rxp1_2);
IkReal x1289=((4000.0)*rxp0_2*sj0);
IkReal x1290=((1700.0)*r21*sj0*sj1);
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(sj5,-1);
if(!x1292.valid){
continue;
}
if( IKabs((x1286*((x1289+x1290+((r22*x1284))+(((378.6)*sj4))+((r20*x1287))+(((-1.0)*x1288)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1286*(x1292.value)*((((x1285*x1288))+(((-1.0)*x1285*x1289))+(((-1.0)*rxp0_0*sj0*x1283))+(((-1.0)*r02*sj4*x1284))+(((-1.0)*r22*x1284*x1285))+(((-1.0)*x1285*x1290))+(((-1.0)*r20*x1285*x1287))+(((-1700.0)*r01*sj0*sj1*sj4))+(((-1.0)*r00*sj4*x1287))+((cj0*rxp1_0*x1283)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1286*((x1289+x1290+((r22*x1284))+(((378.6)*sj4))+((r20*x1287))+(((-1.0)*x1288))))))+IKsqr((x1286*(x1292.value)*((((x1285*x1288))+(((-1.0)*x1285*x1289))+(((-1.0)*rxp0_0*sj0*x1283))+(((-1.0)*r02*sj4*x1284))+(((-1.0)*r22*x1284*x1285))+(((-1.0)*x1285*x1290))+(((-1.0)*r20*x1285*x1287))+(((-1700.0)*r01*sj0*sj1*sj4))+(((-1.0)*r00*sj4*x1287))+((cj0*rxp1_0*x1283))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1286*((x1289+x1290+((r22*x1284))+(((378.6)*sj4))+((r20*x1287))+(((-1.0)*x1288))))), (x1286*(x1292.value)*((((x1285*x1288))+(((-1.0)*x1285*x1289))+(((-1.0)*rxp0_0*sj0*x1283))+(((-1.0)*r02*sj4*x1284))+(((-1.0)*r22*x1284*x1285))+(((-1.0)*x1285*x1290))+(((-1.0)*r20*x1285*x1287))+(((-1700.0)*r01*sj0*sj1*sj4))+(((-1.0)*r00*sj4*x1287))+((cj0*rxp1_0*x1283))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x1293=IKsin(j3);
IkReal x1294=IKcos(j3);
IkReal x1295=((0.09465)*sj5);
IkReal x1296=(cj0*cj1);
IkReal x1297=((0.39225)*sj5);
IkReal x1298=((0.02094615)*cj5);
IkReal x1299=((0.85)*cj1);
IkReal x1300=((0.425)*sj1);
IkReal x1301=(cj0*npy);
IkReal x1302=((0.1621697775)*sj0);
IkReal x1303=((0.1154725)*sj1);
IkReal x1304=(r21*sj0);
IkReal x1305=((0.39225)*sj4);
IkReal x1306=((0.39225)*cj5);
IkReal x1307=(r01*sj0);
IkReal x1308=((0.425)*cj1);
IkReal x1309=(r11*sj0);
IkReal x1310=((0.1621697775)*cj0);
IkReal x1311=((1.0)*cj0);
IkReal x1312=((0.1154725)*cj1);
IkReal x1313=(sj4*sj5);
IkReal x1314=((0.13585)*sj0);
IkReal x1315=((0.02094615)*sj5);
IkReal x1316=((0.13585)*cj0);
IkReal x1317=(pp*sj0);
IkReal x1318=(cj5*sj4);
IkReal x1319=((0.09465)*cj5);
IkReal x1320=((2.0)*npx*sj0);
IkReal x1321=((0.85)*cj0*sj1);
IkReal x1322=(cj4*x1293);
IkReal x1323=(cj4*x1294);
IkReal x1324=((0.85)*sj0*sj1);
IkReal x1325=((0.074252925)*x1293);
evalcond[0]=((((0.09465)*sj4))+((x1300*x1304))+((r22*x1308))+((rxp0_2*sj0))+(((-1.0)*x1293*x1305))+((cj0*r20*x1300))+(((-1.0)*rxp1_2*x1311)));
evalcond[1]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-1.0)*npy*sj0*x1299))+(((-1.0)*x1325))+(((-0.85)*npx*x1296))+(((-0.2717)*x1301))+(((-1.0)*pp))+(((0.85)*npz*sj1)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x1294*x1305))+(((0.0267)*cj4))+(((-1.0)*r21*x1316))+((r22*x1300))+((r20*x1314))+(((-0.425)*r20*x1296))+(((-1.0)*x1304*x1308)));
evalcond[3]=((((-1.0)*rxp1_0*x1311))+((rxp0_0*sj0))+((x1306*x1322))+((x1294*x1297))+((x1300*x1307))+(((-1.0)*cj4*x1319))+((cj0*r00*x1300))+((r02*x1308)));
evalcond[4]=((((-1.0)*rxp1_1*x1311))+((rxp0_1*sj0))+((r12*x1308))+((x1300*x1309))+((x1294*x1306))+((cj0*r10*x1300))+(((-1.0)*x1297*x1322))+((cj4*x1295)));
evalcond[5]=(((r00*x1314))+x1295+(((-1.0)*x1307*x1308))+((x1306*x1323))+(((-1.0)*r01*x1316))+(((-0.425)*r00*x1296))+(((-1.0)*px))+(((-1.0)*x1293*x1297))+(((0.0267)*x1318))+((r02*x1300)));
evalcond[6]=(x1319+(((-0.0267)*x1313))+(((-1.0)*x1308*x1309))+((r12*x1300))+((r10*x1314))+(((-1.0)*r11*x1316))+(((-1.0)*py))+(((-1.0)*x1297*x1323))+(((-0.425)*r10*x1296))+(((-1.0)*x1293*x1306)));
evalcond[7]=((((-0.074252925)*x1322))+(((0.02094615)*sj4*x1294))+(((0.1154725)*r20*x1296))+(((-1.0)*r22*x1303))+(((2.0)*pz*x1301))+(((-1.0)*rxp2_2*x1299))+(((-1.0)*r21*x1310))+(((0.162105795)*cj4))+((x1304*x1312))+(((-1.0)*pz*x1320))+(((-1.0)*rxp0_2*x1321))+((r20*x1317))+(((0.2717)*pz))+(((-1.0)*pp*r21*x1311))+((r20*x1302))+(((-1.0)*rxp1_2*x1324)));
evalcond[8]=(((r00*x1317))+(((-1.0)*rxp1_0*x1324))+(((0.162105795)*x1318))+((x1307*x1312))+(((-1.0)*rxp0_0*x1321))+((x1293*x1315))+(((-1.0)*r01*x1310))+(((-1.0)*r02*x1303))+(((-1.0)*x1298*x1323))+(((-1.0)*rxp2_0*x1299))+(((2.0)*px*x1301))+(((-1.0)*pp*r01*x1311))+(((0.1154725)*r00*x1296))+(((-0.00505431)*sj5))+(((0.2717)*px))+(((-1.0)*px*x1320))+((r00*x1302))+(((-1.0)*x1318*x1325)));
evalcond[9]=(((x1313*x1325))+(((-0.162105795)*x1313))+(((0.1154725)*r10*x1296))+(((-1.0)*rxp0_1*x1321))+(((-1.0)*rxp1_1*x1324))+((r10*x1302))+((x1309*x1312))+((r10*x1317))+((x1293*x1298))+(((2.0)*py*x1301))+(((-1.0)*r11*x1310))+(((-1.0)*pp*r11*x1311))+(((-1.0)*rxp2_1*x1299))+(((-1.0)*r12*x1303))+(((-1.0)*py*x1320))+(((0.2717)*py))+(((-0.00505431)*cj5))+((x1315*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1326=(cj1*sj0);
IkReal x1327=(cj0*cj1);
CheckValue<IkReal> x1328=IKPowWithIntegerCheck(sj4,-1);
if(!x1328.valid){
continue;
}
if( IKabs(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-11.447360491186)*npx*x1327))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-11.447360491186)*npy*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000637348629700446)*(x1328.value)*(((((-1700.0)*r21*x1326))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((1700.0)*r22*sj1))+(((543.4)*r20*sj0))+(((-1700.0)*r20*x1327)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-11.447360491186)*npx*x1327))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-11.447360491186)*npy*x1326))))+IKsqr(((0.000637348629700446)*(x1328.value)*(((((-1700.0)*r21*x1326))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((1700.0)*r22*sj1))+(((543.4)*r20*sj0))+(((-1700.0)*r20*x1327))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.478750803419529)+(((-13.4674829308071)*pp))+(((-11.447360491186)*npx*x1327))+(((11.447360491186)*npz*sj1))+(((3.65911511230029)*npx*sj0))+(((-3.65911511230029)*cj0*npy))+(((-11.447360491186)*npy*x1326))), ((0.000637348629700446)*(x1328.value)*(((((-1700.0)*r21*x1326))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((1700.0)*r22*sj1))+(((543.4)*r20*sj0))+(((-1700.0)*r20*x1327))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x1329=IKsin(j3);
IkReal x1330=IKcos(j3);
IkReal x1331=((0.09465)*sj5);
IkReal x1332=(cj0*cj1);
IkReal x1333=((0.39225)*sj5);
IkReal x1334=((0.02094615)*cj5);
IkReal x1335=((0.85)*cj1);
IkReal x1336=((0.425)*sj1);
IkReal x1337=(cj0*npy);
IkReal x1338=((0.1621697775)*sj0);
IkReal x1339=((0.1154725)*sj1);
IkReal x1340=(r21*sj0);
IkReal x1341=((0.39225)*sj4);
IkReal x1342=((0.39225)*cj5);
IkReal x1343=(r01*sj0);
IkReal x1344=((0.425)*cj1);
IkReal x1345=(r11*sj0);
IkReal x1346=((0.1621697775)*cj0);
IkReal x1347=((1.0)*cj0);
IkReal x1348=((0.1154725)*cj1);
IkReal x1349=(sj4*sj5);
IkReal x1350=((0.13585)*sj0);
IkReal x1351=((0.02094615)*sj5);
IkReal x1352=((0.13585)*cj0);
IkReal x1353=(pp*sj0);
IkReal x1354=(cj5*sj4);
IkReal x1355=((0.09465)*cj5);
IkReal x1356=((2.0)*npx*sj0);
IkReal x1357=((0.85)*cj0*sj1);
IkReal x1358=(cj4*x1329);
IkReal x1359=(cj4*x1330);
IkReal x1360=((0.85)*sj0*sj1);
IkReal x1361=((0.074252925)*x1329);
evalcond[0]=((((-1.0)*x1329*x1341))+((r22*x1344))+(((0.09465)*sj4))+(((-1.0)*rxp1_2*x1347))+((x1336*x1340))+((rxp0_2*sj0))+((cj0*r20*x1336)));
evalcond[1]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-1.0)*npy*sj0*x1335))+(((-0.85)*npx*x1332))+(((-1.0)*pp))+(((0.85)*npz*sj1))+(((-0.2717)*x1337))+(((-1.0)*x1361)));
evalcond[2]=((((-1.0)*x1340*x1344))+(((-1.0)*r21*x1352))+(((-1.0)*pz))+((r20*x1350))+(((-1.0)*x1330*x1341))+(((0.0267)*cj4))+((r22*x1336))+(((-0.425)*r20*x1332)));
evalcond[3]=(((rxp0_0*sj0))+(((-1.0)*rxp1_0*x1347))+((x1342*x1358))+((r02*x1344))+((cj0*r00*x1336))+((x1336*x1343))+((x1330*x1333))+(((-1.0)*cj4*x1355)));
evalcond[4]=(((cj4*x1331))+((rxp0_1*sj0))+((x1330*x1342))+((r12*x1344))+((x1336*x1345))+((cj0*r10*x1336))+(((-1.0)*x1333*x1358))+(((-1.0)*rxp1_1*x1347)));
evalcond[5]=(x1331+(((0.0267)*x1354))+((x1342*x1359))+(((-1.0)*px))+(((-0.425)*r00*x1332))+(((-1.0)*x1329*x1333))+(((-1.0)*r01*x1352))+((r00*x1350))+(((-1.0)*x1343*x1344))+((r02*x1336)));
evalcond[6]=(x1355+((r10*x1350))+((r12*x1336))+(((-0.0267)*x1349))+(((-1.0)*x1329*x1342))+(((-1.0)*r11*x1352))+(((-1.0)*py))+(((-0.425)*r10*x1332))+(((-1.0)*x1344*x1345))+(((-1.0)*x1333*x1359)));
evalcond[7]=((((-1.0)*pp*r21*x1347))+(((-1.0)*rxp0_2*x1357))+(((2.0)*pz*x1337))+(((-1.0)*r21*x1346))+(((-1.0)*rxp1_2*x1360))+(((-1.0)*r22*x1339))+((r20*x1338))+((x1340*x1348))+(((0.1154725)*r20*x1332))+(((-1.0)*rxp2_2*x1335))+((r20*x1353))+(((0.162105795)*cj4))+(((-0.074252925)*x1358))+(((0.2717)*pz))+(((-1.0)*pz*x1356))+(((0.02094615)*sj4*x1330)));
evalcond[8]=((((-1.0)*x1334*x1359))+(((-1.0)*rxp0_0*x1357))+(((-1.0)*pp*r01*x1347))+(((0.1154725)*r00*x1332))+(((-1.0)*px*x1356))+((r00*x1338))+(((-1.0)*x1354*x1361))+((x1329*x1351))+(((-1.0)*rxp1_0*x1360))+(((0.162105795)*x1354))+(((-1.0)*r01*x1346))+(((-1.0)*rxp2_0*x1335))+(((-0.00505431)*sj5))+(((-1.0)*r02*x1339))+((r00*x1353))+(((0.2717)*px))+((x1343*x1348))+(((2.0)*px*x1337)));
evalcond[9]=((((2.0)*py*x1337))+((x1329*x1334))+((r10*x1353))+(((-1.0)*r11*x1346))+((x1345*x1348))+(((-1.0)*rxp0_1*x1357))+((x1349*x1361))+(((0.1154725)*r10*x1332))+((r10*x1338))+((x1351*x1359))+(((-0.162105795)*x1349))+(((-1.0)*pp*r11*x1347))+(((-1.0)*r12*x1339))+(((-1.0)*rxp2_1*x1335))+(((0.2717)*py))+(((-0.00505431)*cj5))+(((-1.0)*rxp1_1*x1360))+(((-1.0)*py*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1362=((1700.0)*sj1);
IkReal x1363=(cj0*r20);
IkReal x1364=((1700.0)*cj1);
IkReal x1365=(r21*sj0);
CheckValue<IkReal> x1366 = IKatan2WithCheck(IkReal(((((-4000.0)*cj0*rxp1_2))+((r22*x1364))+(((378.6)*sj4))+(((4000.0)*rxp0_2*sj0))+((x1362*x1365))+((x1362*x1363)))),IkReal(((((-1.0)*x1364*x1365))+((r22*x1362))+(((-543.4)*cj0*r21))+(((-4000.0)*pz))+(((106.8)*cj4))+(((-1.0)*x1363*x1364))+(((543.4)*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1367.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1366.value)+(((1.5707963267949)*(x1367.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x1368=IKsin(j3);
IkReal x1369=IKcos(j3);
IkReal x1370=((0.09465)*sj5);
IkReal x1371=(cj0*cj1);
IkReal x1372=((0.39225)*sj5);
IkReal x1373=((0.02094615)*cj5);
IkReal x1374=((0.85)*cj1);
IkReal x1375=((0.425)*sj1);
IkReal x1376=(cj0*npy);
IkReal x1377=((0.1621697775)*sj0);
IkReal x1378=((0.1154725)*sj1);
IkReal x1379=(r21*sj0);
IkReal x1380=((0.39225)*sj4);
IkReal x1381=((0.39225)*cj5);
IkReal x1382=(r01*sj0);
IkReal x1383=((0.425)*cj1);
IkReal x1384=(r11*sj0);
IkReal x1385=((0.1621697775)*cj0);
IkReal x1386=((1.0)*cj0);
IkReal x1387=((0.1154725)*cj1);
IkReal x1388=(sj4*sj5);
IkReal x1389=((0.13585)*sj0);
IkReal x1390=((0.02094615)*sj5);
IkReal x1391=((0.13585)*cj0);
IkReal x1392=(pp*sj0);
IkReal x1393=(cj5*sj4);
IkReal x1394=((0.09465)*cj5);
IkReal x1395=((2.0)*npx*sj0);
IkReal x1396=((0.85)*cj0*sj1);
IkReal x1397=(cj4*x1368);
IkReal x1398=(cj4*x1369);
IkReal x1399=((0.85)*sj0*sj1);
IkReal x1400=((0.074252925)*x1368);
evalcond[0]=(((x1375*x1379))+(((0.09465)*sj4))+(((-1.0)*rxp1_2*x1386))+((rxp0_2*sj0))+((r22*x1383))+(((-1.0)*x1368*x1380))+((cj0*r20*x1375)));
evalcond[1]=((-0.0355486475)+(((0.2717)*npx*sj0))+(((-1.0)*npy*sj0*x1374))+(((-0.85)*npx*x1371))+(((-1.0)*x1400))+(((-1.0)*pp))+(((-0.2717)*x1376))+(((0.85)*npz*sj1)));
evalcond[2]=((((-1.0)*r21*x1391))+((r20*x1389))+(((-1.0)*pz))+((r22*x1375))+(((0.0267)*cj4))+(((-0.425)*r20*x1371))+(((-1.0)*x1369*x1380))+(((-1.0)*x1379*x1383)));
evalcond[3]=((((-1.0)*cj4*x1394))+((rxp0_0*sj0))+((x1375*x1382))+((x1369*x1372))+((cj0*r00*x1375))+(((-1.0)*rxp1_0*x1386))+((x1381*x1397))+((r02*x1383)));
evalcond[4]=((((-1.0)*x1372*x1397))+((rxp0_1*sj0))+((cj4*x1370))+((cj0*r10*x1375))+((x1375*x1384))+((x1369*x1381))+((r12*x1383))+(((-1.0)*rxp1_1*x1386)));
evalcond[5]=(x1370+(((-1.0)*x1382*x1383))+(((-1.0)*r01*x1391))+(((-1.0)*px))+(((-0.425)*r00*x1371))+((r00*x1389))+((r02*x1375))+(((-1.0)*x1368*x1372))+((x1381*x1398))+(((0.0267)*x1393)));
evalcond[6]=(x1394+((r10*x1389))+(((-1.0)*x1383*x1384))+(((-1.0)*x1372*x1398))+((r12*x1375))+(((-0.0267)*x1388))+(((-0.425)*r10*x1371))+(((-1.0)*py))+(((-1.0)*x1368*x1381))+(((-1.0)*r11*x1391)));
evalcond[7]=((((0.1154725)*r20*x1371))+(((-1.0)*r21*x1385))+(((-1.0)*r22*x1378))+((r20*x1392))+(((2.0)*pz*x1376))+(((-0.074252925)*x1397))+(((-1.0)*pp*r21*x1386))+(((-1.0)*rxp2_2*x1374))+(((0.162105795)*cj4))+((x1379*x1387))+(((-1.0)*rxp1_2*x1399))+(((0.2717)*pz))+(((-1.0)*rxp0_2*x1396))+((r20*x1377))+(((-1.0)*pz*x1395))+(((0.02094615)*sj4*x1369)));
evalcond[8]=((((0.1154725)*r00*x1371))+(((-1.0)*r02*x1378))+(((-1.0)*x1393*x1400))+(((-1.0)*r01*x1385))+(((2.0)*px*x1376))+(((-1.0)*px*x1395))+(((-0.00505431)*sj5))+(((-1.0)*pp*r01*x1386))+(((-1.0)*rxp0_0*x1396))+((r00*x1392))+((x1368*x1390))+(((0.162105795)*x1393))+(((-1.0)*rxp2_0*x1374))+(((0.2717)*px))+(((-1.0)*rxp1_0*x1399))+((r00*x1377))+((x1382*x1387))+(((-1.0)*x1373*x1398)));
evalcond[9]=((((-1.0)*rxp1_1*x1399))+(((-1.0)*r11*x1385))+(((0.1154725)*r10*x1371))+((r10*x1392))+((r10*x1377))+(((-1.0)*rxp2_1*x1374))+(((2.0)*py*x1376))+((x1390*x1398))+(((-1.0)*pp*r11*x1386))+(((-0.162105795)*x1388))+(((-1.0)*r12*x1378))+(((-1.0)*rxp0_1*x1396))+((x1368*x1373))+((x1388*x1400))+((x1384*x1387))+(((0.2717)*py))+(((-1.0)*py*x1395))+(((-0.00505431)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j2;
vinfos[3].indices[0] = _ij2[0];
vinfos[3].indices[1] = _ij2[1];
vinfos[3].maxsolutions = _nj2;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j1;
vinfos[4].indices[0] = _ij1[0];
vinfos[4].indices[1] = _ij1[1];
vinfos[4].maxsolutions = _nj1;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j0;
vinfos[5].indices[0] = _ij0[0];
vinfos[5].indices[1] = _ij0[1];
vinfos[5].maxsolutions = _nj0;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "7a0a388cdf16b9851166402d00220ddd"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
