/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-13 10:16:40.019272
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.0960879897518746)*x2);
x13=((0.1)*x5);
x14=((0.960879897518746)*x0);
x15=((1.0)*x8);
x16=((0.276965381490835)*x6);
x17=((1.0)*x9);
x18=((0.105246844966517)*x6);
x19=((0.43)*x2);
x20=((0.960879897518746)*x6);
x21=((0.105246844966517)*x0);
x22=((0.0276965381490835)*x0);
x23=((0.276965381490835)*x0);
x24=((1.0)*x5);
x25=((0.0276965381490835)*x6);
x26=(x6*x7);
x27=(x2*x4);
x28=(x3*x4);
x29=(x1*x3);
x30=(x1*x2);
x31=(x0*x7);
x32=(x5*x9);
x33=((1.0)*x26);
x34=((1.0)*x31);
x35=((0.276965381490835)*x27);
x36=((0.365134361057124)*x28);
x37=((((0.276965381490835)*x29))+(((0.960879897518746)*x30))+(((0.960879897518746)*x28)));
x38=((((-1.0)*x37))+x35);
x39=((((0.276965381490835)*x30))+(((0.276965381490835)*x28))+(((-0.960879897518746)*x29))+(((0.960879897518746)*x27)));
x40=(x38*x7);
x41=(x38*x5);
x42=(((x23*(((((-1.0)*x30))+(((-1.0)*x28))))))+((x14*(((((-1.0)*x27))+x29)))));
x43=(((x14*(((((-1.0)*x30))+(((-1.0)*x28))))))+((x23*(((((-1.0)*x29))+x27)))));
x44=(((x20*(((((-1.0)*x29))+x27))))+((x16*((x30+x28)))));
x45=(((x16*(((((-1.0)*x27))+x29))))+((x20*((x30+x28)))));
x46=(x42*x5);
x47=(x43*x9);
x48=(x44*x5);
x49=(((x5*x6))+((x42*x7)));
x50=((((-1.0)*x34))+x48);
x51=(((x0*x5))+((x44*x7)));
eerot[0]=(((x10*x49))+((x11*((((x8*(((((-1.0)*x33))+x46))))+x47)))));
eerot[1]=(((x9*(((((-1.0)*x24*x42))+x33))))+((x43*x8)));
eerot[2]=(((x11*x49))+(((-1.0)*x10*(((((1.0)*x8*(((((-1.0)*x26))+x46))))+(((1.0)*x47)))))));
IkReal x52=((1.0)*x0);
IkReal x53=((1.0)*x29);
eetrans[0]=((((-0.365134361057124)*x0*x30))+((x21*x27))+((x0*x19))+(((-1.0)*x21*x53))+((x9*(((((0.1)*x26))+(((-1.0)*x13*x42))))))+((x8*((((x22*x27))+(((-0.0960879897518746)*x0*x28))+(((-1.0)*x22*x53))+(((-1.0)*x1*x12*x52))))))+(((-1.0)*x36*x52)));
eerot[3]=(((x11*((((x50*x8))+((x45*x9))))))+((x10*x51)));
eerot[4]=(((x9*(((((-1.0)*x24*x44))+x34))))+((x45*x8)));
eerot[5]=(((x10*(((((-1.0)*x17*x45))+(((-1.0)*x15*x50))))))+((x11*x51)));
IkReal x54=((1.0)*x27);
eetrans[1]=(((x18*x29))+((x9*(((((0.1)*x31))+(((-1.0)*x13*x44))))))+((x8*((((x1*x12*x6))+(((-1.0)*x25*x54))+(((0.0960879897518746)*x28*x6))+((x25*x29))))))+(((-1.0)*x19*x6))+(((0.365134361057124)*x30*x6))+(((-1.0)*x18*x54))+((x36*x6)));
eerot[6]=(((x10*x40))+((x11*((((x41*x8))+((x39*x9)))))));
eerot[7]=(((x32*(((((-1.0)*x35))+x37))))+((x39*x8)));
eerot[8]=(((x11*x40))+((x10*(((((-1.0)*x15*x41))+(((-1.0)*x17*x39)))))));
eetrans[2]=((0.09)+(((0.105246844966517)*x30))+((x8*(((((0.0276965381490835)*x28))+(((-0.0960879897518746)*x29))+(((0.0276965381490835)*x30))+((x12*x4))))))+(((0.105246844966517)*x28))+(((0.365134361057124)*x27))+((x32*(((((0.0276965381490835)*x29))+((x1*x12))+(((-0.0276965381490835)*x27))+(((0.0960879897518746)*x28))))))+(((-0.365134361057124)*x29))+(((0.43)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=(px+(((-0.1)*r01)));
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=(py+(((-0.1)*r11)));
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.09)+(((-0.1)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (((1.00764993880049)+(((-3.05997552019584)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.00764993880049)+(((-3.05997552019584)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x58=IKasin(((1.00764993880049)+(((-3.05997552019584)*pp))));
j6array[0]=((1.29016182791775)+(((-1.0)*x58)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((4.43175448150754)+x58);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[1];
j4eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=((2.04281658104239)+sj6+(((1.59536351704987)*(sj6*sj6)))+(((1.59536351704987)*(cj6*cj6)))+(((-3.46931407942238)*cj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x59=((-0.43)+(((0.365134361057124)*cj6))+(((-0.105246844966517)*sj6)));
IkReal x60=((((-0.105246844966517)*cj6))+(((-0.365134361057124)*sj6)));
CheckValue<IkReal> x63 = IKatan2WithCheck(IkReal(x59),IkReal(x60),IKFAST_ATAN2_MAGTHRESH);
if(!x63.valid){
continue;
}
IkReal x61=((1.0)*(x63.value));
if((((x59*x59)+(x60*x60))) < -0.00001)
continue;
CheckValue<IkReal> x64=IKPowWithIntegerCheck(IKabs(IKsqrt(((x59*x59)+(x60*x60)))),-1);
if(!x64.valid){
continue;
}
if( ((pz*(x64.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x64.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x62=IKasin((pz*(x64.value)));
j5array[0]=((((-1.0)*x61))+(((-1.0)*x62)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x62+(((-1.0)*x61)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
IkReal x65=pz*pz;
IkReal x66=(pp*sj5);
IkReal x67=((2000.0)*pp);
IkReal x68=((1720.0)*cj5*pz);
IkReal x69=(sj5*x65);
j4eval[0]=(x66+(((-1.0)*x69)));
j4eval[1]=IKsign(((((43.0)*x66))+(((-43.0)*x69))));
j4eval[2]=((IKabs(((((-81.0)*py))+(((-1.0)*py*x67))+((py*x68)))))+(IKabs(((((-1.0)*px*x68))+(((81.0)*px))+((px*x67))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x70=((1052731.56677759)*cj6);
IkReal x71=((3652256.44647388)*sj6);
IkReal x72=((10002500.0)*pz*sj5);
IkReal x73=(((cj5*pp))+(((-1.0)*cj5*(pz*pz))));
j4eval[0]=x73;
j4eval[1]=IKsign(x73);
j4eval[2]=((IKabs((((py*x71))+((py*x70))+(((-1.0)*py*x72)))))+(IKabs(((((-1.0)*px*x70))+(((-1.0)*px*x71))+((px*x72))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x74=((1052731.56677759)*sj6);
IkReal x75=((3652256.44647388)*cj6);
IkReal x76=((10002500.0)*cj5*pz);
IkReal x77=(((pp*sj5))+(((-1.0)*sj5*(pz*pz))));
j4eval[0]=x77;
j4eval[1]=((IKabs(((((4301075.0)*px))+(((-1.0)*px*x75))+(((-1.0)*px*x76))+((px*x74)))))+(IKabs((((py*x75))+((py*x76))+(((-4301075.0)*py))+(((-1.0)*py*x74))))));
j4eval[2]=IKsign(x77);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
IkReal x78=((38004.7497031621)*sj6);
IkReal x79=((27700.0)*pz);
IkReal x80=((((-1.0)*pp))+(pz*pz));
j4eval[0]=x80;
j4eval[1]=((IKabs(((((-1.0)*px*x79))+(((11911.0)*px))+((px*x78)))))+(IKabs((((py*x79))+(((-11911.0)*py))+(((-1.0)*py*x78))))));
j4eval[2]=IKsign(x80);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x81=((0.395470860594819)*sj6);
IkReal x82=((0.288241415192508)*pz);
CheckValue<IkReal> x83=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x83.valid){
continue;
}
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((((0.123943808532778)*px))+((px*x81))+(((-1.0)*px*x82)))),IkReal(((((-1.0)*py*x81))+((py*x82))+(((-0.123943808532778)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x83.value)))+(x84.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x85=IKsin(j4);
IkReal x86=IKcos(j4);
IkReal x87=((1.0)*py);
evalcond[0]=((((-1.0)*px*x86))+(((-1.0)*x85*x87)));
evalcond[1]=((0.123943808532778)+(((0.395470860594819)*sj6))+(((-1.0)*x86*x87))+(((-0.288241415192508)*pz))+((px*x85)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x789=((38004.7497031621)*sj6);
IkReal x790=((27700.0)*pz);
IkReal x791=(pp+(((-1.0)*(pz*pz))));
j4eval[0]=x791;
j4eval[1]=((IKabs((((px*x790))+((px*x789))+(((11911.0)*px)))))+(IKabs(((((-11911.0)*py))+(((-1.0)*py*x790))+(((-1.0)*py*x789))))));
j4eval[2]=IKsign(x791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x792=((0.395470860594819)*sj6);
IkReal x793=((0.288241415192508)*pz);
CheckValue<IkReal> x794=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal(((((0.123943808532778)*px))+((px*x793))+((px*x792)))),IkReal(((((-0.123943808532778)*py))+(((-1.0)*py*x793))+(((-1.0)*py*x792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x794.value)))+(x795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x796=IKcos(j4);
IkReal x797=IKsin(j4);
IkReal x798=((1.0)*x797);
evalcond[0]=((((-1.0)*py*x798))+(((-1.0)*px*x796)));
evalcond[1]=((0.123943808532778)+(((-1.0)*px*x798))+(((0.395470860594819)*sj6))+(((0.288241415192508)*pz))+((py*x796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x799=pz*pz;
IkReal x800=((2000.0)*pp);
j4eval[0]=((((-1.0)*pp))+x799);
j4eval[1]=((IKabs(((((-81.0)*px))+(((-1.0)*px*x800)))))+(IKabs(((((81.0)*py))+((py*x800))))));
j4eval[2]=IKsign(((((43.0)*x799))+(((-43.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x801=((1052731.56677759)*sj6);
IkReal x802=((3652256.44647388)*cj6);
IkReal x803=((((-1.0)*pp))+(pz*pz));
j4eval[0]=x803;
j4eval[1]=((IKabs(((((-1.0)*px*x801))+(((-4301075.0)*px))+((px*x802)))))+(IKabs(((((4301075.0)*py))+((py*x801))+(((-1.0)*py*x802))))));
j4eval[2]=IKsign(x803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x804=((0.105246844966517)*sj6);
IkReal x805=((0.365134361057124)*cj6);
CheckValue<IkReal> x806=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((((-1.0)*px*x804))+(((-0.43)*px))+((px*x805)))),IkReal(((((0.43)*py))+((py*x804))+(((-1.0)*py*x805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x806.value)))+(x807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x808=IKsin(j4);
IkReal x809=IKcos(j4);
IkReal x810=((1.0)*py);
IkReal x811=(px*x808);
evalcond[0]=((((-1.0)*x808*x810))+(((-1.0)*px*x809)));
evalcond[1]=((-0.0405)+(((-1.0)*pp))+(((-0.86)*py*x809))+(((0.86)*x811)));
evalcond[2]=((-0.43)+(((0.365134361057124)*cj6))+(((-1.0)*x809*x810))+(((-0.105246844966517)*sj6))+x811);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x812=((50.0)*pp);
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal(((((-2.025)*px))+(((-1.0)*px*x812)))),IkReal((((py*x812))+(((2.025)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
CheckValue<IkReal> x814=IKPowWithIntegerCheck(IKsign(((((-43.0)*pp))+(((43.0)*(pz*pz))))),-1);
if(!x814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x813.value)+(((1.5707963267949)*(x814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x815=IKsin(j4);
IkReal x816=IKcos(j4);
IkReal x817=((1.0)*py);
IkReal x818=(px*x815);
evalcond[0]=((((-1.0)*x815*x817))+(((-1.0)*px*x816)));
evalcond[1]=((-0.0405)+(((-0.86)*py*x816))+(((-1.0)*pp))+(((0.86)*x818)));
evalcond[2]=((-0.43)+(((0.365134361057124)*cj6))+(((-1.0)*x816*x817))+(((-0.105246844966517)*sj6))+x818);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x819=pz*pz;
IkReal x820=((2000.0)*pp);
j4eval[0]=((((-1.0)*x819))+pp);
j4eval[1]=IKsign(((((-43.0)*x819))+(((43.0)*pp))));
j4eval[2]=((IKabs((((py*x820))+(((81.0)*py)))))+(IKabs(((((-81.0)*px))+(((-1.0)*px*x820))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x821=((1052731.56677759)*sj6);
IkReal x822=((3652256.44647388)*cj6);
IkReal x823=(pp+(((-1.0)*(pz*pz))));
j4eval[0]=x823;
j4eval[1]=((IKabs(((((4301075.0)*py))+((py*x821))+(((-1.0)*py*x822)))))+(IKabs(((((-4301075.0)*px))+((px*x822))+(((-1.0)*px*x821))))));
j4eval[2]=IKsign(x823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x824=((0.365134361057124)*cj6);
IkReal x825=((0.105246844966517)*sj6);
CheckValue<IkReal> x826=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal((((px*x824))+(((-0.43)*px))+(((-1.0)*px*x825)))),IkReal((((py*x825))+(((0.43)*py))+(((-1.0)*py*x824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x826.value)))+(x827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x828=IKcos(j4);
IkReal x829=IKsin(j4);
IkReal x830=(px*x829);
IkReal x831=(py*x828);
evalcond[0]=((((-1.0)*px*x828))+(((-1.0)*py*x829)));
evalcond[1]=((-0.0405)+(((-0.86)*x830))+(((0.86)*x831))+(((-1.0)*pp)));
evalcond[2]=((-0.43)+(((0.365134361057124)*cj6))+(((-1.0)*x830))+(((-0.105246844966517)*sj6))+x831);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x832=((50.0)*pp);
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign(((((43.0)*pp))+(((-43.0)*(pz*pz))))),-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(((((-2.025)*px))+(((-1.0)*px*x832)))),IkReal((((py*x832))+(((2.025)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x833.value)))+(x834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x835=IKcos(j4);
IkReal x836=IKsin(j4);
IkReal x837=(px*x836);
IkReal x838=(py*x835);
evalcond[0]=((((-1.0)*px*x835))+(((-1.0)*py*x836)));
evalcond[1]=((-0.0405)+(((-0.86)*x837))+(((0.86)*x838))+(((-1.0)*pp)));
evalcond[2]=((-0.43)+(((0.365134361057124)*cj6))+(((-1.0)*x837))+(((-0.105246844966517)*sj6))+x838);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x839=((0.365134361057124)*cj6);
IkReal x840=(cj5*pz);
IkReal x841=((0.105246844966517)*sj6);
CheckValue<IkReal> x842 = IKatan2WithCheck(IkReal(((((0.43)*px))+(((-1.0)*px*x840))+(((-1.0)*px*x839))+((px*x841)))),IkReal(((((-1.0)*py*x841))+((py*x840))+(((-0.43)*py))+((py*x839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x842.valid){
continue;
}
CheckValue<IkReal> x843=IKPowWithIntegerCheck(IKsign((((pp*sj5))+(((-1.0)*sj5*(pz*pz))))),-1);
if(!x843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x842.value)+(((1.5707963267949)*(x843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x844=IKsin(j4);
IkReal x845=IKcos(j4);
IkReal x846=((0.365134361057124)*sj6);
IkReal x847=((1.0)*py);
IkReal x848=((0.105246844966517)*cj6);
IkReal x849=(cj5*pz);
IkReal x850=((0.105246844966517)*sj6);
IkReal x851=((0.365134361057124)*cj6);
IkReal x852=(px*x844);
IkReal x853=(py*sj5*x845);
evalcond[0]=((((-1.0)*px*x845))+(((-1.0)*x844*x847)));
evalcond[1]=((-0.0405)+(((0.86)*x849))+(((-1.0)*pp))+(((-0.86)*x853))+(((0.86)*sj5*x852)));
evalcond[2]=((-0.43)+((sj5*x852))+(((-1.0)*x850))+(((-1.0)*sj5*x845*x847))+x851+x849);
evalcond[3]=((((-1.0)*pz*sj5))+x846+x848+(((-1.0)*cj5*x845*x847))+((cj5*x852)));
evalcond[4]=(((sj5*x851))+(((-0.43)*sj5))+(((-1.0)*sj5*x850))+((cj5*x846))+((cj5*x848))+(((-1.0)*x845*x847))+x852);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x854=((0.105246844966517)*cj6);
IkReal x855=((0.365134361057124)*sj6);
IkReal x856=(pz*sj5);
CheckValue<IkReal> x857 = IKatan2WithCheck(IkReal((((px*x856))+(((-1.0)*px*x855))+(((-1.0)*px*x854)))),IkReal(((((-1.0)*py*x856))+((py*x855))+((py*x854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x857.valid){
continue;
}
CheckValue<IkReal> x858=IKPowWithIntegerCheck(IKsign((((cj5*pp))+(((-1.0)*cj5*(pz*pz))))),-1);
if(!x858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x857.value)+(((1.5707963267949)*(x858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x859=IKsin(j4);
IkReal x860=IKcos(j4);
IkReal x861=((0.365134361057124)*sj6);
IkReal x862=((1.0)*py);
IkReal x863=((0.105246844966517)*cj6);
IkReal x864=(cj5*pz);
IkReal x865=((0.105246844966517)*sj6);
IkReal x866=((0.365134361057124)*cj6);
IkReal x867=(px*x859);
IkReal x868=(py*sj5*x860);
evalcond[0]=((((-1.0)*px*x860))+(((-1.0)*x859*x862)));
evalcond[1]=((-0.0405)+(((-0.86)*x868))+(((-1.0)*pp))+(((0.86)*sj5*x867))+(((0.86)*x864)));
evalcond[2]=((-0.43)+(((-1.0)*x865))+((sj5*x867))+x866+x864+(((-1.0)*sj5*x860*x862)));
evalcond[3]=((((-1.0)*cj5*x860*x862))+(((-1.0)*pz*sj5))+((cj5*x867))+x863+x861);
evalcond[4]=((((-0.43)*sj5))+((sj5*x866))+(((-1.0)*x860*x862))+(((-1.0)*sj5*x865))+((cj5*x863))+((cj5*x861))+x867);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x869=((43.0)*sj5);
IkReal x870=((50.0)*pp);
IkReal x871=((43.0)*cj5*pz);
CheckValue<IkReal> x872 = IKatan2WithCheck(IkReal(((((2.025)*px))+((px*x870))+(((-1.0)*px*x871)))),IkReal(((((-2.025)*py))+(((-1.0)*py*x870))+((py*x871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x872.valid){
continue;
}
CheckValue<IkReal> x873=IKPowWithIntegerCheck(IKsign((((pp*x869))+(((-1.0)*x869*(pz*pz))))),-1);
if(!x873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x872.value)+(((1.5707963267949)*(x873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x874=IKsin(j4);
IkReal x875=IKcos(j4);
IkReal x876=((0.365134361057124)*sj6);
IkReal x877=((1.0)*py);
IkReal x878=((0.105246844966517)*cj6);
IkReal x879=(cj5*pz);
IkReal x880=((0.105246844966517)*sj6);
IkReal x881=((0.365134361057124)*cj6);
IkReal x882=(px*x874);
IkReal x883=(py*sj5*x875);
evalcond[0]=((((-1.0)*px*x875))+(((-1.0)*x874*x877)));
evalcond[1]=((-0.0405)+(((0.86)*x879))+(((0.86)*sj5*x882))+(((-1.0)*pp))+(((-0.86)*x883)));
evalcond[2]=((-0.43)+(((-1.0)*x880))+((sj5*x882))+x879+x881+(((-1.0)*sj5*x875*x877)));
evalcond[3]=((((-1.0)*cj5*x875*x877))+((cj5*x882))+(((-1.0)*pz*sj5))+x878+x876);
evalcond[4]=((((-0.43)*sj5))+((sj5*x881))+(((-1.0)*x875*x877))+(((-1.0)*sj5*x880))+x882+((cj5*x878))+((cj5*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x885 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x885.valid){
continue;
}
IkReal x884=x885.value;
j4array[0]=((-1.0)*x884);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x884)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x886=cj4*cj4;
IkReal x887=px*px;
IkReal x888=py*py;
IkReal x889=pz*pz;
IkReal x890=(x886*x887);
IkReal x891=(x886*x888);
IkReal x892=(cj4*px*py*sj4);
j5eval[0]=((((-1.0)*x890))+x887+x889+x891+(((-2.0)*x892)));
j5eval[1]=IKsign(((((-43.0)*x890))+(((43.0)*x887))+(((43.0)*x889))+(((-86.0)*x892))+(((43.0)*x891))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x893=(px*sj4);
IkReal x894=(pz*sj6);
IkReal x895=(cj4*py);
IkReal x896=(cj6*pz);
IkReal x897=((3.46931407942238)*cj6);
IkReal x898=((0.365134361057124)*cj6);
IkReal x899=((0.105246844966517)*sj6);
j5eval[0]=((((4.08563316208479)*x895))+(((-1.0)*sj6*x893))+(((-1.0)*x895*x897))+(((3.46931407942238)*x894))+((sj6*x895))+((x893*x897))+(((-4.08563316208479)*x893))+x896);
j5eval[1]=IKsign(((((0.105246844966517)*x896))+(((-1.0)*x895*x898))+((x895*x899))+(((0.43)*x895))+(((-0.43)*x893))+((x893*x898))+(((-1.0)*x893*x899))+(((0.365134361057124)*x894))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x900=cj6*cj6;
IkReal x901=(cj6*sj6);
IkReal x902=(cj4*py);
IkReal x903=((0.365134361057124)*cj6);
IkReal x904=(px*sj4);
IkReal x905=((0.105246844966517)*sj6);
CheckValue<IkReal> x906=IKPowWithIntegerCheck(IKsign((((x903*x904))+(((-1.0)*x902*x903))+(((0.105246844966517)*cj6*pz))+((x902*x905))+(((0.43)*x902))+(((0.365134361057124)*pz*sj6))+(((-1.0)*x904*x905))+(((-0.43)*x904)))),-1);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(((-0.195976898375406)+(((-0.090512286671205)*sj6))+(((-0.122246203249188)*x900))+(pz*pz)+(((0.0768584789802549)*x901))+(((0.314015550509126)*cj6)))),IkReal(((0.0384292394901275)+(((-0.122246203249188)*x901))+(((-0.0768584789802549)*x900))+((pz*x902))+(((0.157007775254563)*sj6))+(((0.0452561433356025)*cj6))+(((-1.0)*pz*x904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x906.value)))+(x907.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x908=IKsin(j5);
IkReal x909=IKcos(j5);
IkReal x910=((0.105246844966517)*cj6);
IkReal x911=((0.105246844966517)*sj6);
IkReal x912=((0.365134361057124)*cj6);
IkReal x913=(px*sj4);
IkReal x914=((0.365134361057124)*sj6);
IkReal x915=((1.0)*cj4*py);
IkReal x916=(pz*x909);
IkReal x917=((0.86)*x908);
evalcond[0]=((-0.0405)+(((0.86)*x916))+(((-1.0)*pp))+(((-1.0)*cj4*py*x917))+((x913*x917)));
evalcond[1]=((-0.43)+(((-1.0)*x908*x915))+(((-1.0)*x911))+((x908*x913))+x912+x916);
evalcond[2]=(((x909*x913))+x910+x914+(((-1.0)*x909*x915))+(((-1.0)*pz*x908)));
evalcond[3]=(((x909*x912))+(((-1.0)*x908*x914))+(((-1.0)*x908*x910))+pz+(((-0.43)*x909))+(((-1.0)*x909*x911)));
evalcond[4]=(((x909*x914))+((x909*x910))+(((-1.0)*x908*x911))+(((-1.0)*x915))+((x908*x912))+(((-0.43)*x908))+x913);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x918=cj4*cj4;
IkReal x919=px*px;
IkReal x920=(cj4*py);
IkReal x921=(px*sj4);
IkReal x922=((15.7007775254563)*sj6);
IkReal x923=((4.52561433356025)*cj6);
IkReal x924=((50.0)*pp);
IkReal x925=((43.0)*x919);
CheckValue<IkReal> x926=IKPowWithIntegerCheck(IKsign(((((-86.0)*x920*x921))+(((43.0)*x918*(py*py)))+(((-1.0)*x918*x925))+x925+(((43.0)*(pz*pz))))),-1);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927 = IKatan2WithCheck(IkReal(((((2.025)*x921))+(((-2.025)*x920))+(((-1.0)*x920*x924))+((x921*x924))+((pz*x923))+((pz*x922)))),IkReal((((x920*x923))+((x920*x922))+(((2.025)*pz))+((pz*x924))+(((-1.0)*x921*x923))+(((-1.0)*x921*x922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x927.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x926.value)))+(x927.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x928=IKsin(j5);
IkReal x929=IKcos(j5);
IkReal x930=((0.105246844966517)*cj6);
IkReal x931=((0.105246844966517)*sj6);
IkReal x932=((0.365134361057124)*cj6);
IkReal x933=(px*sj4);
IkReal x934=((0.365134361057124)*sj6);
IkReal x935=((1.0)*cj4*py);
IkReal x936=(pz*x929);
IkReal x937=((0.86)*x928);
evalcond[0]=((-0.0405)+(((-1.0)*pp))+(((0.86)*x936))+(((-1.0)*cj4*py*x937))+((x933*x937)));
evalcond[1]=((-0.43)+(((-1.0)*x928*x935))+((x928*x933))+x936+x932+(((-1.0)*x931)));
evalcond[2]=((((-1.0)*x929*x935))+(((-1.0)*pz*x928))+x934+x930+((x929*x933)));
evalcond[3]=((((-0.43)*x929))+(((-1.0)*x928*x934))+(((-1.0)*x928*x930))+pz+(((-1.0)*x929*x931))+((x929*x932)));
evalcond[4]=((((-0.43)*x928))+(((-1.0)*x928*x931))+((x928*x932))+x933+((x929*x930))+((x929*x934))+(((-1.0)*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x88=((0.960879897518746)*cj6);
IkReal x89=((0.276965381490835)*sj6);
IkReal x90=((1.0)*sj4);
IkReal x91=(cj4*r11);
IkReal x92=(cj4*r10);
IkReal x93=(cj4*r12);
IkReal x94=(x89+(((-1.0)*x88)));
IkReal x95=(x88+(((-1.0)*x89)));
IkReal x96=((((0.960879897518746)*sj6))+(((0.276965381490835)*cj6)));
IkReal x97=(cj5*x95);
IkReal x98=(sj5*x96);
IkReal x99=(cj5*x96);
IkReal x100=(x98+((cj5*x94)));
IkReal x101=(x99+((sj5*x95)));
IkReal x102=((((-1.0)*x99))+((sj5*x94)));
IkReal x103=(x98+(((-1.0)*x97)));
IkReal x104=(cj4*x101);
new_r00=(((r10*sj4))+((cj4*r00)));
new_r01=(((r11*sj4))+((cj4*r01)));
new_r02=(((r12*sj4))+((cj4*r02)));
new_r10=(((x100*x92))+((r20*x102))+(((-1.0)*r00*x100*x90)));
new_r11=((((-1.0)*r01*x100*x90))+((x100*x91))+((r21*x102)));
new_r12=(((x100*x93))+((r22*x102))+(((-1.0)*r02*x100*x90)));
new_r20=((((-1.0)*r00*x101*x90))+((x101*x92))+((r20*x103)));
new_r21=(((x101*x91))+(((-1.0)*r01*x101*x90))+((r21*x103)));
new_r22=(((r22*((x98+(((-1.0)*x97))))))+((x101*x93))+(((-1.0)*r02*x101*x90)));
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
cj8array[0]=new_r22;
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r02;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].fmul = j7mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].fmul = j9mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].fmul = j7mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].fmul = j9mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x105=new_r22*new_r22;
IkReal x106=((16.0)*new_r10);
IkReal x107=((16.0)*new_r01);
IkReal x108=((16.0)*new_r00);
IkReal x109=(new_r11*new_r22);
IkReal x110=((8.0)*new_r00);
IkReal x111=(x105*x106);
IkReal x112=(x105*x107);
j7eval[0]=((IKabs(((((-1.0)*x111))+x106)))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x109))+(((-1.0)*x105*x108)))))+(IKabs((((new_r22*x110))+(((-8.0)*new_r11)))))+(IKabs(((((-1.0)*x112))+x107)))+(IKabs(((((-8.0)*x109))+((x105*x110)))))+(IKabs(((((-32.0)*new_r11*x105))+((new_r22*x108))+(((16.0)*new_r11)))))+(IKabs(((((-1.0)*x107))+x112)))+(IKabs(((((-1.0)*x106))+x111))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j9]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j7evalpoly[1];
IkReal x113=new_r22*new_r22;
IkReal x114=((16.0)*new_r01);
IkReal x115=(new_r00*new_r22);
IkReal x116=(x113*x114);
IkReal x117=((((8.0)*x115))+(((-8.0)*new_r11)));
op[0]=x117;
op[1]=((((-1.0)*x114))+x116);
op[2]=((((16.0)*x115))+(((16.0)*new_r11))+(((-32.0)*new_r11*x113)));
op[3]=((((-1.0)*x116))+x114);
op[4]=x117;
polyroots4(op,zeror,numroots);
IkReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[4]={true,true,true,true};
_nj7 = 4;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x118=new_r22*new_r22;
IkReal x119=((16.0)*new_r10);
IkReal x120=(new_r11*new_r22);
IkReal x121=((8.0)*x120);
IkReal x122=(new_r00*x118);
IkReal x123=((8.0)*x122);
IkReal x124=(x118*x119);
j7evalpoly[0]=((((htj7*htj7)*(((((32.0)*new_r00))+(((-16.0)*x122))+(((-16.0)*x120))))))+(((htj7*htj7*htj7)*(((((-1.0)*x124))+x119))))+(((htj7*htj7*htj7*htj7)*(((((-1.0)*x121))+x123))))+((htj7*(((((-1.0)*x119))+x124))))+(((-1.0)*x121))+x123);
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j9eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x125=new_r22*new_r22;
IkReal x126=cj7*cj7;
IkReal x127=(new_r22*sj7);
IkReal x128=(((x125*x126))+(((-1.0)*x125))+(((-1.0)*x126)));
j9eval[0]=x128;
j9eval[1]=IKsign(x128);
j9eval[2]=((IKabs((((new_r01*x127))+(((-1.0)*cj7*new_r00)))))+(IKabs((((new_r00*x127))+((cj7*new_r01))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=new_r22;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x129=IKsin(j9);
IkReal x130=IKcos(j9);
evalcond[0]=(x129+new_r11);
evalcond[1]=((-1.0)*x129);
evalcond[2]=((-1.0)*x130);
evalcond[3]=((((-1.0)*x130))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x131=IKsin(j9);
IkReal x132=IKcos(j9);
evalcond[0]=((-1.0)*x131);
evalcond[1]=((-1.0)*x132);
evalcond[2]=(x131+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x133=new_r22*new_r22;
CheckValue<IkReal> x134=IKPowWithIntegerCheck(((-1.0)+x133),-1);
if(!x134.valid){
continue;
}
if(((x133*(x134.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt((x133*(x134.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst12)))))+(IKabs(((-1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x135=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
cj7=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst12);
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((-1.0)+x135),-1);
if(!x136.valid){
continue;
}
if(((x135*(x136.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt((x135*(x136.value)));
j9eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
CheckValue<IkReal> x137=IKPowWithIntegerCheck(gconst12,-1);
if(!x137.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x137.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r01))))+IKsqr((new_r00*(x137.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r01))), (new_r00*(x137.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x138=IKsin(j9);
IkReal x139=IKcos(j9);
IkReal x140=((1.0)*x139);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x141=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
evalcond[0]=((-1.0)*x138);
evalcond[1]=((-1.0)*x139);
evalcond[2]=(((gconst12*x138))+new_r01);
evalcond[3]=((((-1.0)*gconst12*x140))+new_r00);
evalcond[4]=(((x138*x141))+new_r11);
evalcond[5]=((((-1.0)*x140*x141))+new_r10);
evalcond[6]=(((gconst12*new_r01))+((new_r11*x141))+x138);
evalcond[7]=((((-1.0)*x140))+((gconst12*new_r00))+((new_r10*x141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x142 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x142.valid){
continue;
}
CheckValue<IkReal> x143=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x143.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x142.value)+(((1.5707963267949)*(x143.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x144=IKsin(j9);
IkReal x145=IKcos(j9);
IkReal x146=((1.0)*x145);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x147=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
evalcond[0]=((-1.0)*x144);
evalcond[1]=((-1.0)*x145);
evalcond[2]=(((gconst12*x144))+new_r01);
evalcond[3]=((((-1.0)*gconst12*x146))+new_r00);
evalcond[4]=(((x144*x147))+new_r11);
evalcond[5]=((((-1.0)*x146*x147))+new_r10);
evalcond[6]=(((gconst12*new_r01))+((new_r11*x147))+x144);
evalcond[7]=((((-1.0)*x146))+((gconst12*new_r00))+((new_r10*x147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x148=new_r22*new_r22;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((-1.0)+x148),-1);
if(!x149.valid){
continue;
}
if(((x148*(x149.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt((x148*(x149.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst12)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x150=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))))));
cj7=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst12)));
CheckValue<IkReal> x151=IKPowWithIntegerCheck(((-1.0)+x150),-1);
if(!x151.valid){
continue;
}
if(((x150*(x151.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt((x150*(x151.value)));
j9eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
CheckValue<IkReal> x152=IKPowWithIntegerCheck(gconst12,-1);
if(!x152.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x152.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r01))))+IKsqr((new_r00*(x152.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r01))), (new_r00*(x152.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x153=IKsin(j9);
IkReal x154=IKcos(j9);
IkReal x155=((1.0)*x154);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x156=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x157=((1.0)*x156);
evalcond[0]=((-1.0)*x153);
evalcond[1]=((-1.0)*x154);
evalcond[2]=(((gconst12*x153))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst12*x155)));
evalcond[4]=(((x154*x156))+new_r10);
evalcond[5]=((((-1.0)*x153*x157))+new_r11);
evalcond[6]=(((gconst12*new_r01))+x153+(((-1.0)*new_r11*x157)));
evalcond[7]=(((gconst12*new_r00))+(((-1.0)*x155))+(((-1.0)*new_r10*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
CheckValue<IkReal> x159=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x159.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x158.value)+(((1.5707963267949)*(x159.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x160=IKsin(j9);
IkReal x161=IKcos(j9);
IkReal x162=((1.0)*x161);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x163=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x164=((1.0)*x163);
evalcond[0]=((-1.0)*x160);
evalcond[1]=((-1.0)*x161);
evalcond[2]=(((gconst12*x160))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst12*x162)));
evalcond[4]=(((x161*x163))+new_r10);
evalcond[5]=((((-1.0)*x160*x164))+new_r11);
evalcond[6]=(((gconst12*new_r01))+(((-1.0)*new_r11*x164))+x160);
evalcond[7]=(((gconst12*new_r00))+(((-1.0)*x162))+(((-1.0)*new_r10*x164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x165=new_r22*new_r22;
CheckValue<IkReal> x166=IKPowWithIntegerCheck(((-1.0)+x165),-1);
if(!x166.valid){
continue;
}
if(((x165*(x166.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt((x165*(x166.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs((cj7+(((-1.0)*gconst13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x167=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
cj7=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst13);
CheckValue<IkReal> x168=IKPowWithIntegerCheck(((-1.0)+x167),-1);
if(!x168.valid){
continue;
}
if(((x167*(x168.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt((x167*(x168.value)))));
j9eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(gconst13,-1);
if(!x169.valid){
continue;
}
if( IKabs(((((-1.0)*gconst13*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x169.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst13*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))))+IKsqr((new_r00*(x169.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*gconst13*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))), (new_r00*(x169.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x170=IKsin(j9);
IkReal x171=IKcos(j9);
IkReal x172=((1.0)*x171);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x173=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
evalcond[0]=((-1.0)*x170);
evalcond[1]=((-1.0)*x171);
evalcond[2]=(new_r01+((gconst13*x170)));
evalcond[3]=((((-1.0)*gconst13*x172))+new_r00);
evalcond[4]=(((x170*x173))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x172*x173)));
evalcond[6]=(((new_r11*x173))+x170+((gconst13*new_r01)));
evalcond[7]=(((new_r10*x173))+(((-1.0)*x172))+((gconst13*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x174.valid){
continue;
}
CheckValue<IkReal> x175=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x175.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x174.value)+(((1.5707963267949)*(x175.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x176=IKsin(j9);
IkReal x177=IKcos(j9);
IkReal x178=((1.0)*x177);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x179=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
evalcond[0]=((-1.0)*x176);
evalcond[1]=((-1.0)*x177);
evalcond[2]=(new_r01+((gconst13*x176)));
evalcond[3]=((((-1.0)*gconst13*x178))+new_r00);
evalcond[4]=(((x176*x179))+new_r11);
evalcond[5]=((((-1.0)*x178*x179))+new_r10);
evalcond[6]=(((new_r11*x179))+x176+((gconst13*new_r01)));
evalcond[7]=(((new_r10*x179))+(((-1.0)*x178))+((gconst13*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x180=new_r22*new_r22;
CheckValue<IkReal> x181=IKPowWithIntegerCheck(((-1.0)+x180),-1);
if(!x181.valid){
continue;
}
if(((x180*(x181.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt((x180*(x181.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst13)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x182=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))));
cj7=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst13)));
CheckValue<IkReal> x183=IKPowWithIntegerCheck(((-1.0)+x182),-1);
if(!x183.valid){
continue;
}
if(((x182*(x183.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt((x182*(x183.value)))));
j9eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
CheckValue<IkReal> x184=IKPowWithIntegerCheck(gconst13,-1);
if(!x184.valid){
continue;
}
if( IKabs(((((-1.0)*gconst13*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x184.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst13*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))))+IKsqr((new_r00*(x184.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*gconst13*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))), (new_r00*(x184.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x185=IKsin(j9);
IkReal x186=IKcos(j9);
IkReal x187=((1.0)*x186);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x188=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x189=((1.0)*x188);
evalcond[0]=((-1.0)*x185);
evalcond[1]=((-1.0)*x186);
evalcond[2]=(((gconst13*x185))+new_r01);
evalcond[3]=((((-1.0)*gconst13*x187))+new_r00);
evalcond[4]=(((x186*x188))+new_r10);
evalcond[5]=((((-1.0)*x185*x189))+new_r11);
evalcond[6]=(x185+(((-1.0)*new_r11*x189))+((gconst13*new_r01)));
evalcond[7]=((((-1.0)*x187))+((gconst13*new_r00))+(((-1.0)*new_r10*x189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x190 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x191.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x190.value)+(((1.5707963267949)*(x191.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x192=IKsin(j9);
IkReal x193=IKcos(j9);
IkReal x194=((1.0)*x193);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x195=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x196=((1.0)*x195);
evalcond[0]=((-1.0)*x192);
evalcond[1]=((-1.0)*x193);
evalcond[2]=(new_r01+((gconst13*x192)));
evalcond[3]=(new_r00+(((-1.0)*gconst13*x194)));
evalcond[4]=(((x193*x195))+new_r10);
evalcond[5]=((((-1.0)*x192*x196))+new_r11);
evalcond[6]=(x192+(((-1.0)*new_r11*x196))+((gconst13*new_r01)));
evalcond[7]=((((-1.0)*x194))+(((-1.0)*new_r10*x196))+((gconst13*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x197=((1.0)*new_r11);
IkReal x198=((1.0)*cj7*new_r01);
CheckValue<IkReal> x199=IKPowWithIntegerCheck(cj7,-1);
if(!x199.valid){
continue;
}
if( IKabs(((((-1.0)*x198))+(((-1.0)*sj7*x197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x199.value)*((((new_r11*new_r22*(cj7*cj7)))+(((-1.0)*new_r22*x197))+new_r00+(((-1.0)*new_r22*sj7*x198)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x198))+(((-1.0)*sj7*x197))))+IKsqr(((x199.value)*((((new_r11*new_r22*(cj7*cj7)))+(((-1.0)*new_r22*x197))+new_r00+(((-1.0)*new_r22*sj7*x198))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x198))+(((-1.0)*sj7*x197))), ((x199.value)*((((new_r11*new_r22*(cj7*cj7)))+(((-1.0)*new_r22*x197))+new_r00+(((-1.0)*new_r22*sj7*x198))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x200=IKsin(j9);
IkReal x201=IKcos(j9);
IkReal x202=(cj7*new_r22);
IkReal x203=(new_r22*sj7);
IkReal x204=((1.0)*new_r01);
IkReal x205=((1.0)*new_r00);
IkReal x206=((1.0)*x201);
IkReal x207=((1.0)*x200);
evalcond[0]=(((new_r11*sj7))+x200+((cj7*new_r01)));
evalcond[1]=(((new_r10*sj7))+(((-1.0)*x206))+((cj7*new_r00)));
evalcond[2]=(((x201*x203))+new_r01+((cj7*x200)));
evalcond[3]=(((x200*x203))+(((-1.0)*cj7*x206))+new_r00);
evalcond[4]=((((-1.0)*x202*x206))+new_r11+((sj7*x200)));
evalcond[5]=((((-1.0)*new_r22*x207))+(((-1.0)*sj7*x205))+((cj7*new_r10)));
evalcond[6]=((((-1.0)*new_r22*x206))+(((-1.0)*sj7*x204))+((cj7*new_r11)));
evalcond[7]=((((-1.0)*x202*x207))+(((-1.0)*sj7*x206))+new_r10);
evalcond[8]=((((-1.0)*x203*x205))+((new_r10*x202))+(((-1.0)*x207)));
evalcond[9]=(((new_r11*x202))+(((-1.0)*x203*x204))+(((-1.0)*x206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x208=((1.0)*new_r01);
CheckValue<IkReal> x209=IKPowWithIntegerCheck(new_r22,-1);
if(!x209.valid){
continue;
}
if( IKabs(((((-1.0)*cj7*x208))+(((-1.0)*new_r11*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x209.value)*(((((-1.0)*sj7*x208))+((cj7*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x208))+(((-1.0)*new_r11*sj7))))+IKsqr(((x209.value)*(((((-1.0)*sj7*x208))+((cj7*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*x208))+(((-1.0)*new_r11*sj7))), ((x209.value)*(((((-1.0)*sj7*x208))+((cj7*new_r11))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x210=IKsin(j9);
IkReal x211=IKcos(j9);
IkReal x212=(cj7*new_r22);
IkReal x213=(new_r22*sj7);
IkReal x214=((1.0)*new_r01);
IkReal x215=((1.0)*new_r00);
IkReal x216=((1.0)*x211);
IkReal x217=((1.0)*x210);
evalcond[0]=(((new_r11*sj7))+x210+((cj7*new_r01)));
evalcond[1]=(((new_r10*sj7))+(((-1.0)*x216))+((cj7*new_r00)));
evalcond[2]=(((cj7*x210))+((x211*x213))+new_r01);
evalcond[3]=(((x210*x213))+new_r00+(((-1.0)*cj7*x216)));
evalcond[4]=(((sj7*x210))+new_r11+(((-1.0)*x212*x216)));
evalcond[5]=((((-1.0)*sj7*x215))+(((-1.0)*new_r22*x217))+((cj7*new_r10)));
evalcond[6]=((((-1.0)*sj7*x214))+(((-1.0)*new_r22*x216))+((cj7*new_r11)));
evalcond[7]=((((-1.0)*sj7*x216))+new_r10+(((-1.0)*x212*x217)));
evalcond[8]=((((-1.0)*x213*x215))+(((-1.0)*x217))+((new_r10*x212)));
evalcond[9]=((((-1.0)*x213*x214))+(((-1.0)*x216))+((new_r11*x212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x218=new_r22*new_r22;
IkReal x219=cj7*cj7;
IkReal x220=(new_r22*sj7);
CheckValue<IkReal> x221=IKPowWithIntegerCheck(IKsign((((x218*x219))+(((-1.0)*x218))+(((-1.0)*x219)))),-1);
if(!x221.valid){
continue;
}
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal((((new_r00*x220))+((cj7*new_r01)))),IkReal((((new_r01*x220))+(((-1.0)*cj7*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x221.value)))+(x222.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x223=IKsin(j9);
IkReal x224=IKcos(j9);
IkReal x225=(cj7*new_r22);
IkReal x226=(new_r22*sj7);
IkReal x227=((1.0)*new_r01);
IkReal x228=((1.0)*new_r00);
IkReal x229=((1.0)*x224);
IkReal x230=((1.0)*x223);
evalcond[0]=(((new_r11*sj7))+x223+((cj7*new_r01)));
evalcond[1]=(((new_r10*sj7))+((cj7*new_r00))+(((-1.0)*x229)));
evalcond[2]=(((x224*x226))+((cj7*x223))+new_r01);
evalcond[3]=((((-1.0)*cj7*x229))+((x223*x226))+new_r00);
evalcond[4]=(((sj7*x223))+(((-1.0)*x225*x229))+new_r11);
evalcond[5]=((((-1.0)*new_r22*x230))+((cj7*new_r10))+(((-1.0)*sj7*x228)));
evalcond[6]=((((-1.0)*new_r22*x229))+((cj7*new_r11))+(((-1.0)*sj7*x227)));
evalcond[7]=((((-1.0)*x225*x230))+new_r10+(((-1.0)*sj7*x229)));
evalcond[8]=((((-1.0)*x230))+((new_r10*x225))+(((-1.0)*x226*x228)));
evalcond[9]=(((new_r11*x225))+(((-1.0)*x226*x227))+(((-1.0)*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x232=IKPowWithIntegerCheck(sj8,-1);
if(!x232.valid){
continue;
}
IkReal x231=x232.value;
CheckValue<IkReal> x233=IKPowWithIntegerCheck(new_r02,-1);
if(!x233.valid){
continue;
}
if( IKabs((x231*(x233.value)*(((1.0)+(((-1.0)*(new_r12*new_r12)))+(((-1.0)*(cj8*cj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x231)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x231*(x233.value)*(((1.0)+(((-1.0)*(new_r12*new_r12)))+(((-1.0)*(cj8*cj8)))))))+IKsqr(((-1.0)*new_r12*x231))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x231*(x233.value)*(((1.0)+(((-1.0)*(new_r12*new_r12)))+(((-1.0)*(cj8*cj8)))))), ((-1.0)*new_r12*x231));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x234=IKcos(j7);
IkReal x235=IKsin(j7);
IkReal x236=((1.0)*sj8);
IkReal x237=(new_r02*x235);
IkReal x238=(sj8*x235);
IkReal x239=(new_r12*x234);
evalcond[0]=(((sj8*x234))+new_r12);
evalcond[1]=((((-1.0)*x235*x236))+new_r02);
evalcond[2]=(((new_r02*x234))+((new_r12*x235)));
evalcond[3]=(sj8+x239+(((-1.0)*x237)));
evalcond[4]=(((cj8*x239))+(((-1.0)*cj8*x237))+((new_r22*sj8)));
evalcond[5]=(((cj8*new_r20))+((new_r00*x238))+(((-1.0)*new_r10*x234*x236)));
evalcond[6]=(((cj8*new_r21))+((new_r01*x238))+(((-1.0)*new_r11*x234*x236)));
evalcond[7]=((-1.0)+((cj8*new_r22))+((sj8*x237))+(((-1.0)*x236*x239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=cj8;
j9eval[2]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x240=((1.0)*sj7);
if( IKabs(((((-1.0)*new_r00*x240))+(((-1.0)*cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x240))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x240))+(((-1.0)*cj7*new_r01))))+IKsqr(((((-1.0)*new_r01*x240))+((cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*x240))+(((-1.0)*cj7*new_r01))), ((((-1.0)*new_r01*x240))+((cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x241=IKcos(j9);
IkReal x242=IKsin(j9);
IkReal x243=((1.0)*cj7);
IkReal x244=((1.0)*sj7);
IkReal x245=(sj7*x242);
IkReal x246=((1.0)*x241);
IkReal x247=(x241*x243);
evalcond[0]=(((new_r11*sj7))+x242+((cj7*new_r01)));
evalcond[1]=(((new_r10*sj7))+(((-1.0)*x246))+((cj7*new_r00)));
evalcond[2]=(((cj7*x242))+((sj7*x241))+new_r01);
evalcond[3]=(x245+(((-1.0)*x247))+new_r00);
evalcond[4]=(x245+(((-1.0)*x247))+new_r11);
evalcond[5]=((((-1.0)*x242))+(((-1.0)*new_r00*x244))+((cj7*new_r10)));
evalcond[6]=((((-1.0)*new_r01*x244))+(((-1.0)*x246))+((cj7*new_r11)));
evalcond[7]=((((-1.0)*x242*x243))+(((-1.0)*x241*x244))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x248=((1.0)*cj7);
if( IKabs(((((-1.0)*new_r01*x248))+(((-1.0)*new_r11*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj7))+(((-1.0)*new_r11*x248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x248))+(((-1.0)*new_r11*sj7))))+IKsqr((((new_r01*sj7))+(((-1.0)*new_r11*x248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r01*x248))+(((-1.0)*new_r11*sj7))), (((new_r01*sj7))+(((-1.0)*new_r11*x248))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x249=IKsin(j9);
IkReal x250=IKcos(j9);
IkReal x251=((1.0)*sj7);
IkReal x252=(cj7*x249);
IkReal x253=((1.0)*x250);
IkReal x254=(sj7*x249);
IkReal x255=(x250*x251);
evalcond[0]=(((new_r11*sj7))+x249+((cj7*new_r01)));
evalcond[1]=(x249+(((-1.0)*new_r00*x251))+((cj7*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x251))+x250+((cj7*new_r11)));
evalcond[3]=(((new_r10*sj7))+((cj7*new_r00))+(((-1.0)*x253)));
evalcond[4]=(((cj7*x250))+x254+new_r11);
evalcond[5]=(x252+new_r01+(((-1.0)*x255)));
evalcond[6]=(x252+new_r10+(((-1.0)*x255)));
evalcond[7]=((((-1.0)*cj7*x253))+(((-1.0)*x249*x251))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r20, new_r21);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x256=IKsin(j9);
IkReal x257=IKcos(j9);
IkReal x258=((1.0)*x257);
evalcond[0]=(new_r20+(((-1.0)*x256)));
evalcond[1]=(new_r21+(((-1.0)*x258)));
evalcond[2]=(((cj7*x256))+new_r01);
evalcond[3]=(((sj7*x256))+new_r11);
evalcond[4]=((((-1.0)*cj7*x258))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x258)));
evalcond[6]=(((new_r11*sj7))+x256+((cj7*new_r01)));
evalcond[7]=(((new_r10*sj7))+((cj7*new_r00))+(((-1.0)*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x259=IKsin(j9);
IkReal x260=IKcos(j9);
IkReal x261=((1.0)*x260);
evalcond[0]=(x259+new_r20);
evalcond[1]=(x260+new_r21);
evalcond[2]=(((cj7*x259))+new_r01);
evalcond[3]=(((sj7*x259))+new_r11);
evalcond[4]=(new_r10+((new_r02*x260)));
evalcond[5]=(new_r00+(((-1.0)*cj7*x261)));
evalcond[6]=(((new_r11*sj7))+x259+((cj7*new_r01)));
evalcond[7]=(((new_r10*sj7))+(((-1.0)*x261))+((cj7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x262=IKsin(j9);
IkReal x263=IKcos(j9);
IkReal x264=((1.0)*cj8);
IkReal x265=((1.0)*x263);
IkReal x266=((1.0)*x262);
evalcond[0]=(x262+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x265)));
evalcond[2]=((((-1.0)*sj8*x266))+new_r20);
evalcond[3]=((((-1.0)*sj8*x265))+new_r21);
evalcond[4]=((((-1.0)*x263*x264))+new_r11);
evalcond[5]=((((-1.0)*x262*x264))+new_r10);
evalcond[6]=(((new_r20*sj8))+((cj8*new_r10))+(((-1.0)*x266)));
evalcond[7]=(((cj8*new_r11))+((new_r21*sj8))+(((-1.0)*x265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x267=IKsin(j9);
IkReal x268=IKcos(j9);
IkReal x269=((1.0)*cj8);
IkReal x270=((1.0)*sj8);
IkReal x271=((1.0)*x268);
evalcond[0]=(x267+(((-1.0)*new_r01)));
evalcond[1]=(((cj8*x268))+new_r11);
evalcond[2]=(new_r20+(((-1.0)*x267*x270)));
evalcond[3]=((((-1.0)*x268*x270))+new_r21);
evalcond[4]=((((-1.0)*x271))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x267*x269)));
evalcond[6]=((((-1.0)*x267))+((new_r20*sj8))+(((-1.0)*new_r10*x269)));
evalcond[7]=((((-1.0)*new_r11*x269))+(((-1.0)*x271))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x272=IKcos(j9);
IkReal x273=IKsin(j9);
IkReal x274=((1.0)*cj8);
IkReal x275=((1.0)*x272);
IkReal x276=((1.0)*x273);
evalcond[0]=(x273+new_r11);
evalcond[1]=((((-1.0)*x275))+new_r10);
evalcond[2]=(((cj8*x272))+new_r01);
evalcond[3]=(((cj8*x273))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*sj8*x276)));
evalcond[5]=(new_r21+(((-1.0)*sj8*x275)));
evalcond[6]=(((new_r20*sj8))+(((-1.0)*new_r00*x274))+(((-1.0)*x276)));
evalcond[7]=((((-1.0)*new_r01*x274))+(((-1.0)*x275))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x277=IKsin(j9);
IkReal x278=IKcos(j9);
IkReal x279=((1.0)*cj8);
IkReal x280=((1.0)*sj8);
IkReal x281=((1.0)*x278);
evalcond[0]=(x277+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x277*x280))+new_r20);
evalcond[2]=(new_r21+(((-1.0)*x278*x280)));
evalcond[3]=((((-1.0)*x278*x279))+new_r01);
evalcond[4]=((((-1.0)*x277*x279))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x281)));
evalcond[6]=(((new_r20*sj8))+(((-1.0)*x277))+((cj8*new_r00)));
evalcond[7]=(((cj8*new_r01))+(((-1.0)*x281))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=1.0;
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x283=IKPowWithIntegerCheck(sj8,-1);
if(!x283.valid){
continue;
}
IkReal x282=x283.value;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(cj8,-1);
if(!x284.valid){
continue;
}
CheckValue<IkReal> x285=IKPowWithIntegerCheck(sj7,-1);
if(!x285.valid){
continue;
}
if( IKabs((new_r20*x282)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x282*(x284.value)*(x285.value)*(((((-1.0)*new_r01*sj8))+(((-1.0)*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x282))+IKsqr((x282*(x284.value)*(x285.value)*(((((-1.0)*new_r01*sj8))+(((-1.0)*cj7*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x282), (x282*(x284.value)*(x285.value)*(((((-1.0)*new_r01*sj8))+(((-1.0)*cj7*new_r20))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x286=IKsin(j9);
IkReal x287=IKcos(j9);
IkReal x288=((1.0)*sj7);
IkReal x289=(cj7*cj8);
IkReal x290=((1.0)*x287);
IkReal x291=(sj7*x286);
IkReal x292=((1.0)*x286);
evalcond[0]=(new_r20+(((-1.0)*sj8*x292)));
evalcond[1]=(new_r21+(((-1.0)*sj8*x290)));
evalcond[2]=(((new_r11*sj7))+x286+((cj7*new_r01)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x290))+((cj7*new_r00)));
evalcond[4]=(((cj7*x286))+((cj8*sj7*x287))+new_r01);
evalcond[5]=(((cj8*x291))+(((-1.0)*cj7*x290))+new_r00);
evalcond[6]=((((-1.0)*x289*x290))+x291+new_r11);
evalcond[7]=((((-1.0)*cj8*x292))+(((-1.0)*new_r00*x288))+((cj7*new_r10)));
evalcond[8]=((((-1.0)*cj8*x290))+(((-1.0)*new_r01*x288))+((cj7*new_r11)));
evalcond[9]=((((-1.0)*x287*x288))+(((-1.0)*x289*x292))+new_r10);
evalcond[10]=(((new_r20*sj8))+(((-1.0)*x292))+(((-1.0)*cj8*new_r00*x288))+((new_r10*x289)));
evalcond[11]=((((-1.0)*cj8*new_r01*x288))+(((-1.0)*x290))+((new_r21*sj8))+((new_r11*x289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x294=IKPowWithIntegerCheck(sj8,-1);
if(!x294.valid){
continue;
}
IkReal x293=x294.value;
CheckValue<IkReal> x295=IKPowWithIntegerCheck(cj7,-1);
if(!x295.valid){
continue;
}
if( IKabs((new_r20*x293)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x293*(x295.value)*((((new_r00*sj8))+((cj8*new_r20*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x293))+IKsqr((x293*(x295.value)*((((new_r00*sj8))+((cj8*new_r20*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x293), (x293*(x295.value)*((((new_r00*sj8))+((cj8*new_r20*sj7))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x296=IKsin(j9);
IkReal x297=IKcos(j9);
IkReal x298=((1.0)*sj7);
IkReal x299=(cj7*cj8);
IkReal x300=((1.0)*x297);
IkReal x301=(sj7*x296);
IkReal x302=((1.0)*x296);
evalcond[0]=(new_r20+(((-1.0)*sj8*x302)));
evalcond[1]=(new_r21+(((-1.0)*sj8*x300)));
evalcond[2]=(((new_r11*sj7))+x296+((cj7*new_r01)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x300))+((cj7*new_r00)));
evalcond[4]=(((cj8*sj7*x297))+((cj7*x296))+new_r01);
evalcond[5]=(((cj8*x301))+(((-1.0)*cj7*x300))+new_r00);
evalcond[6]=(x301+(((-1.0)*x299*x300))+new_r11);
evalcond[7]=((((-1.0)*cj8*x302))+(((-1.0)*new_r00*x298))+((cj7*new_r10)));
evalcond[8]=((((-1.0)*new_r01*x298))+(((-1.0)*cj8*x300))+((cj7*new_r11)));
evalcond[9]=((((-1.0)*x297*x298))+(((-1.0)*x299*x302))+new_r10);
evalcond[10]=((((-1.0)*cj8*new_r00*x298))+((new_r20*sj8))+((new_r10*x299))+(((-1.0)*x302)));
evalcond[11]=(((new_r11*x299))+(((-1.0)*cj8*new_r01*x298))+((new_r21*sj8))+(((-1.0)*x300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x303=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x303.valid){
continue;
}
CheckValue<IkReal> x304 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x304.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x303.value)))+(x304.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x305=IKsin(j9);
IkReal x306=IKcos(j9);
IkReal x307=((1.0)*sj7);
IkReal x308=(cj7*cj8);
IkReal x309=((1.0)*x306);
IkReal x310=(sj7*x305);
IkReal x311=((1.0)*x305);
evalcond[0]=((((-1.0)*sj8*x311))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj8*x309)));
evalcond[2]=(((new_r11*sj7))+x305+((cj7*new_r01)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x309))+((cj7*new_r00)));
evalcond[4]=(((cj7*x305))+((cj8*sj7*x306))+new_r01);
evalcond[5]=((((-1.0)*cj7*x309))+((cj8*x310))+new_r00);
evalcond[6]=((((-1.0)*x308*x309))+x310+new_r11);
evalcond[7]=((((-1.0)*cj8*x311))+(((-1.0)*new_r00*x307))+((cj7*new_r10)));
evalcond[8]=((((-1.0)*new_r01*x307))+(((-1.0)*cj8*x309))+((cj7*new_r11)));
evalcond[9]=((((-1.0)*x308*x311))+(((-1.0)*x306*x307))+new_r10);
evalcond[10]=(((new_r20*sj8))+((new_r10*x308))+(((-1.0)*cj8*new_r00*x307))+(((-1.0)*x311)));
evalcond[11]=((((-1.0)*cj8*new_r01*x307))+((new_r11*x308))+((new_r21*sj8))+(((-1.0)*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x312=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x312.valid){
continue;
}
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x312.value)))+(x313.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x314=IKcos(j7);
IkReal x315=IKsin(j7);
IkReal x316=((1.0)*sj8);
IkReal x317=(new_r02*x315);
IkReal x318=(sj8*x315);
IkReal x319=(new_r12*x314);
evalcond[0]=(((sj8*x314))+new_r12);
evalcond[1]=((((-1.0)*x315*x316))+new_r02);
evalcond[2]=(((new_r02*x314))+((new_r12*x315)));
evalcond[3]=(sj8+x319+(((-1.0)*x317)));
evalcond[4]=(((new_r22*sj8))+((cj8*x319))+(((-1.0)*cj8*x317)));
evalcond[5]=(((cj8*new_r20))+(((-1.0)*new_r10*x314*x316))+((new_r00*x318)));
evalcond[6]=(((cj8*new_r21))+((new_r01*x318))+(((-1.0)*new_r11*x314*x316)));
evalcond[7]=((-1.0)+((cj8*new_r22))+((sj8*x317))+(((-1.0)*x316*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=cj8;
j9eval[2]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x320=((1.0)*sj7);
if( IKabs(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x320)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x320))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x320))))+IKsqr(((((-1.0)*new_r01*x320))+((cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x320))), ((((-1.0)*new_r01*x320))+((cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x321=IKcos(j9);
IkReal x322=IKsin(j9);
IkReal x323=((1.0)*cj7);
IkReal x324=((1.0)*sj7);
IkReal x325=(sj7*x322);
IkReal x326=((1.0)*x321);
IkReal x327=(x321*x323);
evalcond[0]=(((new_r11*sj7))+x322+((cj7*new_r01)));
evalcond[1]=(((new_r10*sj7))+(((-1.0)*x326))+((cj7*new_r00)));
evalcond[2]=(((sj7*x321))+((cj7*x322))+new_r01);
evalcond[3]=((((-1.0)*x327))+x325+new_r00);
evalcond[4]=((((-1.0)*x327))+x325+new_r11);
evalcond[5]=((((-1.0)*x322))+(((-1.0)*new_r00*x324))+((cj7*new_r10)));
evalcond[6]=((((-1.0)*x326))+(((-1.0)*new_r01*x324))+((cj7*new_r11)));
evalcond[7]=((((-1.0)*x321*x324))+(((-1.0)*x322*x323))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x328=((1.0)*cj7);
if( IKabs(((((-1.0)*new_r01*x328))+(((-1.0)*new_r11*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj7))+(((-1.0)*new_r11*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x328))+(((-1.0)*new_r11*sj7))))+IKsqr((((new_r01*sj7))+(((-1.0)*new_r11*x328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r01*x328))+(((-1.0)*new_r11*sj7))), (((new_r01*sj7))+(((-1.0)*new_r11*x328))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x329=IKsin(j9);
IkReal x330=IKcos(j9);
IkReal x331=((1.0)*sj7);
IkReal x332=(cj7*x329);
IkReal x333=((1.0)*x330);
IkReal x334=(sj7*x329);
IkReal x335=(x330*x331);
evalcond[0]=(((new_r11*sj7))+x329+((cj7*new_r01)));
evalcond[1]=(x329+(((-1.0)*new_r00*x331))+((cj7*new_r10)));
evalcond[2]=(x330+(((-1.0)*new_r01*x331))+((cj7*new_r11)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x333))+((cj7*new_r00)));
evalcond[4]=(x334+((cj7*x330))+new_r11);
evalcond[5]=(x332+(((-1.0)*x335))+new_r01);
evalcond[6]=(x332+(((-1.0)*x335))+new_r10);
evalcond[7]=((((-1.0)*cj7*x333))+(((-1.0)*x329*x331))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r20, new_r21);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x336=IKsin(j9);
IkReal x337=IKcos(j9);
IkReal x338=((1.0)*x337);
evalcond[0]=((((-1.0)*x336))+new_r20);
evalcond[1]=((((-1.0)*x338))+new_r21);
evalcond[2]=(((cj7*x336))+new_r01);
evalcond[3]=(new_r11+((sj7*x336)));
evalcond[4]=((((-1.0)*cj7*x338))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x338)));
evalcond[6]=(((new_r11*sj7))+x336+((cj7*new_r01)));
evalcond[7]=(((new_r10*sj7))+(((-1.0)*x338))+((cj7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x339=IKsin(j9);
IkReal x340=IKcos(j9);
IkReal x341=((1.0)*x340);
evalcond[0]=(x339+new_r20);
evalcond[1]=(x340+new_r21);
evalcond[2]=(((cj7*x339))+new_r01);
evalcond[3]=(new_r11+((sj7*x339)));
evalcond[4]=(((new_r02*x340))+new_r10);
evalcond[5]=((((-1.0)*cj7*x341))+new_r00);
evalcond[6]=(((new_r11*sj7))+x339+((cj7*new_r01)));
evalcond[7]=(((new_r10*sj7))+(((-1.0)*x341))+((cj7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x342=IKsin(j9);
IkReal x343=IKcos(j9);
IkReal x344=((1.0)*cj8);
IkReal x345=((1.0)*x343);
IkReal x346=((1.0)*x342);
evalcond[0]=(x342+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x345)));
evalcond[2]=((((-1.0)*sj8*x346))+new_r20);
evalcond[3]=((((-1.0)*sj8*x345))+new_r21);
evalcond[4]=((((-1.0)*x343*x344))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x342*x344)));
evalcond[6]=(((new_r20*sj8))+((cj8*new_r10))+(((-1.0)*x346)));
evalcond[7]=(((cj8*new_r11))+((new_r21*sj8))+(((-1.0)*x345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x347=IKsin(j9);
IkReal x348=IKcos(j9);
IkReal x349=((1.0)*cj8);
IkReal x350=((1.0)*sj8);
IkReal x351=((1.0)*x348);
evalcond[0]=(x347+(((-1.0)*new_r01)));
evalcond[1]=(((cj8*x348))+new_r11);
evalcond[2]=((((-1.0)*x347*x350))+new_r20);
evalcond[3]=((((-1.0)*x348*x350))+new_r21);
evalcond[4]=((((-1.0)*x351))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x347*x349))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r10*x349))+((new_r20*sj8))+(((-1.0)*x347)));
evalcond[7]=((((-1.0)*new_r11*x349))+(((-1.0)*x351))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x352=IKcos(j9);
IkReal x353=IKsin(j9);
IkReal x354=((1.0)*cj8);
IkReal x355=((1.0)*x352);
IkReal x356=((1.0)*x353);
evalcond[0]=(x353+new_r11);
evalcond[1]=((((-1.0)*x355))+new_r10);
evalcond[2]=(((cj8*x352))+new_r01);
evalcond[3]=(((cj8*x353))+new_r00);
evalcond[4]=((((-1.0)*sj8*x356))+new_r20);
evalcond[5]=((((-1.0)*sj8*x355))+new_r21);
evalcond[6]=(((new_r20*sj8))+(((-1.0)*x356))+(((-1.0)*new_r00*x354)));
evalcond[7]=((((-1.0)*x355))+(((-1.0)*new_r01*x354))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x357=IKsin(j9);
IkReal x358=IKcos(j9);
IkReal x359=((1.0)*cj8);
IkReal x360=((1.0)*sj8);
IkReal x361=((1.0)*x358);
evalcond[0]=(x357+(((-1.0)*new_r11)));
evalcond[1]=(new_r20+(((-1.0)*x357*x360)));
evalcond[2]=((((-1.0)*x358*x360))+new_r21);
evalcond[3]=((((-1.0)*x358*x359))+new_r01);
evalcond[4]=((((-1.0)*x357*x359))+new_r00);
evalcond[5]=((((-1.0)*x361))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r20*sj8))+(((-1.0)*x357))+((cj8*new_r00)));
evalcond[7]=((((-1.0)*x361))+((cj8*new_r01))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=1.0;
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x363=IKPowWithIntegerCheck(sj8,-1);
if(!x363.valid){
continue;
}
IkReal x362=x363.value;
CheckValue<IkReal> x364=IKPowWithIntegerCheck(cj8,-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365=IKPowWithIntegerCheck(sj7,-1);
if(!x365.valid){
continue;
}
if( IKabs((new_r20*x362)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x362*(x364.value)*(x365.value)*(((((-1.0)*new_r01*sj8))+(((-1.0)*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x362))+IKsqr((x362*(x364.value)*(x365.value)*(((((-1.0)*new_r01*sj8))+(((-1.0)*cj7*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x362), (x362*(x364.value)*(x365.value)*(((((-1.0)*new_r01*sj8))+(((-1.0)*cj7*new_r20))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x366=IKsin(j9);
IkReal x367=IKcos(j9);
IkReal x368=((1.0)*sj7);
IkReal x369=(cj7*cj8);
IkReal x370=((1.0)*x367);
IkReal x371=(sj7*x366);
IkReal x372=((1.0)*x366);
evalcond[0]=((((-1.0)*sj8*x372))+new_r20);
evalcond[1]=((((-1.0)*sj8*x370))+new_r21);
evalcond[2]=(((new_r11*sj7))+x366+((cj7*new_r01)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x370))+((cj7*new_r00)));
evalcond[4]=(((cj7*x366))+((cj8*sj7*x367))+new_r01);
evalcond[5]=((((-1.0)*cj7*x370))+((cj8*x371))+new_r00);
evalcond[6]=(x371+(((-1.0)*x369*x370))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x368))+(((-1.0)*cj8*x372))+((cj7*new_r10)));
evalcond[8]=((((-1.0)*cj8*x370))+(((-1.0)*new_r01*x368))+((cj7*new_r11)));
evalcond[9]=((((-1.0)*x367*x368))+(((-1.0)*x369*x372))+new_r10);
evalcond[10]=(((new_r20*sj8))+(((-1.0)*x372))+(((-1.0)*cj8*new_r00*x368))+((new_r10*x369)));
evalcond[11]=((((-1.0)*cj8*new_r01*x368))+(((-1.0)*x370))+((new_r21*sj8))+((new_r11*x369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x374=IKPowWithIntegerCheck(sj8,-1);
if(!x374.valid){
continue;
}
IkReal x373=x374.value;
CheckValue<IkReal> x375=IKPowWithIntegerCheck(cj7,-1);
if(!x375.valid){
continue;
}
if( IKabs((new_r20*x373)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x373*(x375.value)*((((new_r00*sj8))+((cj8*new_r20*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x373))+IKsqr((x373*(x375.value)*((((new_r00*sj8))+((cj8*new_r20*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x373), (x373*(x375.value)*((((new_r00*sj8))+((cj8*new_r20*sj7))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x376=IKsin(j9);
IkReal x377=IKcos(j9);
IkReal x378=((1.0)*sj7);
IkReal x379=(cj7*cj8);
IkReal x380=((1.0)*x377);
IkReal x381=(sj7*x376);
IkReal x382=((1.0)*x376);
evalcond[0]=((((-1.0)*sj8*x382))+new_r20);
evalcond[1]=((((-1.0)*sj8*x380))+new_r21);
evalcond[2]=(((new_r11*sj7))+x376+((cj7*new_r01)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x380))+((cj7*new_r00)));
evalcond[4]=(((cj7*x376))+((cj8*sj7*x377))+new_r01);
evalcond[5]=(((cj8*x381))+(((-1.0)*cj7*x380))+new_r00);
evalcond[6]=((((-1.0)*x379*x380))+x381+new_r11);
evalcond[7]=((((-1.0)*new_r00*x378))+(((-1.0)*cj8*x382))+((cj7*new_r10)));
evalcond[8]=((((-1.0)*new_r01*x378))+(((-1.0)*cj8*x380))+((cj7*new_r11)));
evalcond[9]=((((-1.0)*x379*x382))+(((-1.0)*x377*x378))+new_r10);
evalcond[10]=(((new_r20*sj8))+(((-1.0)*cj8*new_r00*x378))+(((-1.0)*x382))+((new_r10*x379)));
evalcond[11]=((((-1.0)*x380))+((new_r21*sj8))+(((-1.0)*cj8*new_r01*x378))+((new_r11*x379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x383=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x383.valid){
continue;
}
CheckValue<IkReal> x384 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x384.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x383.value)))+(x384.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x385=IKsin(j9);
IkReal x386=IKcos(j9);
IkReal x387=((1.0)*sj7);
IkReal x388=(cj7*cj8);
IkReal x389=((1.0)*x386);
IkReal x390=(sj7*x385);
IkReal x391=((1.0)*x385);
evalcond[0]=(new_r20+(((-1.0)*sj8*x391)));
evalcond[1]=((((-1.0)*sj8*x389))+new_r21);
evalcond[2]=(((new_r11*sj7))+x385+((cj7*new_r01)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x389))+((cj7*new_r00)));
evalcond[4]=(((cj7*x385))+((cj8*sj7*x386))+new_r01);
evalcond[5]=((((-1.0)*cj7*x389))+((cj8*x390))+new_r00);
evalcond[6]=(x390+new_r11+(((-1.0)*x388*x389)));
evalcond[7]=((((-1.0)*new_r00*x387))+(((-1.0)*cj8*x391))+((cj7*new_r10)));
evalcond[8]=((((-1.0)*new_r01*x387))+(((-1.0)*cj8*x389))+((cj7*new_r11)));
evalcond[9]=((((-1.0)*x388*x391))+(((-1.0)*x386*x387))+new_r10);
evalcond[10]=((((-1.0)*x391))+((new_r20*sj8))+((new_r10*x388))+(((-1.0)*cj8*new_r00*x387)));
evalcond[11]=((((-1.0)*cj8*new_r01*x387))+((new_r11*x388))+(((-1.0)*x389))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x392=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x392.valid){
continue;
}
CheckValue<IkReal> x393 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x393.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x392.value)))+(x393.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x394=((1.0)*sj8);
evalcond[0]=((((-1.0)*x394*(IKsin(j9))))+new_r20);
evalcond[1]=((((-1.0)*x394*(IKcos(j9))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r11;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x395=((1.0)*sj9);
if( IKabs(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x395))+((cj9*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x395))))+IKsqr(((((-1.0)*new_r01*x395))+((cj9*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x395))), ((((-1.0)*new_r01*x395))+((cj9*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x396=IKcos(j7);
IkReal x397=IKsin(j7);
IkReal x398=((1.0)*cj9);
IkReal x399=((1.0)*sj9);
IkReal x400=(sj9*x397);
IkReal x401=((1.0)*x397);
IkReal x402=(x396*x398);
evalcond[0]=(((new_r11*x397))+sj9+((new_r01*x396)));
evalcond[1]=(((cj9*x397))+new_r01+((sj9*x396)));
evalcond[2]=(x400+new_r00+(((-1.0)*x402)));
evalcond[3]=(x400+new_r11+(((-1.0)*x402)));
evalcond[4]=((((-1.0)*x398))+((new_r00*x396))+((new_r10*x397)));
evalcond[5]=((((-1.0)*x397*x398))+(((-1.0)*x396*x399))+new_r10);
evalcond[6]=((((-1.0)*x399))+(((-1.0)*new_r00*x401))+((new_r10*x396)));
evalcond[7]=(((new_r11*x396))+(((-1.0)*x398))+(((-1.0)*new_r01*x401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x403=(((new_r11*sj9))+((cj9*new_r01)));
j7eval[0]=x403;
j7eval[1]=IKsign(x403);
j7eval[2]=((IKabs(((-1.0)+(new_r01*new_r01)+(cj9*cj9))))+(IKabs(((((-1.0)*cj9*sj9))+(((-1.0)*new_r01*new_r11))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x404=((1.0)*sj9);
IkReal x405=(((new_r10*new_r11))+((new_r00*new_r01)));
j7eval[0]=x405;
j7eval[1]=IKsign(x405);
j7eval[2]=((IKabs(((((-1.0)*new_r00*x404))+(((-1.0)*new_r11*x404)))))+(IKabs((((new_r01*sj9))+(((-1.0)*new_r10*x404))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x406=((1.0)*new_r11);
IkReal x407=((new_r01*new_r01)+(new_r11*new_r11));
j7eval[0]=x407;
j7eval[1]=((IKabs(((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x406)))))+(IKabs((((cj9*new_r01))+(((-1.0)*sj9*x406))))));
j7eval[2]=IKsign(x407);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r11=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x409 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x409.valid){
continue;
}
IkReal x408=x409.value;
j7array[0]=((-1.0)*x408);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x408)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j7))))+(((-1.0)*new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x410=IKcos(j7);
IkReal x411=IKsin(j7);
IkReal x412=((1.0)*x411);
evalcond[0]=(x410+new_r11);
evalcond[1]=(new_r01+(((-1.0)*x412)));
evalcond[2]=(new_r00+(((-1.0)*x410)));
evalcond[3]=(new_r10+(((-1.0)*x412)));
evalcond[4]=(((new_r11*x411))+((new_r01*x410)));
evalcond[5]=((-1.0)+((new_r10*x411))+((new_r00*x410)));
evalcond[6]=(((new_r10*x410))+(((-1.0)*new_r00*x412)));
evalcond[7]=((1.0)+((new_r11*x410))+(((-1.0)*new_r01*x412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x413=IKsin(j7);
IkReal x414=IKcos(j7);
IkReal x415=((1.0)*x413);
evalcond[0]=(x413+new_r01);
evalcond[1]=(x414+new_r00);
evalcond[2]=(x413+new_r10);
evalcond[3]=(new_r11+(((-1.0)*x414)));
evalcond[4]=(((new_r11*x413))+((new_r01*x414)));
evalcond[5]=((1.0)+((new_r10*x413))+((new_r00*x414)));
evalcond[6]=(((new_r10*x414))+(((-1.0)*new_r00*x415)));
evalcond[7]=((-1.0)+((new_r11*x414))+(((-1.0)*new_r01*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x417 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x417)==0){
continue;
}
IkReal x416=pow(x417,-0.5);
CheckValue<IkReal> x418 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x418.valid){
continue;
}
IkReal gconst6=((-1.0)*(x418.value));
IkReal gconst7=((-1.0)*new_r01*x416);
IkReal gconst8=(new_r11*x416);
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x419.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x422 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x422.valid){
continue;
}
IkReal x420=((-1.0)*(x422.value));
IkReal x421=x416;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x420;
IkReal gconst6=x420;
IkReal gconst7=((-1.0)*new_r01*x421);
IkReal gconst8=(new_r11*x421);
IkReal x423=new_r01*new_r01;
IkReal x424=(new_r00*new_r01);
IkReal x425=(((new_r10*new_r11))+x424);
IkReal x426=x416;
IkReal x427=(new_r01*x426);
j7eval[0]=x425;
j7eval[1]=IKsign(x425);
j7eval[2]=((IKabs((((x424*x426))+((new_r11*x427)))))+(IKabs(((((-1.0)*x423*x426))+((new_r10*x427))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x430 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
IkReal x428=((-1.0)*(x430.value));
IkReal x429=x416;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x428;
IkReal gconst6=x428;
IkReal gconst7=((-1.0)*new_r01*x429);
IkReal gconst8=(new_r11*x429);
IkReal x431=((new_r01*new_r01)+(new_r11*new_r11));
j7eval[0]=x431;
j7eval[1]=IKsign(x431);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x434 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x434.valid){
continue;
}
IkReal x432=((-1.0)*(x434.value));
IkReal x433=x416;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x432;
IkReal gconst6=x432;
IkReal gconst7=((-1.0)*new_r01*x433);
IkReal gconst8=(new_r11*x433);
j7eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst7*gconst7)+(gconst8*gconst8));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[4], cj7array[4], sj7array[4];
bool j7valid[4]={false};
_nj7 = 4;
j7array[0]=0;
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=1.5707963267949;
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
j7array[2]=3.14159265358979;
sj7array[2]=IKsin(j7array[2]);
cj7array[2]=IKcos(j7array[2]);
j7array[3]=-1.5707963267949;
sj7array[3]=IKsin(j7array[3]);
cj7array[3]=IKcos(j7array[3]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
if( j7array[2] > IKPI )
{
    j7array[2]-=IK2PI;
}
else if( j7array[2] < -IKPI )
{    j7array[2]+=IK2PI;
}
j7valid[2] = true;
if( j7array[3] > IKPI )
{
    j7array[3]-=IK2PI;
}
else if( j7array[3] < -IKPI )
{    j7array[3]+=IK2PI;
}
j7valid[3] = true;
for(int ij7 = 0; ij7 < 4; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 4; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x436 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x436.valid){
continue;
}
IkReal x435=((-1.0)*(x436.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x435;
new_r11=0;
new_r00=0;
IkReal gconst6=x435;
IkReal x437 = new_r01*new_r01;
if(IKabs(x437)==0){
continue;
}
IkReal gconst7=((-1.0)*new_r01*(pow(x437,-0.5)));
IkReal gconst8=0;
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(gconst7,-1);
if(!x438.valid){
continue;
}
cj7array[0]=((-1.0)*new_r01*(x438.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x439=IKsin(j7);
IkReal x440=IKcos(j7);
IkReal x441=((-1.0)*x439);
evalcond[0]=(new_r10*x439);
evalcond[1]=(gconst7*x441);
evalcond[2]=(new_r01*x441);
evalcond[3]=(((new_r01*x440))+gconst7);
evalcond[4]=(gconst7+((new_r10*x440)));
evalcond[5]=(((gconst7*x440))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x442=IKPowWithIntegerCheck(new_r01,-1);
if(!x442.valid){
continue;
}
cj7array[0]=((-1.0)*gconst7*(x442.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x443=IKsin(j7);
IkReal x444=IKcos(j7);
IkReal x445=(gconst7*x444);
IkReal x446=((-1.0)*x443);
evalcond[0]=(new_r10*x443);
evalcond[1]=(gconst7*x446);
evalcond[2]=(new_r01*x446);
evalcond[3]=(x445+new_r01);
evalcond[4]=(gconst7+((new_r10*x444)));
evalcond[5]=(x445+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst7;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x448 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x448.valid){
continue;
}
IkReal x447=((-1.0)*(x448.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x447;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x447;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
IkReal x449=((-1.0)*(x450.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x449;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x449;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j7eval[0]=-1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x452 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
IkReal x451=((-1.0)*(x452.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x451;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x451;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x453=((1.0)*new_r11);
CheckValue<IkReal> x454 = IKatan2WithCheck(IkReal((((gconst8*new_r01))+(((-1.0)*gconst7*x453)))),IkReal(((((-1.0)*gconst7*new_r01))+(((-1.0)*gconst8*x453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x454.valid){
continue;
}
CheckValue<IkReal> x455=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x455.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x454.value)+(((1.5707963267949)*(x455.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x456=IKcos(j7);
IkReal x457=IKsin(j7);
IkReal x458=(gconst7*x456);
IkReal x459=((1.0)*x457);
IkReal x460=(gconst8*x456);
IkReal x461=(gconst8*x459);
evalcond[0]=(((new_r11*x457))+((new_r01*x456))+gconst7);
evalcond[1]=(x460+((gconst7*x457))+new_r11);
evalcond[2]=((((-1.0)*x461))+x458);
evalcond[3]=((((-1.0)*x461))+x458+new_r01);
evalcond[4]=((((-1.0)*x460))+(((-1.0)*gconst7*x459)));
evalcond[5]=(((new_r11*x456))+gconst8+(((-1.0)*new_r01*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x462 = IKatan2WithCheck(IkReal((gconst7*new_r11)),IkReal((gconst8*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst8*gconst8)))+(((-1.0)*(gconst7*gconst7))))),-1);
if(!x463.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x462.value)+(((1.5707963267949)*(x463.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x464=IKcos(j7);
IkReal x465=IKsin(j7);
IkReal x466=(gconst7*x464);
IkReal x467=((1.0)*x465);
IkReal x468=(gconst8*x464);
IkReal x469=(gconst8*x467);
evalcond[0]=(((new_r11*x465))+((new_r01*x464))+gconst7);
evalcond[1]=(x468+((gconst7*x465))+new_r11);
evalcond[2]=((((-1.0)*x469))+x466);
evalcond[3]=((((-1.0)*x469))+x466+new_r01);
evalcond[4]=((((-1.0)*x468))+(((-1.0)*gconst7*x467)));
evalcond[5]=(((new_r11*x464))+gconst8+(((-1.0)*new_r01*x467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal((gconst7*gconst8)),IkReal(((-1.0)*(gconst7*gconst7))),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
CheckValue<IkReal> x471=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*new_r11))+((gconst7*new_r01)))),-1);
if(!x471.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x470.value)+(((1.5707963267949)*(x471.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x472=IKcos(j7);
IkReal x473=IKsin(j7);
IkReal x474=(gconst7*x472);
IkReal x475=((1.0)*x473);
IkReal x476=(gconst8*x472);
IkReal x477=(gconst8*x475);
evalcond[0]=(((new_r01*x472))+gconst7+((new_r11*x473)));
evalcond[1]=(x476+new_r11+((gconst7*x473)));
evalcond[2]=((((-1.0)*x477))+x474);
evalcond[3]=((((-1.0)*x477))+x474+new_r01);
evalcond[4]=((((-1.0)*gconst7*x475))+(((-1.0)*x476)));
evalcond[5]=(gconst8+((new_r11*x472))+(((-1.0)*new_r01*x475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x478=IKPowWithIntegerCheck(gconst8,-1);
if(!x478.valid){
continue;
}
cj7array[0]=(new_r00*(x478.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x479=IKsin(j7);
IkReal x480=IKcos(j7);
IkReal x481=((-1.0)*x479);
evalcond[0]=(new_r11*x479);
evalcond[1]=(gconst8*x481);
evalcond[2]=(new_r00*x481);
evalcond[3]=(new_r11+((gconst8*x480)));
evalcond[4]=(((new_r11*x480))+gconst8);
evalcond[5]=((((-1.0)*gconst8))+((new_r00*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x483 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x483.valid){
continue;
}
IkReal x482=((-1.0)*(x483.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x482;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x482;
IkReal gconst7=0;
IkReal x484 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x484)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x484,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x486 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x486.valid){
continue;
}
IkReal x485=((-1.0)*(x486.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x485;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x485;
IkReal gconst7=0;
IkReal x487 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x487)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x487,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x489 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x489.valid){
continue;
}
IkReal x488=((-1.0)*(x489.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x488;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x488;
IkReal gconst7=0;
IkReal x490 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x490)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x490,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x491=IKPowWithIntegerCheck(new_r10,-1);
if(!x491.valid){
continue;
}
CheckValue<IkReal> x492=IKPowWithIntegerCheck(gconst8,-1);
if(!x492.valid){
continue;
}
if( IKabs((gconst8*(x491.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x492.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst8*(x491.value)))+IKsqr(((-1.0)*new_r11*(x492.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst8*(x491.value)), ((-1.0)*new_r11*(x492.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x493=IKsin(j7);
IkReal x494=IKcos(j7);
IkReal x495=(gconst8*x493);
IkReal x496=(gconst8*x494);
evalcond[0]=(new_r11*x493);
evalcond[1]=(new_r10*x494);
evalcond[2]=((-1.0)*x495);
evalcond[3]=((-1.0)*x496);
evalcond[4]=(x496+new_r11);
evalcond[5]=(gconst8+((new_r11*x494)));
evalcond[6]=((((-1.0)*x495))+new_r10);
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x497=IKPowWithIntegerCheck(gconst8,-1);
if(!x497.valid){
continue;
}
CheckValue<IkReal> x498=IKPowWithIntegerCheck(new_r11,-1);
if(!x498.valid){
continue;
}
if( IKabs((new_r10*(x497.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x498.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x497.value)))+IKsqr(((-1.0)*gconst8*(x498.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x497.value)), ((-1.0)*gconst8*(x498.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x499=IKsin(j7);
IkReal x500=IKcos(j7);
IkReal x501=(gconst8*x499);
IkReal x502=(gconst8*x500);
evalcond[0]=(new_r11*x499);
evalcond[1]=(new_r10*x500);
evalcond[2]=((-1.0)*x501);
evalcond[3]=((-1.0)*x502);
evalcond[4]=(x502+new_r11);
evalcond[5]=(gconst8+((new_r11*x500)));
evalcond[6]=(new_r10+(((-1.0)*x501)));
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x503.valid){
continue;
}
CheckValue<IkReal> x504=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x504.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x503.value)+(((1.5707963267949)*(x504.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x505=IKsin(j7);
IkReal x506=IKcos(j7);
IkReal x507=(gconst8*x505);
IkReal x508=(gconst8*x506);
evalcond[0]=(new_r11*x505);
evalcond[1]=(new_r10*x506);
evalcond[2]=((-1.0)*x507);
evalcond[3]=((-1.0)*x508);
evalcond[4]=(x508+new_r11);
evalcond[5]=(gconst8+((new_r11*x506)));
evalcond[6]=(new_r10+(((-1.0)*x507)));
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x510 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x510.valid){
continue;
}
IkReal x509=((-1.0)*(x510.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x509;
new_r01=0;
IkReal gconst6=x509;
IkReal gconst7=0;
IkReal x511 = new_r11*new_r11;
if(IKabs(x511)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x511,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
IkReal x512=((-1.0)*(x513.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x512;
new_r01=0;
IkReal gconst6=x512;
IkReal gconst7=0;
IkReal x514 = new_r11*new_r11;
if(IKabs(x514)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x514,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x516 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x516.valid){
continue;
}
IkReal x515=((-1.0)*(x516.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x515;
new_r01=0;
IkReal gconst6=x515;
IkReal gconst7=0;
IkReal x517 = new_r11*new_r11;
if(IKabs(x517)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x517,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x518=IKPowWithIntegerCheck(gconst8,-1);
if(!x518.valid){
continue;
}
CheckValue<IkReal> x519=IKPowWithIntegerCheck(new_r11,-1);
if(!x519.valid){
continue;
}
if( IKabs((new_r10*(x518.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x519.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x518.value)))+IKsqr(((-1.0)*gconst8*(x519.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x518.value)), ((-1.0)*gconst8*(x519.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x520=IKsin(j7);
IkReal x521=IKcos(j7);
IkReal x522=(gconst8*x520);
IkReal x523=(gconst8*x521);
evalcond[0]=(new_r11*x520);
evalcond[1]=((-1.0)*x522);
evalcond[2]=(x523+new_r11);
evalcond[3]=(gconst8+((new_r11*x521)));
evalcond[4]=((((-1.0)*x523))+new_r00);
evalcond[5]=((((-1.0)*x522))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x520))+((new_r10*x521)));
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x520))+((new_r00*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
CheckValue<IkReal> x525=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x525.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x524.value)+(((1.5707963267949)*(x525.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x526=IKsin(j7);
IkReal x527=IKcos(j7);
IkReal x528=(gconst8*x526);
IkReal x529=(gconst8*x527);
evalcond[0]=(new_r11*x526);
evalcond[1]=((-1.0)*x528);
evalcond[2]=(x529+new_r11);
evalcond[3]=(gconst8+((new_r11*x527)));
evalcond[4]=((((-1.0)*x529))+new_r00);
evalcond[5]=((((-1.0)*x528))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x526))+((new_r10*x527)));
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x526))+((new_r00*x527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x530=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x530.valid){
continue;
}
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x530.value)))+(x531.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x532=IKsin(j7);
IkReal x533=IKcos(j7);
IkReal x534=(gconst8*x532);
IkReal x535=(gconst8*x533);
evalcond[0]=(new_r11*x532);
evalcond[1]=((-1.0)*x534);
evalcond[2]=(x535+new_r11);
evalcond[3]=(gconst8+((new_r11*x533)));
evalcond[4]=((((-1.0)*x535))+new_r00);
evalcond[5]=((((-1.0)*x534))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x532))+((new_r10*x533)));
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x532))+((new_r00*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x536=((1.0)*new_r11);
CheckValue<IkReal> x537 = IKatan2WithCheck(IkReal((((gconst8*new_r01))+(((-1.0)*gconst7*x536)))),IkReal(((((-1.0)*gconst8*x536))+(((-1.0)*gconst7*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538=IKPowWithIntegerCheck(IKsign(((gconst7*gconst7)+(gconst8*gconst8))),-1);
if(!x538.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x537.value)+(((1.5707963267949)*(x538.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x539=IKcos(j7);
IkReal x540=IKsin(j7);
IkReal x541=(gconst7*x539);
IkReal x542=((1.0)*x540);
IkReal x543=(gconst8*x539);
IkReal x544=(gconst8*x542);
evalcond[0]=(((new_r01*x539))+gconst7+((new_r11*x540)));
evalcond[1]=(x543+((gconst7*x540))+new_r11);
evalcond[2]=((((-1.0)*x544))+x541+new_r01);
evalcond[3]=((((-1.0)*new_r00*x542))+gconst7+((new_r10*x539)));
evalcond[4]=(gconst8+((new_r11*x539))+(((-1.0)*new_r01*x542)));
evalcond[5]=((((-1.0)*x544))+x541+new_r10);
evalcond[6]=(((new_r10*x540))+(((-1.0)*gconst8))+((new_r00*x539)));
evalcond[7]=((((-1.0)*x543))+new_r00+(((-1.0)*gconst7*x542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x545=((1.0)*new_r11);
CheckValue<IkReal> x546=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x546.valid){
continue;
}
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal((((gconst8*new_r01))+(((-1.0)*gconst7*x545)))),IkReal(((((-1.0)*gconst7*new_r01))+(((-1.0)*gconst8*x545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x546.value)))+(x547.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x548=IKcos(j7);
IkReal x549=IKsin(j7);
IkReal x550=(gconst7*x548);
IkReal x551=((1.0)*x549);
IkReal x552=(gconst8*x548);
IkReal x553=(gconst8*x551);
evalcond[0]=(gconst7+((new_r11*x549))+((new_r01*x548)));
evalcond[1]=(x552+((gconst7*x549))+new_r11);
evalcond[2]=((((-1.0)*x553))+x550+new_r01);
evalcond[3]=(gconst7+((new_r10*x548))+(((-1.0)*new_r00*x551)));
evalcond[4]=(gconst8+(((-1.0)*new_r01*x551))+((new_r11*x548)));
evalcond[5]=((((-1.0)*x553))+x550+new_r10);
evalcond[6]=(((new_r00*x548))+((new_r10*x549))+(((-1.0)*gconst8)));
evalcond[7]=((((-1.0)*x552))+new_r00+(((-1.0)*gconst7*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x554=((1.0)*gconst7);
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x554))+((gconst7*new_r01)))),IkReal(((((-1.0)*new_r11*x554))+(((-1.0)*new_r00*x554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
CheckValue<IkReal> x556=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x556.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x555.value)+(((1.5707963267949)*(x556.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x557=IKcos(j7);
IkReal x558=IKsin(j7);
IkReal x559=(gconst7*x557);
IkReal x560=((1.0)*x558);
IkReal x561=(gconst8*x557);
IkReal x562=(gconst8*x560);
evalcond[0]=(((new_r11*x558))+gconst7+((new_r01*x557)));
evalcond[1]=(((gconst7*x558))+x561+new_r11);
evalcond[2]=(x559+new_r01+(((-1.0)*x562)));
evalcond[3]=((((-1.0)*new_r00*x560))+((new_r10*x557))+gconst7);
evalcond[4]=(((new_r11*x557))+gconst8+(((-1.0)*new_r01*x560)));
evalcond[5]=(x559+new_r10+(((-1.0)*x562)));
evalcond[6]=(((new_r10*x558))+(((-1.0)*gconst8))+((new_r00*x557)));
evalcond[7]=((((-1.0)*gconst7*x560))+(((-1.0)*x561))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x564 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x564)==0){
continue;
}
IkReal x563=pow(x564,-0.5);
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x565.value))));
IkReal gconst10=((1.0)*new_r01*x563);
IkReal gconst11=((-1.0)*new_r11*x563);
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x566.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x569 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x569.valid){
continue;
}
IkReal x567=((1.0)*(x569.value));
IkReal x568=x563;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x567)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x567)));
IkReal gconst10=((1.0)*new_r01*x568);
IkReal gconst11=((-1.0)*new_r11*x568);
IkReal x570=new_r01*new_r01;
IkReal x571=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x572=x563;
IkReal x573=((1.0)*new_r01*x572);
j7eval[0]=x571;
j7eval[1]=((IKabs(((((-1.0)*new_r10*x573))+((x570*x572)))))+(IKabs(((((-1.0)*new_r11*x573))+(((-1.0)*new_r00*x573))))));
j7eval[2]=IKsign(x571);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x576 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x576.valid){
continue;
}
IkReal x574=((1.0)*(x576.value));
IkReal x575=x563;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x574)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x574)));
IkReal gconst10=((1.0)*new_r01*x575);
IkReal gconst11=((-1.0)*new_r11*x575);
IkReal x577=((new_r01*new_r01)+(new_r11*new_r11));
j7eval[0]=x577;
j7eval[1]=IKsign(x577);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x580 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x580.valid){
continue;
}
IkReal x578=((1.0)*(x580.value));
IkReal x579=x563;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x578)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x578)));
IkReal gconst10=((1.0)*new_r01*x579);
IkReal gconst11=((-1.0)*new_r11*x579);
j7eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst10*gconst10)+(gconst11*gconst11));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[4], cj7array[4], sj7array[4];
bool j7valid[4]={false};
_nj7 = 4;
j7array[0]=0;
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=1.5707963267949;
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
j7array[2]=3.14159265358979;
sj7array[2]=IKsin(j7array[2]);
cj7array[2]=IKcos(j7array[2]);
j7array[3]=-1.5707963267949;
sj7array[3]=IKsin(j7array[3]);
cj7array[3]=IKcos(j7array[3]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
if( j7array[2] > IKPI )
{
    j7array[2]-=IK2PI;
}
else if( j7array[2] < -IKPI )
{    j7array[2]+=IK2PI;
}
j7valid[2] = true;
if( j7array[3] > IKPI )
{
    j7array[3]-=IK2PI;
}
else if( j7array[3] < -IKPI )
{    j7array[3]+=IK2PI;
}
j7valid[3] = true;
for(int ij7 = 0; ij7 < 4; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 4; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
IkReal x581=((1.0)*(x582.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x581)));
new_r11=0;
new_r00=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x581)));
IkReal x583 = new_r01*new_r01;
if(IKabs(x583)==0){
continue;
}
IkReal gconst10=((1.0)*new_r01*(pow(x583,-0.5)));
IkReal gconst11=0;
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x584=IKPowWithIntegerCheck(gconst10,-1);
if(!x584.valid){
continue;
}
cj7array[0]=((-1.0)*new_r01*(x584.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x585=IKsin(j7);
IkReal x586=IKcos(j7);
IkReal x587=((-1.0)*x585);
evalcond[0]=(new_r10*x585);
evalcond[1]=(gconst10*x587);
evalcond[2]=(new_r01*x587);
evalcond[3]=(gconst10+((new_r01*x586)));
evalcond[4]=(gconst10+((new_r10*x586)));
evalcond[5]=(new_r10+((gconst10*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x588=IKPowWithIntegerCheck(new_r01,-1);
if(!x588.valid){
continue;
}
cj7array[0]=((-1.0)*gconst10*(x588.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x589=IKsin(j7);
IkReal x590=IKcos(j7);
IkReal x591=(gconst10*x590);
IkReal x592=((-1.0)*x589);
evalcond[0]=(new_r10*x589);
evalcond[1]=(gconst10*x592);
evalcond[2]=(new_r01*x592);
evalcond[3]=(x591+new_r01);
evalcond[4]=(((new_r10*x590))+gconst10);
evalcond[5]=(x591+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
CheckValue<IkReal> x594 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x594.valid){
continue;
}
IkReal x593=((1.0)*(x594.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x593)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x593)));
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=new_r01;
j7eval[3]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x596 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x596.valid){
continue;
}
IkReal x595=((1.0)*(x596.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x595)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x595)));
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x598 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x598.valid){
continue;
}
IkReal x597=((1.0)*(x598.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x597)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x597)));
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x599=((1.0)*new_r11);
CheckValue<IkReal> x600 = IKatan2WithCheck(IkReal((((gconst11*new_r01))+(((-1.0)*gconst10*x599)))),IkReal(((((-1.0)*gconst10*new_r01))+(((-1.0)*gconst11*x599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x600.valid){
continue;
}
CheckValue<IkReal> x601=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x601.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x600.value)+(((1.5707963267949)*(x601.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x602=IKcos(j7);
IkReal x603=IKsin(j7);
IkReal x604=(gconst10*x602);
IkReal x605=(gconst11*x602);
IkReal x606=((1.0)*x603);
IkReal x607=(gconst11*x606);
evalcond[0]=(gconst10+((new_r11*x603))+((new_r01*x602)));
evalcond[1]=(x605+new_r11+((gconst10*x603)));
evalcond[2]=(x604+(((-1.0)*x607)));
evalcond[3]=(x604+(((-1.0)*x607))+new_r01);
evalcond[4]=((((-1.0)*gconst10*x606))+(((-1.0)*x605)));
evalcond[5]=(gconst11+((new_r11*x602))+(((-1.0)*new_r01*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst11*gconst11)))+(((-1.0)*(gconst10*gconst10))))),-1);
if(!x608.valid){
continue;
}
CheckValue<IkReal> x609 = IKatan2WithCheck(IkReal((gconst10*new_r11)),IkReal((gconst11*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x609.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x608.value)))+(x609.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x610=IKcos(j7);
IkReal x611=IKsin(j7);
IkReal x612=(gconst10*x610);
IkReal x613=(gconst11*x610);
IkReal x614=((1.0)*x611);
IkReal x615=(gconst11*x614);
evalcond[0]=(gconst10+((new_r11*x611))+((new_r01*x610)));
evalcond[1]=(x613+new_r11+((gconst10*x611)));
evalcond[2]=((((-1.0)*x615))+x612);
evalcond[3]=((((-1.0)*x615))+x612+new_r01);
evalcond[4]=((((-1.0)*gconst10*x614))+(((-1.0)*x613)));
evalcond[5]=(gconst11+((new_r11*x610))+(((-1.0)*new_r01*x614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x616=IKPowWithIntegerCheck(IKsign((((gconst10*new_r01))+(((-1.0)*gconst11*new_r11)))),-1);
if(!x616.valid){
continue;
}
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal((gconst10*gconst11)),IkReal(((-1.0)*(gconst10*gconst10))),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x616.value)))+(x617.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x618=IKcos(j7);
IkReal x619=IKsin(j7);
IkReal x620=(gconst10*x618);
IkReal x621=(gconst11*x618);
IkReal x622=((1.0)*x619);
IkReal x623=(gconst11*x622);
evalcond[0]=(gconst10+((new_r11*x619))+((new_r01*x618)));
evalcond[1]=(x621+new_r11+((gconst10*x619)));
evalcond[2]=((((-1.0)*x623))+x620);
evalcond[3]=((((-1.0)*x623))+x620+new_r01);
evalcond[4]=((((-1.0)*x621))+(((-1.0)*gconst10*x622)));
evalcond[5]=((((-1.0)*new_r01*x622))+gconst11+((new_r11*x618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x624=IKPowWithIntegerCheck(gconst11,-1);
if(!x624.valid){
continue;
}
cj7array[0]=(new_r00*(x624.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x625=IKsin(j7);
IkReal x626=IKcos(j7);
IkReal x627=((-1.0)*x625);
evalcond[0]=(new_r11*x625);
evalcond[1]=(gconst11*x627);
evalcond[2]=(new_r00*x627);
evalcond[3]=(((gconst11*x626))+new_r11);
evalcond[4]=(gconst11+((new_r11*x626)));
evalcond[5]=(((new_r00*x626))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x629 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x629.valid){
continue;
}
IkReal x628=((1.0)*(x629.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x628)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x628)));
IkReal gconst10=0;
IkReal x630 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x630)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x630,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
IkReal x631=((1.0)*(x632.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x631)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x631)));
IkReal gconst10=0;
IkReal x633 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x633)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x633,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x635 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x635.valid){
continue;
}
IkReal x634=((1.0)*(x635.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x634)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x634)));
IkReal gconst10=0;
IkReal x636 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x636)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x636,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x637=IKPowWithIntegerCheck(new_r10,-1);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638=IKPowWithIntegerCheck(gconst11,-1);
if(!x638.valid){
continue;
}
if( IKabs((gconst11*(x637.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x638.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst11*(x637.value)))+IKsqr(((-1.0)*new_r11*(x638.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst11*(x637.value)), ((-1.0)*new_r11*(x638.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x639=IKsin(j7);
IkReal x640=IKcos(j7);
IkReal x641=(gconst11*x639);
IkReal x642=(gconst11*x640);
evalcond[0]=(new_r11*x639);
evalcond[1]=(new_r10*x640);
evalcond[2]=((-1.0)*x641);
evalcond[3]=((-1.0)*x642);
evalcond[4]=(x642+new_r11);
evalcond[5]=(gconst11+((new_r11*x640)));
evalcond[6]=((((-1.0)*x641))+new_r10);
evalcond[7]=(((new_r10*x639))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x643=IKPowWithIntegerCheck(gconst11,-1);
if(!x643.valid){
continue;
}
CheckValue<IkReal> x644=IKPowWithIntegerCheck(new_r11,-1);
if(!x644.valid){
continue;
}
if( IKabs((new_r10*(x643.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x644.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x643.value)))+IKsqr(((-1.0)*gconst11*(x644.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x643.value)), ((-1.0)*gconst11*(x644.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x645=IKsin(j7);
IkReal x646=IKcos(j7);
IkReal x647=(gconst11*x645);
IkReal x648=(gconst11*x646);
evalcond[0]=(new_r11*x645);
evalcond[1]=(new_r10*x646);
evalcond[2]=((-1.0)*x647);
evalcond[3]=((-1.0)*x648);
evalcond[4]=(x648+new_r11);
evalcond[5]=(gconst11+((new_r11*x646)));
evalcond[6]=((((-1.0)*x647))+new_r10);
evalcond[7]=(((new_r10*x645))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x649.valid){
continue;
}
CheckValue<IkReal> x650 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x650.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x649.value)))+(x650.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x651=IKsin(j7);
IkReal x652=IKcos(j7);
IkReal x653=(gconst11*x651);
IkReal x654=(gconst11*x652);
evalcond[0]=(new_r11*x651);
evalcond[1]=(new_r10*x652);
evalcond[2]=((-1.0)*x653);
evalcond[3]=((-1.0)*x654);
evalcond[4]=(x654+new_r11);
evalcond[5]=(gconst11+((new_r11*x652)));
evalcond[6]=((((-1.0)*x653))+new_r10);
evalcond[7]=(((new_r10*x651))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
IkReal x655=((1.0)*(x656.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x655)));
new_r01=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x655)));
IkReal gconst10=0;
IkReal x657 = new_r11*new_r11;
if(IKabs(x657)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x657,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
IkReal x658=((1.0)*(x659.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x658)));
new_r01=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x658)));
IkReal gconst10=0;
IkReal x660 = new_r11*new_r11;
if(IKabs(x660)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x660,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x662 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x662.valid){
continue;
}
IkReal x661=((1.0)*(x662.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159153026923)+(((-1.0)*x661)));
new_r01=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x661)));
IkReal gconst10=0;
IkReal x663 = new_r11*new_r11;
if(IKabs(x663)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x663,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x664=IKPowWithIntegerCheck(gconst11,-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(new_r11,-1);
if(!x665.valid){
continue;
}
if( IKabs((new_r10*(x664.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x665.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x664.value)))+IKsqr(((-1.0)*gconst11*(x665.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x664.value)), ((-1.0)*gconst11*(x665.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x666=IKsin(j7);
IkReal x667=IKcos(j7);
IkReal x668=((1.0)*x666);
IkReal x669=(gconst11*x667);
evalcond[0]=(new_r11*x666);
evalcond[1]=((-1.0)*gconst11*x666);
evalcond[2]=(x669+new_r11);
evalcond[3]=(gconst11+((new_r11*x667)));
evalcond[4]=((((-1.0)*x669))+new_r00);
evalcond[5]=((((-1.0)*gconst11*x668))+new_r10);
evalcond[6]=(((new_r10*x667))+(((-1.0)*new_r00*x668)));
evalcond[7]=(((new_r10*x666))+(((-1.0)*gconst11))+((new_r00*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x670=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x670.valid){
continue;
}
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x670.value)))+(x671.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x672=IKsin(j7);
IkReal x673=IKcos(j7);
IkReal x674=((1.0)*x672);
IkReal x675=(gconst11*x673);
evalcond[0]=(new_r11*x672);
evalcond[1]=((-1.0)*gconst11*x672);
evalcond[2]=(x675+new_r11);
evalcond[3]=(((new_r11*x673))+gconst11);
evalcond[4]=((((-1.0)*x675))+new_r00);
evalcond[5]=((((-1.0)*gconst11*x674))+new_r10);
evalcond[6]=(((new_r10*x673))+(((-1.0)*new_r00*x674)));
evalcond[7]=(((new_r00*x673))+((new_r10*x672))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x676=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x676.value)))+(x677.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x678=IKsin(j7);
IkReal x679=IKcos(j7);
IkReal x680=((1.0)*x678);
IkReal x681=(gconst11*x679);
evalcond[0]=(new_r11*x678);
evalcond[1]=((-1.0)*gconst11*x678);
evalcond[2]=(x681+new_r11);
evalcond[3]=(((new_r11*x679))+gconst11);
evalcond[4]=(new_r00+(((-1.0)*x681)));
evalcond[5]=((((-1.0)*gconst11*x680))+new_r10);
evalcond[6]=(((new_r10*x679))+(((-1.0)*new_r00*x680)));
evalcond[7]=(((new_r00*x679))+((new_r10*x678))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x682=((1.0)*new_r11);
CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal((((gconst11*new_r01))+(((-1.0)*gconst10*x682)))),IkReal(((((-1.0)*gconst11*x682))+(((-1.0)*gconst10*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x683.valid){
continue;
}
CheckValue<IkReal> x684=IKPowWithIntegerCheck(IKsign(((gconst10*gconst10)+(gconst11*gconst11))),-1);
if(!x684.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x683.value)+(((1.5707963267949)*(x684.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x685=IKcos(j7);
IkReal x686=IKsin(j7);
IkReal x687=((1.0)*gconst11);
IkReal x688=(gconst10*x685);
IkReal x689=((1.0)*x686);
IkReal x690=(x686*x687);
evalcond[0]=(gconst10+((new_r01*x685))+((new_r11*x686)));
evalcond[1]=(((gconst10*x686))+((gconst11*x685))+new_r11);
evalcond[2]=(x688+(((-1.0)*x690))+new_r01);
evalcond[3]=(gconst10+((new_r10*x685))+(((-1.0)*new_r00*x689)));
evalcond[4]=((((-1.0)*new_r01*x689))+gconst11+((new_r11*x685)));
evalcond[5]=(x688+(((-1.0)*x690))+new_r10);
evalcond[6]=((((-1.0)*x687))+((new_r00*x685))+((new_r10*x686)));
evalcond[7]=((((-1.0)*x685*x687))+(((-1.0)*gconst10*x689))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x691=((1.0)*new_r11);
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal((((gconst11*new_r01))+(((-1.0)*gconst10*x691)))),IkReal(((((-1.0)*gconst11*x691))+(((-1.0)*gconst10*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
CheckValue<IkReal> x693=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x693.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x692.value)+(((1.5707963267949)*(x693.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x694=IKcos(j7);
IkReal x695=IKsin(j7);
IkReal x696=((1.0)*gconst11);
IkReal x697=(gconst10*x694);
IkReal x698=((1.0)*x695);
IkReal x699=(x695*x696);
evalcond[0]=(gconst10+((new_r11*x695))+((new_r01*x694)));
evalcond[1]=(((gconst10*x695))+((gconst11*x694))+new_r11);
evalcond[2]=(x697+(((-1.0)*x699))+new_r01);
evalcond[3]=(gconst10+((new_r10*x694))+(((-1.0)*new_r00*x698)));
evalcond[4]=((((-1.0)*new_r01*x698))+gconst11+((new_r11*x694)));
evalcond[5]=(x697+(((-1.0)*x699))+new_r10);
evalcond[6]=(((new_r10*x695))+(((-1.0)*x696))+((new_r00*x694)));
evalcond[7]=((((-1.0)*gconst10*x698))+(((-1.0)*x694*x696))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x700=((1.0)*gconst10);
CheckValue<IkReal> x701 = IKatan2WithCheck(IkReal((((gconst10*new_r01))+(((-1.0)*new_r10*x700)))),IkReal(((((-1.0)*new_r11*x700))+(((-1.0)*new_r00*x700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x701.valid){
continue;
}
CheckValue<IkReal> x702=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x702.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x701.value)+(((1.5707963267949)*(x702.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x703=IKcos(j7);
IkReal x704=IKsin(j7);
IkReal x705=((1.0)*gconst11);
IkReal x706=(gconst10*x703);
IkReal x707=((1.0)*x704);
IkReal x708=(x704*x705);
evalcond[0]=(((new_r01*x703))+gconst10+((new_r11*x704)));
evalcond[1]=(((gconst10*x704))+new_r11+((gconst11*x703)));
evalcond[2]=((((-1.0)*x708))+x706+new_r01);
evalcond[3]=(gconst10+((new_r10*x703))+(((-1.0)*new_r00*x707)));
evalcond[4]=(gconst11+((new_r11*x703))+(((-1.0)*new_r01*x707)));
evalcond[5]=((((-1.0)*x708))+x706+new_r10);
evalcond[6]=(((new_r00*x703))+(((-1.0)*x705))+((new_r10*x704)));
evalcond[7]=((((-1.0)*gconst10*x707))+(((-1.0)*x703*x705))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
IkReal x709=x710.value;
j7array[0]=((-1.0)*x709);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x709)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j7))))+(((-1.0)*new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x711=((1.0)*new_r11);
CheckValue<IkReal> x712 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x711))+((cj9*new_r01)))),IkReal(((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x713.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x712.value)+(((1.5707963267949)*(x713.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x714=IKsin(j7);
IkReal x715=IKcos(j7);
IkReal x716=(sj9*x715);
IkReal x717=(sj9*x714);
IkReal x718=(cj9*x715);
IkReal x719=((1.0)*x714);
IkReal x720=(cj9*x719);
evalcond[0]=(sj9+((new_r01*x715))+((new_r11*x714)));
evalcond[1]=(x718+x717+new_r11);
evalcond[2]=((((-1.0)*x720))+x716+new_r01);
evalcond[3]=(sj9+((new_r10*x715))+(((-1.0)*new_r00*x719)));
evalcond[4]=(cj9+((new_r11*x715))+(((-1.0)*new_r01*x719)));
evalcond[5]=((((-1.0)*x720))+x716+new_r10);
evalcond[6]=(((new_r00*x715))+((new_r10*x714))+(((-1.0)*cj9)));
evalcond[7]=((((-1.0)*x717))+(((-1.0)*x718))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x721=((1.0)*sj9);
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal((((new_r01*sj9))+(((-1.0)*new_r10*x721)))),IkReal(((((-1.0)*new_r00*x721))+(((-1.0)*new_r11*x721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
CheckValue<IkReal> x723=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x723.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x722.value)+(((1.5707963267949)*(x723.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x724=IKsin(j7);
IkReal x725=IKcos(j7);
IkReal x726=(sj9*x725);
IkReal x727=(sj9*x724);
IkReal x728=(cj9*x725);
IkReal x729=((1.0)*x724);
IkReal x730=(cj9*x729);
evalcond[0]=(sj9+((new_r01*x725))+((new_r11*x724)));
evalcond[1]=(x727+x728+new_r11);
evalcond[2]=((((-1.0)*x730))+x726+new_r01);
evalcond[3]=(sj9+(((-1.0)*new_r00*x729))+((new_r10*x725)));
evalcond[4]=(cj9+((new_r11*x725))+(((-1.0)*new_r01*x729)));
evalcond[5]=((((-1.0)*x730))+x726+new_r10);
evalcond[6]=(((new_r00*x725))+(((-1.0)*cj9))+((new_r10*x724)));
evalcond[7]=((((-1.0)*x727))+(((-1.0)*x728))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(IKsign((((new_r11*sj9))+((cj9*new_r01)))),-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj9*cj9))),IkReal(((((-1.0)*cj9*sj9))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x732.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x731.value)))+(x732.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x733=IKsin(j7);
IkReal x734=IKcos(j7);
IkReal x735=(sj9*x734);
IkReal x736=(sj9*x733);
IkReal x737=(cj9*x734);
IkReal x738=((1.0)*x733);
IkReal x739=(cj9*x738);
evalcond[0]=(sj9+((new_r01*x734))+((new_r11*x733)));
evalcond[1]=(x737+x736+new_r11);
evalcond[2]=((((-1.0)*x739))+x735+new_r01);
evalcond[3]=(sj9+(((-1.0)*new_r00*x738))+((new_r10*x734)));
evalcond[4]=(cj9+(((-1.0)*new_r01*x738))+((new_r11*x734)));
evalcond[5]=((((-1.0)*x739))+x735+new_r10);
evalcond[6]=(((new_r00*x734))+((new_r10*x733))+(((-1.0)*cj9)));
evalcond[7]=((((-1.0)*x736))+(((-1.0)*x737))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
IkReal x740=x741.value;
j7array[0]=((-1.0)*x740);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x740)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x742=IKcos(j7);
IkReal x743=IKsin(j7);
IkReal x744=(new_r11*x742);
IkReal x745=((1.0)*new_r01*x743);
evalcond[0]=(((new_r01*x742))+((new_r11*x743)));
evalcond[1]=(((new_r10*x743))+((new_r00*x742)));
evalcond[2]=((((-1.0)*new_r00*x743))+((new_r10*x742)));
evalcond[3]=(x744+(((-1.0)*x745)));
evalcond[4]=((((-1.0)*new_r22*x745))+((new_r22*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x747 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x747.valid){
continue;
}
IkReal x746=x747.value;
j7array[0]=((-1.0)*x746);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x746)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x748=IKcos(j7);
IkReal x749=IKsin(j7);
IkReal x750=(new_r22*x748);
IkReal x751=((1.0)*new_r01*x749);
IkReal x752=((1.0)*new_r00*x749);
evalcond[0]=(((new_r01*x748))+((new_r11*x749)));
evalcond[1]=(((new_r10*x748))+(((-1.0)*x752)));
evalcond[2]=(((new_r11*x748))+(((-1.0)*x751)));
evalcond[3]=((((-1.0)*new_r22*x752))+((new_r10*x750)));
evalcond[4]=((((-1.0)*new_r22*x751))+((new_r11*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x754 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x754.valid){
continue;
}
IkReal x753=x754.value;
j7array[0]=((-1.0)*x753);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x753)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x755=IKcos(j7);
IkReal x756=IKsin(j7);
IkReal x757=(new_r22*x755);
IkReal x758=((1.0)*new_r01*x756);
IkReal x759=((1.0)*new_r00*x756);
evalcond[0]=(((new_r00*x755))+((new_r10*x756)));
evalcond[1]=(((new_r10*x755))+(((-1.0)*x759)));
evalcond[2]=(((new_r11*x755))+(((-1.0)*x758)));
evalcond[3]=((((-1.0)*new_r22*x759))+((new_r10*x757)));
evalcond[4]=((((-1.0)*new_r22*x758))+((new_r11*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(sj8,-1);
if(!x761.valid){
continue;
}
IkReal x760=x761.value;
CheckValue<IkReal> x762=IKPowWithIntegerCheck(new_r11,-1);
if(!x762.valid){
continue;
}
if( IKabs((x760*(x762.value)*(((((-1.0)*sj8*sj9))+((new_r01*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x760)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x760*(x762.value)*(((((-1.0)*sj8*sj9))+((new_r01*new_r12))))))+IKsqr(((-1.0)*new_r12*x760))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x760*(x762.value)*(((((-1.0)*sj8*sj9))+((new_r01*new_r12))))), ((-1.0)*new_r12*x760));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x763=IKcos(j7);
IkReal x764=IKsin(j7);
IkReal x765=((1.0)*cj9);
IkReal x766=((1.0)*sj9);
IkReal x767=((1.0)*sj8);
IkReal x768=(new_r11*x763);
IkReal x769=((1.0)*x764);
IkReal x770=(sj8*x764);
IkReal x771=(new_r12*x763);
IkReal x772=(sj8*x763);
IkReal x773=(cj8*x763);
IkReal x774=(cj8*x764);
evalcond[0]=(x772+new_r12);
evalcond[1]=((((-1.0)*x764*x767))+new_r02);
evalcond[2]=(((new_r12*x764))+((new_r02*x763)));
evalcond[3]=(sj9+((new_r11*x764))+((new_r01*x763)));
evalcond[4]=(sj8+x771+(((-1.0)*new_r02*x769)));
evalcond[5]=(((cj9*x774))+new_r01+((sj9*x763)));
evalcond[6]=(((new_r10*x764))+(((-1.0)*x765))+((new_r00*x763)));
evalcond[7]=((((-1.0)*x763*x765))+new_r00+((sj9*x774)));
evalcond[8]=((((-1.0)*x765*x773))+new_r11+((sj9*x764)));
evalcond[9]=((((-1.0)*x764*x765))+(((-1.0)*x766*x773))+new_r10);
evalcond[10]=(((new_r10*x763))+(((-1.0)*new_r00*x769))+(((-1.0)*cj8*x766)));
evalcond[11]=((((-1.0)*cj8*x765))+x768+(((-1.0)*new_r01*x769)));
evalcond[12]=(((cj8*x771))+((new_r22*sj8))+(((-1.0)*cj8*new_r02*x769)));
evalcond[13]=(((cj8*new_r20))+(((-1.0)*new_r10*x763*x767))+((new_r00*x770)));
evalcond[14]=(((cj8*new_r21))+(((-1.0)*x767*x768))+((new_r01*x770)));
evalcond[15]=((-1.0)+((cj8*new_r22))+(((-1.0)*x767*x771))+((new_r02*x770)));
evalcond[16]=(((new_r20*sj8))+(((-1.0)*x766))+(((-1.0)*cj8*new_r00*x769))+((new_r10*x773)));
evalcond[17]=(((cj8*x768))+(((-1.0)*x765))+((new_r21*sj8))+(((-1.0)*cj8*new_r01*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x775=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x775.valid){
continue;
}
CheckValue<IkReal> x776 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x776.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x775.value)))+(x776.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x777=IKcos(j7);
IkReal x778=IKsin(j7);
IkReal x779=((1.0)*cj9);
IkReal x780=((1.0)*sj9);
IkReal x781=((1.0)*sj8);
IkReal x782=(new_r11*x777);
IkReal x783=((1.0)*x778);
IkReal x784=(sj8*x778);
IkReal x785=(new_r12*x777);
IkReal x786=(sj8*x777);
IkReal x787=(cj8*x777);
IkReal x788=(cj8*x778);
evalcond[0]=(x786+new_r12);
evalcond[1]=(new_r02+(((-1.0)*x778*x781)));
evalcond[2]=(((new_r12*x778))+((new_r02*x777)));
evalcond[3]=(sj9+((new_r11*x778))+((new_r01*x777)));
evalcond[4]=(sj8+(((-1.0)*new_r02*x783))+x785);
evalcond[5]=(((cj9*x788))+new_r01+((sj9*x777)));
evalcond[6]=(((new_r00*x777))+((new_r10*x778))+(((-1.0)*x779)));
evalcond[7]=(new_r00+(((-1.0)*x777*x779))+((sj9*x788)));
evalcond[8]=(new_r11+((sj9*x778))+(((-1.0)*x779*x787)));
evalcond[9]=((((-1.0)*x778*x779))+new_r10+(((-1.0)*x780*x787)));
evalcond[10]=((((-1.0)*cj8*x780))+((new_r10*x777))+(((-1.0)*new_r00*x783)));
evalcond[11]=((((-1.0)*new_r01*x783))+(((-1.0)*cj8*x779))+x782);
evalcond[12]=(((cj8*x785))+((new_r22*sj8))+(((-1.0)*cj8*new_r02*x783)));
evalcond[13]=(((cj8*new_r20))+(((-1.0)*new_r10*x777*x781))+((new_r00*x784)));
evalcond[14]=(((cj8*new_r21))+(((-1.0)*x781*x782))+((new_r01*x784)));
evalcond[15]=((-1.0)+((cj8*new_r22))+((new_r02*x784))+(((-1.0)*x781*x785)));
evalcond[16]=(((new_r20*sj8))+((new_r10*x787))+(((-1.0)*x780))+(((-1.0)*cj8*new_r00*x783)));
evalcond[17]=(((cj8*x782))+(((-1.0)*cj8*new_r01*x783))+(((-1.0)*x779))+((new_r21*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "b6f95b455374166d3a52c52253fc9b02"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
